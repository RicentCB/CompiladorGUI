Grammar:

Rule 0     S' -> listStmt
Rule 1     listStmt -> listStmt assign BRANCH
Rule 2     listStmt -> listStmt statment BRANCH
Rule 3     listStmt -> listStmt expr BRANCH
Rule 4     listStmt -> listStmt BRANCH
Rule 5     listStmt -> <empty>
Rule 6     assign -> NAME = expr
Rule 7     statment -> { statmentList }
Rule 8     statment -> ifCode conditionLogical statment end
Rule 9     statment -> whileCode conditionLogical statment end
Rule 10    statment -> PRINTEX expr
Rule 11    statment -> expr
Rule 12    whileCode -> WHILE
Rule 13    ifCode -> IF
Rule 14    end -> ENDWHILE
Rule 15    end -> ENDIF
Rule 16    statmentList -> statmentList statment
Rule 17    statmentList -> statmentList BRANCH
Rule 18    statmentList -> <empty>
Rule 19    expr -> ( expr )
Rule 20    expr -> expr SM_EXP expr  [precedence=right, level=4]
Rule 21    expr -> expr / expr  [precedence=left, level=2]
Rule 22    expr -> expr * expr  [precedence=left, level=2]
Rule 23    expr -> expr - expr  [precedence=left, level=1]
Rule 24    expr -> expr + expr  [precedence=left, level=1]
Rule 25    expr -> - expr  [precedence=right, level=3]
Rule 26    expr -> NAME
Rule 27    expr -> NUMBER_F
Rule 28    expr -> NUMBER
Rule 29    expr -> ABS ( expr )
Rule 30    expr -> SQRT ( expr )
Rule 31    expr -> LOG10 ( expr )
Rule 32    expr -> LOG ( expr )
Rule 33    expr -> EXP ( expr )
Rule 34    expr -> ATAN ( expr )
Rule 35    expr -> COS ( expr )
Rule 36    expr -> SIN ( expr )
Rule 37    expr -> DEG
Rule 38    expr -> PHI
Rule 39    expr -> GAMMA
Rule 40    expr -> N_E
Rule 41    expr -> PI
Rule 42    condition -> expr NE expr
Rule 43    condition -> expr EQ expr
Rule 44    condition -> expr LE expr
Rule 45    condition -> expr LT expr
Rule 46    condition -> expr GE expr
Rule 47    condition -> expr GT expr
Rule 48    conditionLogical -> NOT condition
Rule 49    conditionLogical -> condition OR condition
Rule 50    conditionLogical -> condition AND condition
Rule 51    conditionLogical -> ( condition )

Unused terminals:

    THEN

Terminals, with rules where they appear:

(                    : 19 29 30 31 32 33 34 35 36 51
)                    : 19 29 30 31 32 33 34 35 36 51
*                    : 22
+                    : 24
-                    : 23 25
/                    : 21
=                    : 6
ABS                  : 29
AND                  : 50
ATAN                 : 34
BRANCH               : 1 2 3 4 17
COS                  : 35
DEG                  : 37
ENDIF                : 15
ENDWHILE             : 14
EQ                   : 43
EXP                  : 33
GAMMA                : 39
GE                   : 46
GT                   : 47
IF                   : 13
LE                   : 44
LOG                  : 32
LOG10                : 31
LT                   : 45
NAME                 : 6 26
NE                   : 42
NOT                  : 48
NUMBER               : 28
NUMBER_F             : 27
N_E                  : 40
OR                   : 49
PHI                  : 38
PI                   : 41
PRINTEX              : 10
SIN                  : 36
SM_EXP               : 20
SQRT                 : 30
THEN                 : 
WHILE                : 12
error                : 
{                    : 7
}                    : 7

Nonterminals, with rules where they appear:

assign               : 1
condition            : 48 49 49 50 50 51
conditionLogical     : 8 9
end                  : 8 9
expr                 : 3 6 10 11 19 20 20 21 21 22 22 23 23 24 24 25 29 30 31 32 33 34 35 36 42 42 43 43 44 44 45 45 46 46 47 47
ifCode               : 8
listStmt             : 1 2 3 4 0
statment             : 2 8 9 16
statmentList         : 7 16 17
whileCode            : 9


state 0

    (0) S' -> . listStmt
    (1) listStmt -> . listStmt assign BRANCH
    (2) listStmt -> . listStmt statment BRANCH
    (3) listStmt -> . listStmt expr BRANCH
    (4) listStmt -> . listStmt BRANCH
    (5) listStmt -> .
    BRANCH          reduce using rule 5 (listStmt -> .)
    NAME            reduce using rule 5 (listStmt -> .)
    {               reduce using rule 5 (listStmt -> .)
    PRINTEX         reduce using rule 5 (listStmt -> .)
    (               reduce using rule 5 (listStmt -> .)
    -               reduce using rule 5 (listStmt -> .)
    NUMBER_F        reduce using rule 5 (listStmt -> .)
    NUMBER          reduce using rule 5 (listStmt -> .)
    ABS             reduce using rule 5 (listStmt -> .)
    SQRT            reduce using rule 5 (listStmt -> .)
    LOG10           reduce using rule 5 (listStmt -> .)
    LOG             reduce using rule 5 (listStmt -> .)
    EXP             reduce using rule 5 (listStmt -> .)
    ATAN            reduce using rule 5 (listStmt -> .)
    COS             reduce using rule 5 (listStmt -> .)
    SIN             reduce using rule 5 (listStmt -> .)
    DEG             reduce using rule 5 (listStmt -> .)
    PHI             reduce using rule 5 (listStmt -> .)
    GAMMA           reduce using rule 5 (listStmt -> .)
    N_E             reduce using rule 5 (listStmt -> .)
    PI              reduce using rule 5 (listStmt -> .)
    IF              reduce using rule 5 (listStmt -> .)
    WHILE           reduce using rule 5 (listStmt -> .)
    $end            reduce using rule 5 (listStmt -> .)

    listStmt                       shift and go to state 1

state 1

    (0) S' -> listStmt .
    (1) listStmt -> listStmt . assign BRANCH
    (2) listStmt -> listStmt . statment BRANCH
    (3) listStmt -> listStmt . expr BRANCH
    (4) listStmt -> listStmt . BRANCH
    (6) assign -> . NAME = expr
    (7) statment -> . { statmentList }
    (8) statment -> . ifCode conditionLogical statment end
    (9) statment -> . whileCode conditionLogical statment end
    (10) statment -> . PRINTEX expr
    (11) statment -> . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (13) ifCode -> . IF
    (12) whileCode -> . WHILE
    BRANCH          shift and go to state 3
    NAME            shift and go to state 6
    {               shift and go to state 7
    PRINTEX         shift and go to state 10
    (               shift and go to state 11
    -               shift and go to state 12
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29

    assign                         shift and go to state 2
    statment                       shift and go to state 4
    expr                           shift and go to state 5
    ifCode                         shift and go to state 8
    whileCode                      shift and go to state 9

state 2

    (1) listStmt -> listStmt assign . BRANCH
    BRANCH          shift and go to state 30


state 3

    (4) listStmt -> listStmt BRANCH .
    BRANCH          reduce using rule 4 (listStmt -> listStmt BRANCH .)
    NAME            reduce using rule 4 (listStmt -> listStmt BRANCH .)
    {               reduce using rule 4 (listStmt -> listStmt BRANCH .)
    PRINTEX         reduce using rule 4 (listStmt -> listStmt BRANCH .)
    (               reduce using rule 4 (listStmt -> listStmt BRANCH .)
    -               reduce using rule 4 (listStmt -> listStmt BRANCH .)
    NUMBER_F        reduce using rule 4 (listStmt -> listStmt BRANCH .)
    NUMBER          reduce using rule 4 (listStmt -> listStmt BRANCH .)
    ABS             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    SQRT            reduce using rule 4 (listStmt -> listStmt BRANCH .)
    LOG10           reduce using rule 4 (listStmt -> listStmt BRANCH .)
    LOG             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    EXP             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    ATAN            reduce using rule 4 (listStmt -> listStmt BRANCH .)
    COS             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    SIN             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    DEG             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    PHI             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    GAMMA           reduce using rule 4 (listStmt -> listStmt BRANCH .)
    N_E             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    PI              reduce using rule 4 (listStmt -> listStmt BRANCH .)
    IF              reduce using rule 4 (listStmt -> listStmt BRANCH .)
    WHILE           reduce using rule 4 (listStmt -> listStmt BRANCH .)
    $end            reduce using rule 4 (listStmt -> listStmt BRANCH .)


state 4

    (2) listStmt -> listStmt statment . BRANCH
    BRANCH          shift and go to state 31


state 5

    (3) listStmt -> listStmt expr . BRANCH
    (11) statment -> expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
  ! shift/reduce conflict for BRANCH resolved as shift
    BRANCH          shift and go to state 32
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 6

    (6) assign -> NAME . = expr
    (26) expr -> NAME .
    =               shift and go to state 38
    BRANCH          reduce using rule 26 (expr -> NAME .)
    SM_EXP          reduce using rule 26 (expr -> NAME .)
    /               reduce using rule 26 (expr -> NAME .)
    *               reduce using rule 26 (expr -> NAME .)
    -               reduce using rule 26 (expr -> NAME .)
    +               reduce using rule 26 (expr -> NAME .)


state 7

    (7) statment -> { . statmentList }
    (16) statmentList -> . statmentList statment
    (17) statmentList -> . statmentList BRANCH
    (18) statmentList -> .
    }               reduce using rule 18 (statmentList -> .)
    BRANCH          reduce using rule 18 (statmentList -> .)
    {               reduce using rule 18 (statmentList -> .)
    PRINTEX         reduce using rule 18 (statmentList -> .)
    IF              reduce using rule 18 (statmentList -> .)
    WHILE           reduce using rule 18 (statmentList -> .)
    (               reduce using rule 18 (statmentList -> .)
    -               reduce using rule 18 (statmentList -> .)
    NAME            reduce using rule 18 (statmentList -> .)
    NUMBER_F        reduce using rule 18 (statmentList -> .)
    NUMBER          reduce using rule 18 (statmentList -> .)
    ABS             reduce using rule 18 (statmentList -> .)
    SQRT            reduce using rule 18 (statmentList -> .)
    LOG10           reduce using rule 18 (statmentList -> .)
    LOG             reduce using rule 18 (statmentList -> .)
    EXP             reduce using rule 18 (statmentList -> .)
    ATAN            reduce using rule 18 (statmentList -> .)
    COS             reduce using rule 18 (statmentList -> .)
    SIN             reduce using rule 18 (statmentList -> .)
    DEG             reduce using rule 18 (statmentList -> .)
    PHI             reduce using rule 18 (statmentList -> .)
    GAMMA           reduce using rule 18 (statmentList -> .)
    N_E             reduce using rule 18 (statmentList -> .)
    PI              reduce using rule 18 (statmentList -> .)

    statmentList                   shift and go to state 39

state 8

    (8) statment -> ifCode . conditionLogical statment end
    (48) conditionLogical -> . NOT condition
    (49) conditionLogical -> . condition OR condition
    (50) conditionLogical -> . condition AND condition
    (51) conditionLogical -> . ( condition )
    (42) condition -> . expr NE expr
    (43) condition -> . expr EQ expr
    (44) condition -> . expr LE expr
    (45) condition -> . expr LT expr
    (46) condition -> . expr GE expr
    (47) condition -> . expr GT expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    NOT             shift and go to state 41
    (               shift and go to state 43
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    conditionLogical               shift and go to state 40
    condition                      shift and go to state 42
    expr                           shift and go to state 44

state 9

    (9) statment -> whileCode . conditionLogical statment end
    (48) conditionLogical -> . NOT condition
    (49) conditionLogical -> . condition OR condition
    (50) conditionLogical -> . condition AND condition
    (51) conditionLogical -> . ( condition )
    (42) condition -> . expr NE expr
    (43) condition -> . expr EQ expr
    (44) condition -> . expr LE expr
    (45) condition -> . expr LT expr
    (46) condition -> . expr GE expr
    (47) condition -> . expr GT expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    NOT             shift and go to state 41
    (               shift and go to state 43
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    conditionLogical               shift and go to state 46
    condition                      shift and go to state 42
    expr                           shift and go to state 44

state 10

    (10) statment -> PRINTEX . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 47

state 11

    (19) expr -> ( . expr )
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 48

state 12

    (25) expr -> - . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 49

state 13

    (27) expr -> NUMBER_F .
    BRANCH          reduce using rule 27 (expr -> NUMBER_F .)
    SM_EXP          reduce using rule 27 (expr -> NUMBER_F .)
    /               reduce using rule 27 (expr -> NUMBER_F .)
    *               reduce using rule 27 (expr -> NUMBER_F .)
    -               reduce using rule 27 (expr -> NUMBER_F .)
    +               reduce using rule 27 (expr -> NUMBER_F .)
    NE              reduce using rule 27 (expr -> NUMBER_F .)
    EQ              reduce using rule 27 (expr -> NUMBER_F .)
    LE              reduce using rule 27 (expr -> NUMBER_F .)
    LT              reduce using rule 27 (expr -> NUMBER_F .)
    GE              reduce using rule 27 (expr -> NUMBER_F .)
    GT              reduce using rule 27 (expr -> NUMBER_F .)
    }               reduce using rule 27 (expr -> NUMBER_F .)
    {               reduce using rule 27 (expr -> NUMBER_F .)
    PRINTEX         reduce using rule 27 (expr -> NUMBER_F .)
    IF              reduce using rule 27 (expr -> NUMBER_F .)
    WHILE           reduce using rule 27 (expr -> NUMBER_F .)
    (               reduce using rule 27 (expr -> NUMBER_F .)
    NAME            reduce using rule 27 (expr -> NUMBER_F .)
    NUMBER_F        reduce using rule 27 (expr -> NUMBER_F .)
    NUMBER          reduce using rule 27 (expr -> NUMBER_F .)
    ABS             reduce using rule 27 (expr -> NUMBER_F .)
    SQRT            reduce using rule 27 (expr -> NUMBER_F .)
    LOG10           reduce using rule 27 (expr -> NUMBER_F .)
    LOG             reduce using rule 27 (expr -> NUMBER_F .)
    EXP             reduce using rule 27 (expr -> NUMBER_F .)
    ATAN            reduce using rule 27 (expr -> NUMBER_F .)
    COS             reduce using rule 27 (expr -> NUMBER_F .)
    SIN             reduce using rule 27 (expr -> NUMBER_F .)
    DEG             reduce using rule 27 (expr -> NUMBER_F .)
    PHI             reduce using rule 27 (expr -> NUMBER_F .)
    GAMMA           reduce using rule 27 (expr -> NUMBER_F .)
    N_E             reduce using rule 27 (expr -> NUMBER_F .)
    PI              reduce using rule 27 (expr -> NUMBER_F .)
    ENDWHILE        reduce using rule 27 (expr -> NUMBER_F .)
    ENDIF           reduce using rule 27 (expr -> NUMBER_F .)
    )               reduce using rule 27 (expr -> NUMBER_F .)
    OR              reduce using rule 27 (expr -> NUMBER_F .)
    AND             reduce using rule 27 (expr -> NUMBER_F .)


state 14

    (28) expr -> NUMBER .
    BRANCH          reduce using rule 28 (expr -> NUMBER .)
    SM_EXP          reduce using rule 28 (expr -> NUMBER .)
    /               reduce using rule 28 (expr -> NUMBER .)
    *               reduce using rule 28 (expr -> NUMBER .)
    -               reduce using rule 28 (expr -> NUMBER .)
    +               reduce using rule 28 (expr -> NUMBER .)
    NE              reduce using rule 28 (expr -> NUMBER .)
    EQ              reduce using rule 28 (expr -> NUMBER .)
    LE              reduce using rule 28 (expr -> NUMBER .)
    LT              reduce using rule 28 (expr -> NUMBER .)
    GE              reduce using rule 28 (expr -> NUMBER .)
    GT              reduce using rule 28 (expr -> NUMBER .)
    }               reduce using rule 28 (expr -> NUMBER .)
    {               reduce using rule 28 (expr -> NUMBER .)
    PRINTEX         reduce using rule 28 (expr -> NUMBER .)
    IF              reduce using rule 28 (expr -> NUMBER .)
    WHILE           reduce using rule 28 (expr -> NUMBER .)
    (               reduce using rule 28 (expr -> NUMBER .)
    NAME            reduce using rule 28 (expr -> NUMBER .)
    NUMBER_F        reduce using rule 28 (expr -> NUMBER .)
    NUMBER          reduce using rule 28 (expr -> NUMBER .)
    ABS             reduce using rule 28 (expr -> NUMBER .)
    SQRT            reduce using rule 28 (expr -> NUMBER .)
    LOG10           reduce using rule 28 (expr -> NUMBER .)
    LOG             reduce using rule 28 (expr -> NUMBER .)
    EXP             reduce using rule 28 (expr -> NUMBER .)
    ATAN            reduce using rule 28 (expr -> NUMBER .)
    COS             reduce using rule 28 (expr -> NUMBER .)
    SIN             reduce using rule 28 (expr -> NUMBER .)
    DEG             reduce using rule 28 (expr -> NUMBER .)
    PHI             reduce using rule 28 (expr -> NUMBER .)
    GAMMA           reduce using rule 28 (expr -> NUMBER .)
    N_E             reduce using rule 28 (expr -> NUMBER .)
    PI              reduce using rule 28 (expr -> NUMBER .)
    ENDWHILE        reduce using rule 28 (expr -> NUMBER .)
    ENDIF           reduce using rule 28 (expr -> NUMBER .)
    )               reduce using rule 28 (expr -> NUMBER .)
    OR              reduce using rule 28 (expr -> NUMBER .)
    AND             reduce using rule 28 (expr -> NUMBER .)


state 15

    (29) expr -> ABS . ( expr )
    (               shift and go to state 50


state 16

    (30) expr -> SQRT . ( expr )
    (               shift and go to state 51


state 17

    (31) expr -> LOG10 . ( expr )
    (               shift and go to state 52


state 18

    (32) expr -> LOG . ( expr )
    (               shift and go to state 53


state 19

    (33) expr -> EXP . ( expr )
    (               shift and go to state 54


state 20

    (34) expr -> ATAN . ( expr )
    (               shift and go to state 55


state 21

    (35) expr -> COS . ( expr )
    (               shift and go to state 56


state 22

    (36) expr -> SIN . ( expr )
    (               shift and go to state 57


state 23

    (37) expr -> DEG .
    BRANCH          reduce using rule 37 (expr -> DEG .)
    SM_EXP          reduce using rule 37 (expr -> DEG .)
    /               reduce using rule 37 (expr -> DEG .)
    *               reduce using rule 37 (expr -> DEG .)
    -               reduce using rule 37 (expr -> DEG .)
    +               reduce using rule 37 (expr -> DEG .)
    NE              reduce using rule 37 (expr -> DEG .)
    EQ              reduce using rule 37 (expr -> DEG .)
    LE              reduce using rule 37 (expr -> DEG .)
    LT              reduce using rule 37 (expr -> DEG .)
    GE              reduce using rule 37 (expr -> DEG .)
    GT              reduce using rule 37 (expr -> DEG .)
    }               reduce using rule 37 (expr -> DEG .)
    {               reduce using rule 37 (expr -> DEG .)
    PRINTEX         reduce using rule 37 (expr -> DEG .)
    IF              reduce using rule 37 (expr -> DEG .)
    WHILE           reduce using rule 37 (expr -> DEG .)
    (               reduce using rule 37 (expr -> DEG .)
    NAME            reduce using rule 37 (expr -> DEG .)
    NUMBER_F        reduce using rule 37 (expr -> DEG .)
    NUMBER          reduce using rule 37 (expr -> DEG .)
    ABS             reduce using rule 37 (expr -> DEG .)
    SQRT            reduce using rule 37 (expr -> DEG .)
    LOG10           reduce using rule 37 (expr -> DEG .)
    LOG             reduce using rule 37 (expr -> DEG .)
    EXP             reduce using rule 37 (expr -> DEG .)
    ATAN            reduce using rule 37 (expr -> DEG .)
    COS             reduce using rule 37 (expr -> DEG .)
    SIN             reduce using rule 37 (expr -> DEG .)
    DEG             reduce using rule 37 (expr -> DEG .)
    PHI             reduce using rule 37 (expr -> DEG .)
    GAMMA           reduce using rule 37 (expr -> DEG .)
    N_E             reduce using rule 37 (expr -> DEG .)
    PI              reduce using rule 37 (expr -> DEG .)
    ENDWHILE        reduce using rule 37 (expr -> DEG .)
    ENDIF           reduce using rule 37 (expr -> DEG .)
    )               reduce using rule 37 (expr -> DEG .)
    OR              reduce using rule 37 (expr -> DEG .)
    AND             reduce using rule 37 (expr -> DEG .)


state 24

    (38) expr -> PHI .
    BRANCH          reduce using rule 38 (expr -> PHI .)
    SM_EXP          reduce using rule 38 (expr -> PHI .)
    /               reduce using rule 38 (expr -> PHI .)
    *               reduce using rule 38 (expr -> PHI .)
    -               reduce using rule 38 (expr -> PHI .)
    +               reduce using rule 38 (expr -> PHI .)
    NE              reduce using rule 38 (expr -> PHI .)
    EQ              reduce using rule 38 (expr -> PHI .)
    LE              reduce using rule 38 (expr -> PHI .)
    LT              reduce using rule 38 (expr -> PHI .)
    GE              reduce using rule 38 (expr -> PHI .)
    GT              reduce using rule 38 (expr -> PHI .)
    }               reduce using rule 38 (expr -> PHI .)
    {               reduce using rule 38 (expr -> PHI .)
    PRINTEX         reduce using rule 38 (expr -> PHI .)
    IF              reduce using rule 38 (expr -> PHI .)
    WHILE           reduce using rule 38 (expr -> PHI .)
    (               reduce using rule 38 (expr -> PHI .)
    NAME            reduce using rule 38 (expr -> PHI .)
    NUMBER_F        reduce using rule 38 (expr -> PHI .)
    NUMBER          reduce using rule 38 (expr -> PHI .)
    ABS             reduce using rule 38 (expr -> PHI .)
    SQRT            reduce using rule 38 (expr -> PHI .)
    LOG10           reduce using rule 38 (expr -> PHI .)
    LOG             reduce using rule 38 (expr -> PHI .)
    EXP             reduce using rule 38 (expr -> PHI .)
    ATAN            reduce using rule 38 (expr -> PHI .)
    COS             reduce using rule 38 (expr -> PHI .)
    SIN             reduce using rule 38 (expr -> PHI .)
    DEG             reduce using rule 38 (expr -> PHI .)
    PHI             reduce using rule 38 (expr -> PHI .)
    GAMMA           reduce using rule 38 (expr -> PHI .)
    N_E             reduce using rule 38 (expr -> PHI .)
    PI              reduce using rule 38 (expr -> PHI .)
    ENDWHILE        reduce using rule 38 (expr -> PHI .)
    ENDIF           reduce using rule 38 (expr -> PHI .)
    )               reduce using rule 38 (expr -> PHI .)
    OR              reduce using rule 38 (expr -> PHI .)
    AND             reduce using rule 38 (expr -> PHI .)


state 25

    (39) expr -> GAMMA .
    BRANCH          reduce using rule 39 (expr -> GAMMA .)
    SM_EXP          reduce using rule 39 (expr -> GAMMA .)
    /               reduce using rule 39 (expr -> GAMMA .)
    *               reduce using rule 39 (expr -> GAMMA .)
    -               reduce using rule 39 (expr -> GAMMA .)
    +               reduce using rule 39 (expr -> GAMMA .)
    NE              reduce using rule 39 (expr -> GAMMA .)
    EQ              reduce using rule 39 (expr -> GAMMA .)
    LE              reduce using rule 39 (expr -> GAMMA .)
    LT              reduce using rule 39 (expr -> GAMMA .)
    GE              reduce using rule 39 (expr -> GAMMA .)
    GT              reduce using rule 39 (expr -> GAMMA .)
    }               reduce using rule 39 (expr -> GAMMA .)
    {               reduce using rule 39 (expr -> GAMMA .)
    PRINTEX         reduce using rule 39 (expr -> GAMMA .)
    IF              reduce using rule 39 (expr -> GAMMA .)
    WHILE           reduce using rule 39 (expr -> GAMMA .)
    (               reduce using rule 39 (expr -> GAMMA .)
    NAME            reduce using rule 39 (expr -> GAMMA .)
    NUMBER_F        reduce using rule 39 (expr -> GAMMA .)
    NUMBER          reduce using rule 39 (expr -> GAMMA .)
    ABS             reduce using rule 39 (expr -> GAMMA .)
    SQRT            reduce using rule 39 (expr -> GAMMA .)
    LOG10           reduce using rule 39 (expr -> GAMMA .)
    LOG             reduce using rule 39 (expr -> GAMMA .)
    EXP             reduce using rule 39 (expr -> GAMMA .)
    ATAN            reduce using rule 39 (expr -> GAMMA .)
    COS             reduce using rule 39 (expr -> GAMMA .)
    SIN             reduce using rule 39 (expr -> GAMMA .)
    DEG             reduce using rule 39 (expr -> GAMMA .)
    PHI             reduce using rule 39 (expr -> GAMMA .)
    GAMMA           reduce using rule 39 (expr -> GAMMA .)
    N_E             reduce using rule 39 (expr -> GAMMA .)
    PI              reduce using rule 39 (expr -> GAMMA .)
    ENDWHILE        reduce using rule 39 (expr -> GAMMA .)
    ENDIF           reduce using rule 39 (expr -> GAMMA .)
    )               reduce using rule 39 (expr -> GAMMA .)
    OR              reduce using rule 39 (expr -> GAMMA .)
    AND             reduce using rule 39 (expr -> GAMMA .)


state 26

    (40) expr -> N_E .
    BRANCH          reduce using rule 40 (expr -> N_E .)
    SM_EXP          reduce using rule 40 (expr -> N_E .)
    /               reduce using rule 40 (expr -> N_E .)
    *               reduce using rule 40 (expr -> N_E .)
    -               reduce using rule 40 (expr -> N_E .)
    +               reduce using rule 40 (expr -> N_E .)
    NE              reduce using rule 40 (expr -> N_E .)
    EQ              reduce using rule 40 (expr -> N_E .)
    LE              reduce using rule 40 (expr -> N_E .)
    LT              reduce using rule 40 (expr -> N_E .)
    GE              reduce using rule 40 (expr -> N_E .)
    GT              reduce using rule 40 (expr -> N_E .)
    }               reduce using rule 40 (expr -> N_E .)
    {               reduce using rule 40 (expr -> N_E .)
    PRINTEX         reduce using rule 40 (expr -> N_E .)
    IF              reduce using rule 40 (expr -> N_E .)
    WHILE           reduce using rule 40 (expr -> N_E .)
    (               reduce using rule 40 (expr -> N_E .)
    NAME            reduce using rule 40 (expr -> N_E .)
    NUMBER_F        reduce using rule 40 (expr -> N_E .)
    NUMBER          reduce using rule 40 (expr -> N_E .)
    ABS             reduce using rule 40 (expr -> N_E .)
    SQRT            reduce using rule 40 (expr -> N_E .)
    LOG10           reduce using rule 40 (expr -> N_E .)
    LOG             reduce using rule 40 (expr -> N_E .)
    EXP             reduce using rule 40 (expr -> N_E .)
    ATAN            reduce using rule 40 (expr -> N_E .)
    COS             reduce using rule 40 (expr -> N_E .)
    SIN             reduce using rule 40 (expr -> N_E .)
    DEG             reduce using rule 40 (expr -> N_E .)
    PHI             reduce using rule 40 (expr -> N_E .)
    GAMMA           reduce using rule 40 (expr -> N_E .)
    N_E             reduce using rule 40 (expr -> N_E .)
    PI              reduce using rule 40 (expr -> N_E .)
    ENDWHILE        reduce using rule 40 (expr -> N_E .)
    ENDIF           reduce using rule 40 (expr -> N_E .)
    )               reduce using rule 40 (expr -> N_E .)
    OR              reduce using rule 40 (expr -> N_E .)
    AND             reduce using rule 40 (expr -> N_E .)


state 27

    (41) expr -> PI .
    BRANCH          reduce using rule 41 (expr -> PI .)
    SM_EXP          reduce using rule 41 (expr -> PI .)
    /               reduce using rule 41 (expr -> PI .)
    *               reduce using rule 41 (expr -> PI .)
    -               reduce using rule 41 (expr -> PI .)
    +               reduce using rule 41 (expr -> PI .)
    NE              reduce using rule 41 (expr -> PI .)
    EQ              reduce using rule 41 (expr -> PI .)
    LE              reduce using rule 41 (expr -> PI .)
    LT              reduce using rule 41 (expr -> PI .)
    GE              reduce using rule 41 (expr -> PI .)
    GT              reduce using rule 41 (expr -> PI .)
    }               reduce using rule 41 (expr -> PI .)
    {               reduce using rule 41 (expr -> PI .)
    PRINTEX         reduce using rule 41 (expr -> PI .)
    IF              reduce using rule 41 (expr -> PI .)
    WHILE           reduce using rule 41 (expr -> PI .)
    (               reduce using rule 41 (expr -> PI .)
    NAME            reduce using rule 41 (expr -> PI .)
    NUMBER_F        reduce using rule 41 (expr -> PI .)
    NUMBER          reduce using rule 41 (expr -> PI .)
    ABS             reduce using rule 41 (expr -> PI .)
    SQRT            reduce using rule 41 (expr -> PI .)
    LOG10           reduce using rule 41 (expr -> PI .)
    LOG             reduce using rule 41 (expr -> PI .)
    EXP             reduce using rule 41 (expr -> PI .)
    ATAN            reduce using rule 41 (expr -> PI .)
    COS             reduce using rule 41 (expr -> PI .)
    SIN             reduce using rule 41 (expr -> PI .)
    DEG             reduce using rule 41 (expr -> PI .)
    PHI             reduce using rule 41 (expr -> PI .)
    GAMMA           reduce using rule 41 (expr -> PI .)
    N_E             reduce using rule 41 (expr -> PI .)
    PI              reduce using rule 41 (expr -> PI .)
    ENDWHILE        reduce using rule 41 (expr -> PI .)
    ENDIF           reduce using rule 41 (expr -> PI .)
    )               reduce using rule 41 (expr -> PI .)
    OR              reduce using rule 41 (expr -> PI .)
    AND             reduce using rule 41 (expr -> PI .)


state 28

    (13) ifCode -> IF .
    NOT             reduce using rule 13 (ifCode -> IF .)
    (               reduce using rule 13 (ifCode -> IF .)
    -               reduce using rule 13 (ifCode -> IF .)
    NAME            reduce using rule 13 (ifCode -> IF .)
    NUMBER_F        reduce using rule 13 (ifCode -> IF .)
    NUMBER          reduce using rule 13 (ifCode -> IF .)
    ABS             reduce using rule 13 (ifCode -> IF .)
    SQRT            reduce using rule 13 (ifCode -> IF .)
    LOG10           reduce using rule 13 (ifCode -> IF .)
    LOG             reduce using rule 13 (ifCode -> IF .)
    EXP             reduce using rule 13 (ifCode -> IF .)
    ATAN            reduce using rule 13 (ifCode -> IF .)
    COS             reduce using rule 13 (ifCode -> IF .)
    SIN             reduce using rule 13 (ifCode -> IF .)
    DEG             reduce using rule 13 (ifCode -> IF .)
    PHI             reduce using rule 13 (ifCode -> IF .)
    GAMMA           reduce using rule 13 (ifCode -> IF .)
    N_E             reduce using rule 13 (ifCode -> IF .)
    PI              reduce using rule 13 (ifCode -> IF .)


state 29

    (12) whileCode -> WHILE .
    NOT             reduce using rule 12 (whileCode -> WHILE .)
    (               reduce using rule 12 (whileCode -> WHILE .)
    -               reduce using rule 12 (whileCode -> WHILE .)
    NAME            reduce using rule 12 (whileCode -> WHILE .)
    NUMBER_F        reduce using rule 12 (whileCode -> WHILE .)
    NUMBER          reduce using rule 12 (whileCode -> WHILE .)
    ABS             reduce using rule 12 (whileCode -> WHILE .)
    SQRT            reduce using rule 12 (whileCode -> WHILE .)
    LOG10           reduce using rule 12 (whileCode -> WHILE .)
    LOG             reduce using rule 12 (whileCode -> WHILE .)
    EXP             reduce using rule 12 (whileCode -> WHILE .)
    ATAN            reduce using rule 12 (whileCode -> WHILE .)
    COS             reduce using rule 12 (whileCode -> WHILE .)
    SIN             reduce using rule 12 (whileCode -> WHILE .)
    DEG             reduce using rule 12 (whileCode -> WHILE .)
    PHI             reduce using rule 12 (whileCode -> WHILE .)
    GAMMA           reduce using rule 12 (whileCode -> WHILE .)
    N_E             reduce using rule 12 (whileCode -> WHILE .)
    PI              reduce using rule 12 (whileCode -> WHILE .)


state 30

    (1) listStmt -> listStmt assign BRANCH .
    BRANCH          reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    NAME            reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    {               reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    PRINTEX         reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    (               reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    -               reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    NUMBER_F        reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    NUMBER          reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    ABS             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    SQRT            reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    LOG10           reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    LOG             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    EXP             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    ATAN            reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    COS             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    SIN             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    DEG             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    PHI             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    GAMMA           reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    N_E             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    PI              reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    IF              reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    WHILE           reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    $end            reduce using rule 1 (listStmt -> listStmt assign BRANCH .)


state 31

    (2) listStmt -> listStmt statment BRANCH .
    BRANCH          reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    NAME            reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    {               reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    PRINTEX         reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    (               reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    -               reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    NUMBER_F        reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    NUMBER          reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    ABS             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    SQRT            reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    LOG10           reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    LOG             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    EXP             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    ATAN            reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    COS             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    SIN             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    DEG             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    PHI             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    GAMMA           reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    N_E             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    PI              reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    IF              reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    WHILE           reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    $end            reduce using rule 2 (listStmt -> listStmt statment BRANCH .)


state 32

    (3) listStmt -> listStmt expr BRANCH .
    BRANCH          reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    NAME            reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    {               reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    PRINTEX         reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    (               reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    -               reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    NUMBER_F        reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    NUMBER          reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    ABS             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    SQRT            reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    LOG10           reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    LOG             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    EXP             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    ATAN            reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    COS             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    SIN             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    DEG             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    PHI             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    GAMMA           reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    N_E             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    PI              reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    IF              reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    WHILE           reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    $end            reduce using rule 3 (listStmt -> listStmt expr BRANCH .)


state 33

    (20) expr -> expr SM_EXP . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 58

state 34

    (21) expr -> expr / . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 59

state 35

    (22) expr -> expr * . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 60

state 36

    (23) expr -> expr - . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 61

state 37

    (24) expr -> expr + . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 62

state 38

    (6) assign -> NAME = . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 63

state 39

    (7) statment -> { statmentList . }
    (16) statmentList -> statmentList . statment
    (17) statmentList -> statmentList . BRANCH
    (7) statment -> . { statmentList }
    (8) statment -> . ifCode conditionLogical statment end
    (9) statment -> . whileCode conditionLogical statment end
    (10) statment -> . PRINTEX expr
    (11) statment -> . expr
    (13) ifCode -> . IF
    (12) whileCode -> . WHILE
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    }               shift and go to state 64
    BRANCH          shift and go to state 66
    {               shift and go to state 7
    PRINTEX         shift and go to state 10
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    statment                       shift and go to state 65
    ifCode                         shift and go to state 8
    whileCode                      shift and go to state 9
    expr                           shift and go to state 67

state 40

    (8) statment -> ifCode conditionLogical . statment end
    (7) statment -> . { statmentList }
    (8) statment -> . ifCode conditionLogical statment end
    (9) statment -> . whileCode conditionLogical statment end
    (10) statment -> . PRINTEX expr
    (11) statment -> . expr
    (13) ifCode -> . IF
    (12) whileCode -> . WHILE
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    {               shift and go to state 7
    PRINTEX         shift and go to state 10
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    ifCode                         shift and go to state 8
    statment                       shift and go to state 68
    whileCode                      shift and go to state 9
    expr                           shift and go to state 67

state 41

    (48) conditionLogical -> NOT . condition
    (42) condition -> . expr NE expr
    (43) condition -> . expr EQ expr
    (44) condition -> . expr LE expr
    (45) condition -> . expr LT expr
    (46) condition -> . expr GE expr
    (47) condition -> . expr GT expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    condition                      shift and go to state 69
    expr                           shift and go to state 44

state 42

    (49) conditionLogical -> condition . OR condition
    (50) conditionLogical -> condition . AND condition
    OR              shift and go to state 70
    AND             shift and go to state 71


state 43

    (51) conditionLogical -> ( . condition )
    (19) expr -> ( . expr )
    (42) condition -> . expr NE expr
    (43) condition -> . expr EQ expr
    (44) condition -> . expr LE expr
    (45) condition -> . expr LT expr
    (46) condition -> . expr GE expr
    (47) condition -> . expr GT expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    condition                      shift and go to state 72
    expr                           shift and go to state 73

state 44

    (42) condition -> expr . NE expr
    (43) condition -> expr . EQ expr
    (44) condition -> expr . LE expr
    (45) condition -> expr . LT expr
    (46) condition -> expr . GE expr
    (47) condition -> expr . GT expr
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    NE              shift and go to state 74
    EQ              shift and go to state 75
    LE              shift and go to state 76
    LT              shift and go to state 77
    GE              shift and go to state 78
    GT              shift and go to state 79
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 45

    (26) expr -> NAME .
    NE              reduce using rule 26 (expr -> NAME .)
    EQ              reduce using rule 26 (expr -> NAME .)
    LE              reduce using rule 26 (expr -> NAME .)
    LT              reduce using rule 26 (expr -> NAME .)
    GE              reduce using rule 26 (expr -> NAME .)
    GT              reduce using rule 26 (expr -> NAME .)
    SM_EXP          reduce using rule 26 (expr -> NAME .)
    /               reduce using rule 26 (expr -> NAME .)
    *               reduce using rule 26 (expr -> NAME .)
    -               reduce using rule 26 (expr -> NAME .)
    +               reduce using rule 26 (expr -> NAME .)
    BRANCH          reduce using rule 26 (expr -> NAME .)
    }               reduce using rule 26 (expr -> NAME .)
    {               reduce using rule 26 (expr -> NAME .)
    PRINTEX         reduce using rule 26 (expr -> NAME .)
    IF              reduce using rule 26 (expr -> NAME .)
    WHILE           reduce using rule 26 (expr -> NAME .)
    (               reduce using rule 26 (expr -> NAME .)
    NAME            reduce using rule 26 (expr -> NAME .)
    NUMBER_F        reduce using rule 26 (expr -> NAME .)
    NUMBER          reduce using rule 26 (expr -> NAME .)
    ABS             reduce using rule 26 (expr -> NAME .)
    SQRT            reduce using rule 26 (expr -> NAME .)
    LOG10           reduce using rule 26 (expr -> NAME .)
    LOG             reduce using rule 26 (expr -> NAME .)
    EXP             reduce using rule 26 (expr -> NAME .)
    ATAN            reduce using rule 26 (expr -> NAME .)
    COS             reduce using rule 26 (expr -> NAME .)
    SIN             reduce using rule 26 (expr -> NAME .)
    DEG             reduce using rule 26 (expr -> NAME .)
    PHI             reduce using rule 26 (expr -> NAME .)
    GAMMA           reduce using rule 26 (expr -> NAME .)
    N_E             reduce using rule 26 (expr -> NAME .)
    PI              reduce using rule 26 (expr -> NAME .)
    ENDWHILE        reduce using rule 26 (expr -> NAME .)
    ENDIF           reduce using rule 26 (expr -> NAME .)
    )               reduce using rule 26 (expr -> NAME .)
    OR              reduce using rule 26 (expr -> NAME .)
    AND             reduce using rule 26 (expr -> NAME .)


state 46

    (9) statment -> whileCode conditionLogical . statment end
    (7) statment -> . { statmentList }
    (8) statment -> . ifCode conditionLogical statment end
    (9) statment -> . whileCode conditionLogical statment end
    (10) statment -> . PRINTEX expr
    (11) statment -> . expr
    (13) ifCode -> . IF
    (12) whileCode -> . WHILE
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    {               shift and go to state 7
    PRINTEX         shift and go to state 10
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    whileCode                      shift and go to state 9
    statment                       shift and go to state 80
    ifCode                         shift and go to state 8
    expr                           shift and go to state 67

state 47

    (10) statment -> PRINTEX expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    BRANCH          reduce using rule 10 (statment -> PRINTEX expr .)
    }               reduce using rule 10 (statment -> PRINTEX expr .)
    {               reduce using rule 10 (statment -> PRINTEX expr .)
    PRINTEX         reduce using rule 10 (statment -> PRINTEX expr .)
    IF              reduce using rule 10 (statment -> PRINTEX expr .)
    WHILE           reduce using rule 10 (statment -> PRINTEX expr .)
    (               reduce using rule 10 (statment -> PRINTEX expr .)
    NAME            reduce using rule 10 (statment -> PRINTEX expr .)
    NUMBER_F        reduce using rule 10 (statment -> PRINTEX expr .)
    NUMBER          reduce using rule 10 (statment -> PRINTEX expr .)
    ABS             reduce using rule 10 (statment -> PRINTEX expr .)
    SQRT            reduce using rule 10 (statment -> PRINTEX expr .)
    LOG10           reduce using rule 10 (statment -> PRINTEX expr .)
    LOG             reduce using rule 10 (statment -> PRINTEX expr .)
    EXP             reduce using rule 10 (statment -> PRINTEX expr .)
    ATAN            reduce using rule 10 (statment -> PRINTEX expr .)
    COS             reduce using rule 10 (statment -> PRINTEX expr .)
    SIN             reduce using rule 10 (statment -> PRINTEX expr .)
    DEG             reduce using rule 10 (statment -> PRINTEX expr .)
    PHI             reduce using rule 10 (statment -> PRINTEX expr .)
    GAMMA           reduce using rule 10 (statment -> PRINTEX expr .)
    N_E             reduce using rule 10 (statment -> PRINTEX expr .)
    PI              reduce using rule 10 (statment -> PRINTEX expr .)
    ENDWHILE        reduce using rule 10 (statment -> PRINTEX expr .)
    ENDIF           reduce using rule 10 (statment -> PRINTEX expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 48

    (19) expr -> ( expr . )
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    )               shift and go to state 81
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 49

    (25) expr -> - expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    BRANCH          reduce using rule 25 (expr -> - expr .)
    /               reduce using rule 25 (expr -> - expr .)
    *               reduce using rule 25 (expr -> - expr .)
    -               reduce using rule 25 (expr -> - expr .)
    +               reduce using rule 25 (expr -> - expr .)
    NE              reduce using rule 25 (expr -> - expr .)
    EQ              reduce using rule 25 (expr -> - expr .)
    LE              reduce using rule 25 (expr -> - expr .)
    LT              reduce using rule 25 (expr -> - expr .)
    GE              reduce using rule 25 (expr -> - expr .)
    GT              reduce using rule 25 (expr -> - expr .)
    }               reduce using rule 25 (expr -> - expr .)
    {               reduce using rule 25 (expr -> - expr .)
    PRINTEX         reduce using rule 25 (expr -> - expr .)
    IF              reduce using rule 25 (expr -> - expr .)
    WHILE           reduce using rule 25 (expr -> - expr .)
    (               reduce using rule 25 (expr -> - expr .)
    NAME            reduce using rule 25 (expr -> - expr .)
    NUMBER_F        reduce using rule 25 (expr -> - expr .)
    NUMBER          reduce using rule 25 (expr -> - expr .)
    ABS             reduce using rule 25 (expr -> - expr .)
    SQRT            reduce using rule 25 (expr -> - expr .)
    LOG10           reduce using rule 25 (expr -> - expr .)
    LOG             reduce using rule 25 (expr -> - expr .)
    EXP             reduce using rule 25 (expr -> - expr .)
    ATAN            reduce using rule 25 (expr -> - expr .)
    COS             reduce using rule 25 (expr -> - expr .)
    SIN             reduce using rule 25 (expr -> - expr .)
    DEG             reduce using rule 25 (expr -> - expr .)
    PHI             reduce using rule 25 (expr -> - expr .)
    GAMMA           reduce using rule 25 (expr -> - expr .)
    N_E             reduce using rule 25 (expr -> - expr .)
    PI              reduce using rule 25 (expr -> - expr .)
    ENDWHILE        reduce using rule 25 (expr -> - expr .)
    ENDIF           reduce using rule 25 (expr -> - expr .)
    )               reduce using rule 25 (expr -> - expr .)
    OR              reduce using rule 25 (expr -> - expr .)
    AND             reduce using rule 25 (expr -> - expr .)
    SM_EXP          shift and go to state 33


state 50

    (29) expr -> ABS ( . expr )
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 82

state 51

    (30) expr -> SQRT ( . expr )
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 83

state 52

    (31) expr -> LOG10 ( . expr )
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 84

state 53

    (32) expr -> LOG ( . expr )
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 85

state 54

    (33) expr -> EXP ( . expr )
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 86

state 55

    (34) expr -> ATAN ( . expr )
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 87

state 56

    (35) expr -> COS ( . expr )
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 88

state 57

    (36) expr -> SIN ( . expr )
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 89

state 58

    (20) expr -> expr SM_EXP expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    BRANCH          reduce using rule 20 (expr -> expr SM_EXP expr .)
    /               reduce using rule 20 (expr -> expr SM_EXP expr .)
    *               reduce using rule 20 (expr -> expr SM_EXP expr .)
    -               reduce using rule 20 (expr -> expr SM_EXP expr .)
    +               reduce using rule 20 (expr -> expr SM_EXP expr .)
    NE              reduce using rule 20 (expr -> expr SM_EXP expr .)
    EQ              reduce using rule 20 (expr -> expr SM_EXP expr .)
    LE              reduce using rule 20 (expr -> expr SM_EXP expr .)
    LT              reduce using rule 20 (expr -> expr SM_EXP expr .)
    GE              reduce using rule 20 (expr -> expr SM_EXP expr .)
    GT              reduce using rule 20 (expr -> expr SM_EXP expr .)
    }               reduce using rule 20 (expr -> expr SM_EXP expr .)
    {               reduce using rule 20 (expr -> expr SM_EXP expr .)
    PRINTEX         reduce using rule 20 (expr -> expr SM_EXP expr .)
    IF              reduce using rule 20 (expr -> expr SM_EXP expr .)
    WHILE           reduce using rule 20 (expr -> expr SM_EXP expr .)
    (               reduce using rule 20 (expr -> expr SM_EXP expr .)
    NAME            reduce using rule 20 (expr -> expr SM_EXP expr .)
    NUMBER_F        reduce using rule 20 (expr -> expr SM_EXP expr .)
    NUMBER          reduce using rule 20 (expr -> expr SM_EXP expr .)
    ABS             reduce using rule 20 (expr -> expr SM_EXP expr .)
    SQRT            reduce using rule 20 (expr -> expr SM_EXP expr .)
    LOG10           reduce using rule 20 (expr -> expr SM_EXP expr .)
    LOG             reduce using rule 20 (expr -> expr SM_EXP expr .)
    EXP             reduce using rule 20 (expr -> expr SM_EXP expr .)
    ATAN            reduce using rule 20 (expr -> expr SM_EXP expr .)
    COS             reduce using rule 20 (expr -> expr SM_EXP expr .)
    SIN             reduce using rule 20 (expr -> expr SM_EXP expr .)
    DEG             reduce using rule 20 (expr -> expr SM_EXP expr .)
    PHI             reduce using rule 20 (expr -> expr SM_EXP expr .)
    GAMMA           reduce using rule 20 (expr -> expr SM_EXP expr .)
    N_E             reduce using rule 20 (expr -> expr SM_EXP expr .)
    PI              reduce using rule 20 (expr -> expr SM_EXP expr .)
    ENDWHILE        reduce using rule 20 (expr -> expr SM_EXP expr .)
    ENDIF           reduce using rule 20 (expr -> expr SM_EXP expr .)
    )               reduce using rule 20 (expr -> expr SM_EXP expr .)
    OR              reduce using rule 20 (expr -> expr SM_EXP expr .)
    AND             reduce using rule 20 (expr -> expr SM_EXP expr .)
    SM_EXP          shift and go to state 33


state 59

    (21) expr -> expr / expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    BRANCH          reduce using rule 21 (expr -> expr / expr .)
    /               reduce using rule 21 (expr -> expr / expr .)
    *               reduce using rule 21 (expr -> expr / expr .)
    -               reduce using rule 21 (expr -> expr / expr .)
    +               reduce using rule 21 (expr -> expr / expr .)
    NE              reduce using rule 21 (expr -> expr / expr .)
    EQ              reduce using rule 21 (expr -> expr / expr .)
    LE              reduce using rule 21 (expr -> expr / expr .)
    LT              reduce using rule 21 (expr -> expr / expr .)
    GE              reduce using rule 21 (expr -> expr / expr .)
    GT              reduce using rule 21 (expr -> expr / expr .)
    }               reduce using rule 21 (expr -> expr / expr .)
    {               reduce using rule 21 (expr -> expr / expr .)
    PRINTEX         reduce using rule 21 (expr -> expr / expr .)
    IF              reduce using rule 21 (expr -> expr / expr .)
    WHILE           reduce using rule 21 (expr -> expr / expr .)
    (               reduce using rule 21 (expr -> expr / expr .)
    NAME            reduce using rule 21 (expr -> expr / expr .)
    NUMBER_F        reduce using rule 21 (expr -> expr / expr .)
    NUMBER          reduce using rule 21 (expr -> expr / expr .)
    ABS             reduce using rule 21 (expr -> expr / expr .)
    SQRT            reduce using rule 21 (expr -> expr / expr .)
    LOG10           reduce using rule 21 (expr -> expr / expr .)
    LOG             reduce using rule 21 (expr -> expr / expr .)
    EXP             reduce using rule 21 (expr -> expr / expr .)
    ATAN            reduce using rule 21 (expr -> expr / expr .)
    COS             reduce using rule 21 (expr -> expr / expr .)
    SIN             reduce using rule 21 (expr -> expr / expr .)
    DEG             reduce using rule 21 (expr -> expr / expr .)
    PHI             reduce using rule 21 (expr -> expr / expr .)
    GAMMA           reduce using rule 21 (expr -> expr / expr .)
    N_E             reduce using rule 21 (expr -> expr / expr .)
    PI              reduce using rule 21 (expr -> expr / expr .)
    ENDWHILE        reduce using rule 21 (expr -> expr / expr .)
    ENDIF           reduce using rule 21 (expr -> expr / expr .)
    )               reduce using rule 21 (expr -> expr / expr .)
    OR              reduce using rule 21 (expr -> expr / expr .)
    AND             reduce using rule 21 (expr -> expr / expr .)
    SM_EXP          shift and go to state 33


state 60

    (22) expr -> expr * expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    BRANCH          reduce using rule 22 (expr -> expr * expr .)
    /               reduce using rule 22 (expr -> expr * expr .)
    *               reduce using rule 22 (expr -> expr * expr .)
    -               reduce using rule 22 (expr -> expr * expr .)
    +               reduce using rule 22 (expr -> expr * expr .)
    NE              reduce using rule 22 (expr -> expr * expr .)
    EQ              reduce using rule 22 (expr -> expr * expr .)
    LE              reduce using rule 22 (expr -> expr * expr .)
    LT              reduce using rule 22 (expr -> expr * expr .)
    GE              reduce using rule 22 (expr -> expr * expr .)
    GT              reduce using rule 22 (expr -> expr * expr .)
    }               reduce using rule 22 (expr -> expr * expr .)
    {               reduce using rule 22 (expr -> expr * expr .)
    PRINTEX         reduce using rule 22 (expr -> expr * expr .)
    IF              reduce using rule 22 (expr -> expr * expr .)
    WHILE           reduce using rule 22 (expr -> expr * expr .)
    (               reduce using rule 22 (expr -> expr * expr .)
    NAME            reduce using rule 22 (expr -> expr * expr .)
    NUMBER_F        reduce using rule 22 (expr -> expr * expr .)
    NUMBER          reduce using rule 22 (expr -> expr * expr .)
    ABS             reduce using rule 22 (expr -> expr * expr .)
    SQRT            reduce using rule 22 (expr -> expr * expr .)
    LOG10           reduce using rule 22 (expr -> expr * expr .)
    LOG             reduce using rule 22 (expr -> expr * expr .)
    EXP             reduce using rule 22 (expr -> expr * expr .)
    ATAN            reduce using rule 22 (expr -> expr * expr .)
    COS             reduce using rule 22 (expr -> expr * expr .)
    SIN             reduce using rule 22 (expr -> expr * expr .)
    DEG             reduce using rule 22 (expr -> expr * expr .)
    PHI             reduce using rule 22 (expr -> expr * expr .)
    GAMMA           reduce using rule 22 (expr -> expr * expr .)
    N_E             reduce using rule 22 (expr -> expr * expr .)
    PI              reduce using rule 22 (expr -> expr * expr .)
    ENDWHILE        reduce using rule 22 (expr -> expr * expr .)
    ENDIF           reduce using rule 22 (expr -> expr * expr .)
    )               reduce using rule 22 (expr -> expr * expr .)
    OR              reduce using rule 22 (expr -> expr * expr .)
    AND             reduce using rule 22 (expr -> expr * expr .)
    SM_EXP          shift and go to state 33


state 61

    (23) expr -> expr - expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    BRANCH          reduce using rule 23 (expr -> expr - expr .)
    -               reduce using rule 23 (expr -> expr - expr .)
    +               reduce using rule 23 (expr -> expr - expr .)
    NE              reduce using rule 23 (expr -> expr - expr .)
    EQ              reduce using rule 23 (expr -> expr - expr .)
    LE              reduce using rule 23 (expr -> expr - expr .)
    LT              reduce using rule 23 (expr -> expr - expr .)
    GE              reduce using rule 23 (expr -> expr - expr .)
    GT              reduce using rule 23 (expr -> expr - expr .)
    }               reduce using rule 23 (expr -> expr - expr .)
    {               reduce using rule 23 (expr -> expr - expr .)
    PRINTEX         reduce using rule 23 (expr -> expr - expr .)
    IF              reduce using rule 23 (expr -> expr - expr .)
    WHILE           reduce using rule 23 (expr -> expr - expr .)
    (               reduce using rule 23 (expr -> expr - expr .)
    NAME            reduce using rule 23 (expr -> expr - expr .)
    NUMBER_F        reduce using rule 23 (expr -> expr - expr .)
    NUMBER          reduce using rule 23 (expr -> expr - expr .)
    ABS             reduce using rule 23 (expr -> expr - expr .)
    SQRT            reduce using rule 23 (expr -> expr - expr .)
    LOG10           reduce using rule 23 (expr -> expr - expr .)
    LOG             reduce using rule 23 (expr -> expr - expr .)
    EXP             reduce using rule 23 (expr -> expr - expr .)
    ATAN            reduce using rule 23 (expr -> expr - expr .)
    COS             reduce using rule 23 (expr -> expr - expr .)
    SIN             reduce using rule 23 (expr -> expr - expr .)
    DEG             reduce using rule 23 (expr -> expr - expr .)
    PHI             reduce using rule 23 (expr -> expr - expr .)
    GAMMA           reduce using rule 23 (expr -> expr - expr .)
    N_E             reduce using rule 23 (expr -> expr - expr .)
    PI              reduce using rule 23 (expr -> expr - expr .)
    ENDWHILE        reduce using rule 23 (expr -> expr - expr .)
    ENDIF           reduce using rule 23 (expr -> expr - expr .)
    )               reduce using rule 23 (expr -> expr - expr .)
    OR              reduce using rule 23 (expr -> expr - expr .)
    AND             reduce using rule 23 (expr -> expr - expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35


state 62

    (24) expr -> expr + expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    BRANCH          reduce using rule 24 (expr -> expr + expr .)
    -               reduce using rule 24 (expr -> expr + expr .)
    +               reduce using rule 24 (expr -> expr + expr .)
    NE              reduce using rule 24 (expr -> expr + expr .)
    EQ              reduce using rule 24 (expr -> expr + expr .)
    LE              reduce using rule 24 (expr -> expr + expr .)
    LT              reduce using rule 24 (expr -> expr + expr .)
    GE              reduce using rule 24 (expr -> expr + expr .)
    GT              reduce using rule 24 (expr -> expr + expr .)
    }               reduce using rule 24 (expr -> expr + expr .)
    {               reduce using rule 24 (expr -> expr + expr .)
    PRINTEX         reduce using rule 24 (expr -> expr + expr .)
    IF              reduce using rule 24 (expr -> expr + expr .)
    WHILE           reduce using rule 24 (expr -> expr + expr .)
    (               reduce using rule 24 (expr -> expr + expr .)
    NAME            reduce using rule 24 (expr -> expr + expr .)
    NUMBER_F        reduce using rule 24 (expr -> expr + expr .)
    NUMBER          reduce using rule 24 (expr -> expr + expr .)
    ABS             reduce using rule 24 (expr -> expr + expr .)
    SQRT            reduce using rule 24 (expr -> expr + expr .)
    LOG10           reduce using rule 24 (expr -> expr + expr .)
    LOG             reduce using rule 24 (expr -> expr + expr .)
    EXP             reduce using rule 24 (expr -> expr + expr .)
    ATAN            reduce using rule 24 (expr -> expr + expr .)
    COS             reduce using rule 24 (expr -> expr + expr .)
    SIN             reduce using rule 24 (expr -> expr + expr .)
    DEG             reduce using rule 24 (expr -> expr + expr .)
    PHI             reduce using rule 24 (expr -> expr + expr .)
    GAMMA           reduce using rule 24 (expr -> expr + expr .)
    N_E             reduce using rule 24 (expr -> expr + expr .)
    PI              reduce using rule 24 (expr -> expr + expr .)
    ENDWHILE        reduce using rule 24 (expr -> expr + expr .)
    ENDIF           reduce using rule 24 (expr -> expr + expr .)
    )               reduce using rule 24 (expr -> expr + expr .)
    OR              reduce using rule 24 (expr -> expr + expr .)
    AND             reduce using rule 24 (expr -> expr + expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35


state 63

    (6) assign -> NAME = expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    BRANCH          reduce using rule 6 (assign -> NAME = expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 64

    (7) statment -> { statmentList } .
    BRANCH          reduce using rule 7 (statment -> { statmentList } .)
    }               reduce using rule 7 (statment -> { statmentList } .)
    {               reduce using rule 7 (statment -> { statmentList } .)
    PRINTEX         reduce using rule 7 (statment -> { statmentList } .)
    IF              reduce using rule 7 (statment -> { statmentList } .)
    WHILE           reduce using rule 7 (statment -> { statmentList } .)
    (               reduce using rule 7 (statment -> { statmentList } .)
    -               reduce using rule 7 (statment -> { statmentList } .)
    NAME            reduce using rule 7 (statment -> { statmentList } .)
    NUMBER_F        reduce using rule 7 (statment -> { statmentList } .)
    NUMBER          reduce using rule 7 (statment -> { statmentList } .)
    ABS             reduce using rule 7 (statment -> { statmentList } .)
    SQRT            reduce using rule 7 (statment -> { statmentList } .)
    LOG10           reduce using rule 7 (statment -> { statmentList } .)
    LOG             reduce using rule 7 (statment -> { statmentList } .)
    EXP             reduce using rule 7 (statment -> { statmentList } .)
    ATAN            reduce using rule 7 (statment -> { statmentList } .)
    COS             reduce using rule 7 (statment -> { statmentList } .)
    SIN             reduce using rule 7 (statment -> { statmentList } .)
    DEG             reduce using rule 7 (statment -> { statmentList } .)
    PHI             reduce using rule 7 (statment -> { statmentList } .)
    GAMMA           reduce using rule 7 (statment -> { statmentList } .)
    N_E             reduce using rule 7 (statment -> { statmentList } .)
    PI              reduce using rule 7 (statment -> { statmentList } .)
    ENDWHILE        reduce using rule 7 (statment -> { statmentList } .)
    ENDIF           reduce using rule 7 (statment -> { statmentList } .)


state 65

    (16) statmentList -> statmentList statment .
    }               reduce using rule 16 (statmentList -> statmentList statment .)
    BRANCH          reduce using rule 16 (statmentList -> statmentList statment .)
    {               reduce using rule 16 (statmentList -> statmentList statment .)
    PRINTEX         reduce using rule 16 (statmentList -> statmentList statment .)
    IF              reduce using rule 16 (statmentList -> statmentList statment .)
    WHILE           reduce using rule 16 (statmentList -> statmentList statment .)
    (               reduce using rule 16 (statmentList -> statmentList statment .)
    -               reduce using rule 16 (statmentList -> statmentList statment .)
    NAME            reduce using rule 16 (statmentList -> statmentList statment .)
    NUMBER_F        reduce using rule 16 (statmentList -> statmentList statment .)
    NUMBER          reduce using rule 16 (statmentList -> statmentList statment .)
    ABS             reduce using rule 16 (statmentList -> statmentList statment .)
    SQRT            reduce using rule 16 (statmentList -> statmentList statment .)
    LOG10           reduce using rule 16 (statmentList -> statmentList statment .)
    LOG             reduce using rule 16 (statmentList -> statmentList statment .)
    EXP             reduce using rule 16 (statmentList -> statmentList statment .)
    ATAN            reduce using rule 16 (statmentList -> statmentList statment .)
    COS             reduce using rule 16 (statmentList -> statmentList statment .)
    SIN             reduce using rule 16 (statmentList -> statmentList statment .)
    DEG             reduce using rule 16 (statmentList -> statmentList statment .)
    PHI             reduce using rule 16 (statmentList -> statmentList statment .)
    GAMMA           reduce using rule 16 (statmentList -> statmentList statment .)
    N_E             reduce using rule 16 (statmentList -> statmentList statment .)
    PI              reduce using rule 16 (statmentList -> statmentList statment .)


state 66

    (17) statmentList -> statmentList BRANCH .
    }               reduce using rule 17 (statmentList -> statmentList BRANCH .)
    BRANCH          reduce using rule 17 (statmentList -> statmentList BRANCH .)
    {               reduce using rule 17 (statmentList -> statmentList BRANCH .)
    PRINTEX         reduce using rule 17 (statmentList -> statmentList BRANCH .)
    IF              reduce using rule 17 (statmentList -> statmentList BRANCH .)
    WHILE           reduce using rule 17 (statmentList -> statmentList BRANCH .)
    (               reduce using rule 17 (statmentList -> statmentList BRANCH .)
    -               reduce using rule 17 (statmentList -> statmentList BRANCH .)
    NAME            reduce using rule 17 (statmentList -> statmentList BRANCH .)
    NUMBER_F        reduce using rule 17 (statmentList -> statmentList BRANCH .)
    NUMBER          reduce using rule 17 (statmentList -> statmentList BRANCH .)
    ABS             reduce using rule 17 (statmentList -> statmentList BRANCH .)
    SQRT            reduce using rule 17 (statmentList -> statmentList BRANCH .)
    LOG10           reduce using rule 17 (statmentList -> statmentList BRANCH .)
    LOG             reduce using rule 17 (statmentList -> statmentList BRANCH .)
    EXP             reduce using rule 17 (statmentList -> statmentList BRANCH .)
    ATAN            reduce using rule 17 (statmentList -> statmentList BRANCH .)
    COS             reduce using rule 17 (statmentList -> statmentList BRANCH .)
    SIN             reduce using rule 17 (statmentList -> statmentList BRANCH .)
    DEG             reduce using rule 17 (statmentList -> statmentList BRANCH .)
    PHI             reduce using rule 17 (statmentList -> statmentList BRANCH .)
    GAMMA           reduce using rule 17 (statmentList -> statmentList BRANCH .)
    N_E             reduce using rule 17 (statmentList -> statmentList BRANCH .)
    PI              reduce using rule 17 (statmentList -> statmentList BRANCH .)


state 67

    (11) statment -> expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    }               reduce using rule 11 (statment -> expr .)
    BRANCH          reduce using rule 11 (statment -> expr .)
    {               reduce using rule 11 (statment -> expr .)
    PRINTEX         reduce using rule 11 (statment -> expr .)
    IF              reduce using rule 11 (statment -> expr .)
    WHILE           reduce using rule 11 (statment -> expr .)
    (               reduce using rule 11 (statment -> expr .)
    NAME            reduce using rule 11 (statment -> expr .)
    NUMBER_F        reduce using rule 11 (statment -> expr .)
    NUMBER          reduce using rule 11 (statment -> expr .)
    ABS             reduce using rule 11 (statment -> expr .)
    SQRT            reduce using rule 11 (statment -> expr .)
    LOG10           reduce using rule 11 (statment -> expr .)
    LOG             reduce using rule 11 (statment -> expr .)
    EXP             reduce using rule 11 (statment -> expr .)
    ATAN            reduce using rule 11 (statment -> expr .)
    COS             reduce using rule 11 (statment -> expr .)
    SIN             reduce using rule 11 (statment -> expr .)
    DEG             reduce using rule 11 (statment -> expr .)
    PHI             reduce using rule 11 (statment -> expr .)
    GAMMA           reduce using rule 11 (statment -> expr .)
    N_E             reduce using rule 11 (statment -> expr .)
    PI              reduce using rule 11 (statment -> expr .)
    ENDWHILE        reduce using rule 11 (statment -> expr .)
    ENDIF           reduce using rule 11 (statment -> expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 68

    (8) statment -> ifCode conditionLogical statment . end
    (14) end -> . ENDWHILE
    (15) end -> . ENDIF
    ENDWHILE        shift and go to state 91
    ENDIF           shift and go to state 92

    end                            shift and go to state 90

state 69

    (48) conditionLogical -> NOT condition .
    {               reduce using rule 48 (conditionLogical -> NOT condition .)
    PRINTEX         reduce using rule 48 (conditionLogical -> NOT condition .)
    IF              reduce using rule 48 (conditionLogical -> NOT condition .)
    WHILE           reduce using rule 48 (conditionLogical -> NOT condition .)
    (               reduce using rule 48 (conditionLogical -> NOT condition .)
    -               reduce using rule 48 (conditionLogical -> NOT condition .)
    NAME            reduce using rule 48 (conditionLogical -> NOT condition .)
    NUMBER_F        reduce using rule 48 (conditionLogical -> NOT condition .)
    NUMBER          reduce using rule 48 (conditionLogical -> NOT condition .)
    ABS             reduce using rule 48 (conditionLogical -> NOT condition .)
    SQRT            reduce using rule 48 (conditionLogical -> NOT condition .)
    LOG10           reduce using rule 48 (conditionLogical -> NOT condition .)
    LOG             reduce using rule 48 (conditionLogical -> NOT condition .)
    EXP             reduce using rule 48 (conditionLogical -> NOT condition .)
    ATAN            reduce using rule 48 (conditionLogical -> NOT condition .)
    COS             reduce using rule 48 (conditionLogical -> NOT condition .)
    SIN             reduce using rule 48 (conditionLogical -> NOT condition .)
    DEG             reduce using rule 48 (conditionLogical -> NOT condition .)
    PHI             reduce using rule 48 (conditionLogical -> NOT condition .)
    GAMMA           reduce using rule 48 (conditionLogical -> NOT condition .)
    N_E             reduce using rule 48 (conditionLogical -> NOT condition .)
    PI              reduce using rule 48 (conditionLogical -> NOT condition .)


state 70

    (49) conditionLogical -> condition OR . condition
    (42) condition -> . expr NE expr
    (43) condition -> . expr EQ expr
    (44) condition -> . expr LE expr
    (45) condition -> . expr LT expr
    (46) condition -> . expr GE expr
    (47) condition -> . expr GT expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    condition                      shift and go to state 93
    expr                           shift and go to state 44

state 71

    (50) conditionLogical -> condition AND . condition
    (42) condition -> . expr NE expr
    (43) condition -> . expr EQ expr
    (44) condition -> . expr LE expr
    (45) condition -> . expr LT expr
    (46) condition -> . expr GE expr
    (47) condition -> . expr GT expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    condition                      shift and go to state 94
    expr                           shift and go to state 44

state 72

    (51) conditionLogical -> ( condition . )
    )               shift and go to state 95


state 73

    (19) expr -> ( expr . )
    (42) condition -> expr . NE expr
    (43) condition -> expr . EQ expr
    (44) condition -> expr . LE expr
    (45) condition -> expr . LT expr
    (46) condition -> expr . GE expr
    (47) condition -> expr . GT expr
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    )               shift and go to state 81
    NE              shift and go to state 74
    EQ              shift and go to state 75
    LE              shift and go to state 76
    LT              shift and go to state 77
    GE              shift and go to state 78
    GT              shift and go to state 79
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 74

    (42) condition -> expr NE . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 96

state 75

    (43) condition -> expr EQ . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 97

state 76

    (44) condition -> expr LE . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 98

state 77

    (45) condition -> expr LT . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 99

state 78

    (46) condition -> expr GE . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 100

state 79

    (47) condition -> expr GT . expr
    (19) expr -> . ( expr )
    (20) expr -> . expr SM_EXP expr
    (21) expr -> . expr / expr
    (22) expr -> . expr * expr
    (23) expr -> . expr - expr
    (24) expr -> . expr + expr
    (25) expr -> . - expr
    (26) expr -> . NAME
    (27) expr -> . NUMBER_F
    (28) expr -> . NUMBER
    (29) expr -> . ABS ( expr )
    (30) expr -> . SQRT ( expr )
    (31) expr -> . LOG10 ( expr )
    (32) expr -> . LOG ( expr )
    (33) expr -> . EXP ( expr )
    (34) expr -> . ATAN ( expr )
    (35) expr -> . COS ( expr )
    (36) expr -> . SIN ( expr )
    (37) expr -> . DEG
    (38) expr -> . PHI
    (39) expr -> . GAMMA
    (40) expr -> . N_E
    (41) expr -> . PI
    (               shift and go to state 11
    -               shift and go to state 12
    NAME            shift and go to state 45
    NUMBER_F        shift and go to state 13
    NUMBER          shift and go to state 14
    ABS             shift and go to state 15
    SQRT            shift and go to state 16
    LOG10           shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    ATAN            shift and go to state 20
    COS             shift and go to state 21
    SIN             shift and go to state 22
    DEG             shift and go to state 23
    PHI             shift and go to state 24
    GAMMA           shift and go to state 25
    N_E             shift and go to state 26
    PI              shift and go to state 27

    expr                           shift and go to state 101

state 80

    (9) statment -> whileCode conditionLogical statment . end
    (14) end -> . ENDWHILE
    (15) end -> . ENDIF
    ENDWHILE        shift and go to state 91
    ENDIF           shift and go to state 92

    end                            shift and go to state 102

state 81

    (19) expr -> ( expr ) .
    BRANCH          reduce using rule 19 (expr -> ( expr ) .)
    SM_EXP          reduce using rule 19 (expr -> ( expr ) .)
    /               reduce using rule 19 (expr -> ( expr ) .)
    *               reduce using rule 19 (expr -> ( expr ) .)
    -               reduce using rule 19 (expr -> ( expr ) .)
    +               reduce using rule 19 (expr -> ( expr ) .)
    NE              reduce using rule 19 (expr -> ( expr ) .)
    EQ              reduce using rule 19 (expr -> ( expr ) .)
    LE              reduce using rule 19 (expr -> ( expr ) .)
    LT              reduce using rule 19 (expr -> ( expr ) .)
    GE              reduce using rule 19 (expr -> ( expr ) .)
    GT              reduce using rule 19 (expr -> ( expr ) .)
    }               reduce using rule 19 (expr -> ( expr ) .)
    {               reduce using rule 19 (expr -> ( expr ) .)
    PRINTEX         reduce using rule 19 (expr -> ( expr ) .)
    IF              reduce using rule 19 (expr -> ( expr ) .)
    WHILE           reduce using rule 19 (expr -> ( expr ) .)
    (               reduce using rule 19 (expr -> ( expr ) .)
    NAME            reduce using rule 19 (expr -> ( expr ) .)
    NUMBER_F        reduce using rule 19 (expr -> ( expr ) .)
    NUMBER          reduce using rule 19 (expr -> ( expr ) .)
    ABS             reduce using rule 19 (expr -> ( expr ) .)
    SQRT            reduce using rule 19 (expr -> ( expr ) .)
    LOG10           reduce using rule 19 (expr -> ( expr ) .)
    LOG             reduce using rule 19 (expr -> ( expr ) .)
    EXP             reduce using rule 19 (expr -> ( expr ) .)
    ATAN            reduce using rule 19 (expr -> ( expr ) .)
    COS             reduce using rule 19 (expr -> ( expr ) .)
    SIN             reduce using rule 19 (expr -> ( expr ) .)
    DEG             reduce using rule 19 (expr -> ( expr ) .)
    PHI             reduce using rule 19 (expr -> ( expr ) .)
    GAMMA           reduce using rule 19 (expr -> ( expr ) .)
    N_E             reduce using rule 19 (expr -> ( expr ) .)
    PI              reduce using rule 19 (expr -> ( expr ) .)
    ENDWHILE        reduce using rule 19 (expr -> ( expr ) .)
    ENDIF           reduce using rule 19 (expr -> ( expr ) .)
    )               reduce using rule 19 (expr -> ( expr ) .)
    OR              reduce using rule 19 (expr -> ( expr ) .)
    AND             reduce using rule 19 (expr -> ( expr ) .)


state 82

    (29) expr -> ABS ( expr . )
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    )               shift and go to state 103
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 83

    (30) expr -> SQRT ( expr . )
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    )               shift and go to state 104
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 84

    (31) expr -> LOG10 ( expr . )
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    )               shift and go to state 105
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 85

    (32) expr -> LOG ( expr . )
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    )               shift and go to state 106
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 86

    (33) expr -> EXP ( expr . )
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    )               shift and go to state 107
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 87

    (34) expr -> ATAN ( expr . )
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    )               shift and go to state 108
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 88

    (35) expr -> COS ( expr . )
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    )               shift and go to state 109
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 89

    (36) expr -> SIN ( expr . )
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
    )               shift and go to state 110
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 90

    (8) statment -> ifCode conditionLogical statment end .
    BRANCH          reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    }               reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    {               reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    PRINTEX         reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    IF              reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    WHILE           reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    (               reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    -               reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    NAME            reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    NUMBER_F        reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    NUMBER          reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    ABS             reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    SQRT            reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    LOG10           reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    LOG             reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    EXP             reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    ATAN            reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    COS             reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    SIN             reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    DEG             reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    PHI             reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    GAMMA           reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    N_E             reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    PI              reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    ENDWHILE        reduce using rule 8 (statment -> ifCode conditionLogical statment end .)
    ENDIF           reduce using rule 8 (statment -> ifCode conditionLogical statment end .)


state 91

    (14) end -> ENDWHILE .
    BRANCH          reduce using rule 14 (end -> ENDWHILE .)
    }               reduce using rule 14 (end -> ENDWHILE .)
    {               reduce using rule 14 (end -> ENDWHILE .)
    PRINTEX         reduce using rule 14 (end -> ENDWHILE .)
    IF              reduce using rule 14 (end -> ENDWHILE .)
    WHILE           reduce using rule 14 (end -> ENDWHILE .)
    (               reduce using rule 14 (end -> ENDWHILE .)
    -               reduce using rule 14 (end -> ENDWHILE .)
    NAME            reduce using rule 14 (end -> ENDWHILE .)
    NUMBER_F        reduce using rule 14 (end -> ENDWHILE .)
    NUMBER          reduce using rule 14 (end -> ENDWHILE .)
    ABS             reduce using rule 14 (end -> ENDWHILE .)
    SQRT            reduce using rule 14 (end -> ENDWHILE .)
    LOG10           reduce using rule 14 (end -> ENDWHILE .)
    LOG             reduce using rule 14 (end -> ENDWHILE .)
    EXP             reduce using rule 14 (end -> ENDWHILE .)
    ATAN            reduce using rule 14 (end -> ENDWHILE .)
    COS             reduce using rule 14 (end -> ENDWHILE .)
    SIN             reduce using rule 14 (end -> ENDWHILE .)
    DEG             reduce using rule 14 (end -> ENDWHILE .)
    PHI             reduce using rule 14 (end -> ENDWHILE .)
    GAMMA           reduce using rule 14 (end -> ENDWHILE .)
    N_E             reduce using rule 14 (end -> ENDWHILE .)
    PI              reduce using rule 14 (end -> ENDWHILE .)
    ENDWHILE        reduce using rule 14 (end -> ENDWHILE .)
    ENDIF           reduce using rule 14 (end -> ENDWHILE .)


state 92

    (15) end -> ENDIF .
    BRANCH          reduce using rule 15 (end -> ENDIF .)
    }               reduce using rule 15 (end -> ENDIF .)
    {               reduce using rule 15 (end -> ENDIF .)
    PRINTEX         reduce using rule 15 (end -> ENDIF .)
    IF              reduce using rule 15 (end -> ENDIF .)
    WHILE           reduce using rule 15 (end -> ENDIF .)
    (               reduce using rule 15 (end -> ENDIF .)
    -               reduce using rule 15 (end -> ENDIF .)
    NAME            reduce using rule 15 (end -> ENDIF .)
    NUMBER_F        reduce using rule 15 (end -> ENDIF .)
    NUMBER          reduce using rule 15 (end -> ENDIF .)
    ABS             reduce using rule 15 (end -> ENDIF .)
    SQRT            reduce using rule 15 (end -> ENDIF .)
    LOG10           reduce using rule 15 (end -> ENDIF .)
    LOG             reduce using rule 15 (end -> ENDIF .)
    EXP             reduce using rule 15 (end -> ENDIF .)
    ATAN            reduce using rule 15 (end -> ENDIF .)
    COS             reduce using rule 15 (end -> ENDIF .)
    SIN             reduce using rule 15 (end -> ENDIF .)
    DEG             reduce using rule 15 (end -> ENDIF .)
    PHI             reduce using rule 15 (end -> ENDIF .)
    GAMMA           reduce using rule 15 (end -> ENDIF .)
    N_E             reduce using rule 15 (end -> ENDIF .)
    PI              reduce using rule 15 (end -> ENDIF .)
    ENDWHILE        reduce using rule 15 (end -> ENDIF .)
    ENDIF           reduce using rule 15 (end -> ENDIF .)


state 93

    (49) conditionLogical -> condition OR condition .
    {               reduce using rule 49 (conditionLogical -> condition OR condition .)
    PRINTEX         reduce using rule 49 (conditionLogical -> condition OR condition .)
    IF              reduce using rule 49 (conditionLogical -> condition OR condition .)
    WHILE           reduce using rule 49 (conditionLogical -> condition OR condition .)
    (               reduce using rule 49 (conditionLogical -> condition OR condition .)
    -               reduce using rule 49 (conditionLogical -> condition OR condition .)
    NAME            reduce using rule 49 (conditionLogical -> condition OR condition .)
    NUMBER_F        reduce using rule 49 (conditionLogical -> condition OR condition .)
    NUMBER          reduce using rule 49 (conditionLogical -> condition OR condition .)
    ABS             reduce using rule 49 (conditionLogical -> condition OR condition .)
    SQRT            reduce using rule 49 (conditionLogical -> condition OR condition .)
    LOG10           reduce using rule 49 (conditionLogical -> condition OR condition .)
    LOG             reduce using rule 49 (conditionLogical -> condition OR condition .)
    EXP             reduce using rule 49 (conditionLogical -> condition OR condition .)
    ATAN            reduce using rule 49 (conditionLogical -> condition OR condition .)
    COS             reduce using rule 49 (conditionLogical -> condition OR condition .)
    SIN             reduce using rule 49 (conditionLogical -> condition OR condition .)
    DEG             reduce using rule 49 (conditionLogical -> condition OR condition .)
    PHI             reduce using rule 49 (conditionLogical -> condition OR condition .)
    GAMMA           reduce using rule 49 (conditionLogical -> condition OR condition .)
    N_E             reduce using rule 49 (conditionLogical -> condition OR condition .)
    PI              reduce using rule 49 (conditionLogical -> condition OR condition .)


state 94

    (50) conditionLogical -> condition AND condition .
    {               reduce using rule 50 (conditionLogical -> condition AND condition .)
    PRINTEX         reduce using rule 50 (conditionLogical -> condition AND condition .)
    IF              reduce using rule 50 (conditionLogical -> condition AND condition .)
    WHILE           reduce using rule 50 (conditionLogical -> condition AND condition .)
    (               reduce using rule 50 (conditionLogical -> condition AND condition .)
    -               reduce using rule 50 (conditionLogical -> condition AND condition .)
    NAME            reduce using rule 50 (conditionLogical -> condition AND condition .)
    NUMBER_F        reduce using rule 50 (conditionLogical -> condition AND condition .)
    NUMBER          reduce using rule 50 (conditionLogical -> condition AND condition .)
    ABS             reduce using rule 50 (conditionLogical -> condition AND condition .)
    SQRT            reduce using rule 50 (conditionLogical -> condition AND condition .)
    LOG10           reduce using rule 50 (conditionLogical -> condition AND condition .)
    LOG             reduce using rule 50 (conditionLogical -> condition AND condition .)
    EXP             reduce using rule 50 (conditionLogical -> condition AND condition .)
    ATAN            reduce using rule 50 (conditionLogical -> condition AND condition .)
    COS             reduce using rule 50 (conditionLogical -> condition AND condition .)
    SIN             reduce using rule 50 (conditionLogical -> condition AND condition .)
    DEG             reduce using rule 50 (conditionLogical -> condition AND condition .)
    PHI             reduce using rule 50 (conditionLogical -> condition AND condition .)
    GAMMA           reduce using rule 50 (conditionLogical -> condition AND condition .)
    N_E             reduce using rule 50 (conditionLogical -> condition AND condition .)
    PI              reduce using rule 50 (conditionLogical -> condition AND condition .)


state 95

    (51) conditionLogical -> ( condition ) .
    {               reduce using rule 51 (conditionLogical -> ( condition ) .)
    PRINTEX         reduce using rule 51 (conditionLogical -> ( condition ) .)
    IF              reduce using rule 51 (conditionLogical -> ( condition ) .)
    WHILE           reduce using rule 51 (conditionLogical -> ( condition ) .)
    (               reduce using rule 51 (conditionLogical -> ( condition ) .)
    -               reduce using rule 51 (conditionLogical -> ( condition ) .)
    NAME            reduce using rule 51 (conditionLogical -> ( condition ) .)
    NUMBER_F        reduce using rule 51 (conditionLogical -> ( condition ) .)
    NUMBER          reduce using rule 51 (conditionLogical -> ( condition ) .)
    ABS             reduce using rule 51 (conditionLogical -> ( condition ) .)
    SQRT            reduce using rule 51 (conditionLogical -> ( condition ) .)
    LOG10           reduce using rule 51 (conditionLogical -> ( condition ) .)
    LOG             reduce using rule 51 (conditionLogical -> ( condition ) .)
    EXP             reduce using rule 51 (conditionLogical -> ( condition ) .)
    ATAN            reduce using rule 51 (conditionLogical -> ( condition ) .)
    COS             reduce using rule 51 (conditionLogical -> ( condition ) .)
    SIN             reduce using rule 51 (conditionLogical -> ( condition ) .)
    DEG             reduce using rule 51 (conditionLogical -> ( condition ) .)
    PHI             reduce using rule 51 (conditionLogical -> ( condition ) .)
    GAMMA           reduce using rule 51 (conditionLogical -> ( condition ) .)
    N_E             reduce using rule 51 (conditionLogical -> ( condition ) .)
    PI              reduce using rule 51 (conditionLogical -> ( condition ) .)


state 96

    (42) condition -> expr NE expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    OR              reduce using rule 42 (condition -> expr NE expr .)
    AND             reduce using rule 42 (condition -> expr NE expr .)
    {               reduce using rule 42 (condition -> expr NE expr .)
    PRINTEX         reduce using rule 42 (condition -> expr NE expr .)
    IF              reduce using rule 42 (condition -> expr NE expr .)
    WHILE           reduce using rule 42 (condition -> expr NE expr .)
    (               reduce using rule 42 (condition -> expr NE expr .)
    NAME            reduce using rule 42 (condition -> expr NE expr .)
    NUMBER_F        reduce using rule 42 (condition -> expr NE expr .)
    NUMBER          reduce using rule 42 (condition -> expr NE expr .)
    ABS             reduce using rule 42 (condition -> expr NE expr .)
    SQRT            reduce using rule 42 (condition -> expr NE expr .)
    LOG10           reduce using rule 42 (condition -> expr NE expr .)
    LOG             reduce using rule 42 (condition -> expr NE expr .)
    EXP             reduce using rule 42 (condition -> expr NE expr .)
    ATAN            reduce using rule 42 (condition -> expr NE expr .)
    COS             reduce using rule 42 (condition -> expr NE expr .)
    SIN             reduce using rule 42 (condition -> expr NE expr .)
    DEG             reduce using rule 42 (condition -> expr NE expr .)
    PHI             reduce using rule 42 (condition -> expr NE expr .)
    GAMMA           reduce using rule 42 (condition -> expr NE expr .)
    N_E             reduce using rule 42 (condition -> expr NE expr .)
    PI              reduce using rule 42 (condition -> expr NE expr .)
    )               reduce using rule 42 (condition -> expr NE expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 97

    (43) condition -> expr EQ expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    OR              reduce using rule 43 (condition -> expr EQ expr .)
    AND             reduce using rule 43 (condition -> expr EQ expr .)
    {               reduce using rule 43 (condition -> expr EQ expr .)
    PRINTEX         reduce using rule 43 (condition -> expr EQ expr .)
    IF              reduce using rule 43 (condition -> expr EQ expr .)
    WHILE           reduce using rule 43 (condition -> expr EQ expr .)
    (               reduce using rule 43 (condition -> expr EQ expr .)
    NAME            reduce using rule 43 (condition -> expr EQ expr .)
    NUMBER_F        reduce using rule 43 (condition -> expr EQ expr .)
    NUMBER          reduce using rule 43 (condition -> expr EQ expr .)
    ABS             reduce using rule 43 (condition -> expr EQ expr .)
    SQRT            reduce using rule 43 (condition -> expr EQ expr .)
    LOG10           reduce using rule 43 (condition -> expr EQ expr .)
    LOG             reduce using rule 43 (condition -> expr EQ expr .)
    EXP             reduce using rule 43 (condition -> expr EQ expr .)
    ATAN            reduce using rule 43 (condition -> expr EQ expr .)
    COS             reduce using rule 43 (condition -> expr EQ expr .)
    SIN             reduce using rule 43 (condition -> expr EQ expr .)
    DEG             reduce using rule 43 (condition -> expr EQ expr .)
    PHI             reduce using rule 43 (condition -> expr EQ expr .)
    GAMMA           reduce using rule 43 (condition -> expr EQ expr .)
    N_E             reduce using rule 43 (condition -> expr EQ expr .)
    PI              reduce using rule 43 (condition -> expr EQ expr .)
    )               reduce using rule 43 (condition -> expr EQ expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 98

    (44) condition -> expr LE expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    OR              reduce using rule 44 (condition -> expr LE expr .)
    AND             reduce using rule 44 (condition -> expr LE expr .)
    {               reduce using rule 44 (condition -> expr LE expr .)
    PRINTEX         reduce using rule 44 (condition -> expr LE expr .)
    IF              reduce using rule 44 (condition -> expr LE expr .)
    WHILE           reduce using rule 44 (condition -> expr LE expr .)
    (               reduce using rule 44 (condition -> expr LE expr .)
    NAME            reduce using rule 44 (condition -> expr LE expr .)
    NUMBER_F        reduce using rule 44 (condition -> expr LE expr .)
    NUMBER          reduce using rule 44 (condition -> expr LE expr .)
    ABS             reduce using rule 44 (condition -> expr LE expr .)
    SQRT            reduce using rule 44 (condition -> expr LE expr .)
    LOG10           reduce using rule 44 (condition -> expr LE expr .)
    LOG             reduce using rule 44 (condition -> expr LE expr .)
    EXP             reduce using rule 44 (condition -> expr LE expr .)
    ATAN            reduce using rule 44 (condition -> expr LE expr .)
    COS             reduce using rule 44 (condition -> expr LE expr .)
    SIN             reduce using rule 44 (condition -> expr LE expr .)
    DEG             reduce using rule 44 (condition -> expr LE expr .)
    PHI             reduce using rule 44 (condition -> expr LE expr .)
    GAMMA           reduce using rule 44 (condition -> expr LE expr .)
    N_E             reduce using rule 44 (condition -> expr LE expr .)
    PI              reduce using rule 44 (condition -> expr LE expr .)
    )               reduce using rule 44 (condition -> expr LE expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 99

    (45) condition -> expr LT expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    OR              reduce using rule 45 (condition -> expr LT expr .)
    AND             reduce using rule 45 (condition -> expr LT expr .)
    {               reduce using rule 45 (condition -> expr LT expr .)
    PRINTEX         reduce using rule 45 (condition -> expr LT expr .)
    IF              reduce using rule 45 (condition -> expr LT expr .)
    WHILE           reduce using rule 45 (condition -> expr LT expr .)
    (               reduce using rule 45 (condition -> expr LT expr .)
    NAME            reduce using rule 45 (condition -> expr LT expr .)
    NUMBER_F        reduce using rule 45 (condition -> expr LT expr .)
    NUMBER          reduce using rule 45 (condition -> expr LT expr .)
    ABS             reduce using rule 45 (condition -> expr LT expr .)
    SQRT            reduce using rule 45 (condition -> expr LT expr .)
    LOG10           reduce using rule 45 (condition -> expr LT expr .)
    LOG             reduce using rule 45 (condition -> expr LT expr .)
    EXP             reduce using rule 45 (condition -> expr LT expr .)
    ATAN            reduce using rule 45 (condition -> expr LT expr .)
    COS             reduce using rule 45 (condition -> expr LT expr .)
    SIN             reduce using rule 45 (condition -> expr LT expr .)
    DEG             reduce using rule 45 (condition -> expr LT expr .)
    PHI             reduce using rule 45 (condition -> expr LT expr .)
    GAMMA           reduce using rule 45 (condition -> expr LT expr .)
    N_E             reduce using rule 45 (condition -> expr LT expr .)
    PI              reduce using rule 45 (condition -> expr LT expr .)
    )               reduce using rule 45 (condition -> expr LT expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 100

    (46) condition -> expr GE expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    OR              reduce using rule 46 (condition -> expr GE expr .)
    AND             reduce using rule 46 (condition -> expr GE expr .)
    {               reduce using rule 46 (condition -> expr GE expr .)
    PRINTEX         reduce using rule 46 (condition -> expr GE expr .)
    IF              reduce using rule 46 (condition -> expr GE expr .)
    WHILE           reduce using rule 46 (condition -> expr GE expr .)
    (               reduce using rule 46 (condition -> expr GE expr .)
    NAME            reduce using rule 46 (condition -> expr GE expr .)
    NUMBER_F        reduce using rule 46 (condition -> expr GE expr .)
    NUMBER          reduce using rule 46 (condition -> expr GE expr .)
    ABS             reduce using rule 46 (condition -> expr GE expr .)
    SQRT            reduce using rule 46 (condition -> expr GE expr .)
    LOG10           reduce using rule 46 (condition -> expr GE expr .)
    LOG             reduce using rule 46 (condition -> expr GE expr .)
    EXP             reduce using rule 46 (condition -> expr GE expr .)
    ATAN            reduce using rule 46 (condition -> expr GE expr .)
    COS             reduce using rule 46 (condition -> expr GE expr .)
    SIN             reduce using rule 46 (condition -> expr GE expr .)
    DEG             reduce using rule 46 (condition -> expr GE expr .)
    PHI             reduce using rule 46 (condition -> expr GE expr .)
    GAMMA           reduce using rule 46 (condition -> expr GE expr .)
    N_E             reduce using rule 46 (condition -> expr GE expr .)
    PI              reduce using rule 46 (condition -> expr GE expr .)
    )               reduce using rule 46 (condition -> expr GE expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 101

    (47) condition -> expr GT expr .
    (20) expr -> expr . SM_EXP expr
    (21) expr -> expr . / expr
    (22) expr -> expr . * expr
    (23) expr -> expr . - expr
    (24) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    OR              reduce using rule 47 (condition -> expr GT expr .)
    AND             reduce using rule 47 (condition -> expr GT expr .)
    {               reduce using rule 47 (condition -> expr GT expr .)
    PRINTEX         reduce using rule 47 (condition -> expr GT expr .)
    IF              reduce using rule 47 (condition -> expr GT expr .)
    WHILE           reduce using rule 47 (condition -> expr GT expr .)
    (               reduce using rule 47 (condition -> expr GT expr .)
    NAME            reduce using rule 47 (condition -> expr GT expr .)
    NUMBER_F        reduce using rule 47 (condition -> expr GT expr .)
    NUMBER          reduce using rule 47 (condition -> expr GT expr .)
    ABS             reduce using rule 47 (condition -> expr GT expr .)
    SQRT            reduce using rule 47 (condition -> expr GT expr .)
    LOG10           reduce using rule 47 (condition -> expr GT expr .)
    LOG             reduce using rule 47 (condition -> expr GT expr .)
    EXP             reduce using rule 47 (condition -> expr GT expr .)
    ATAN            reduce using rule 47 (condition -> expr GT expr .)
    COS             reduce using rule 47 (condition -> expr GT expr .)
    SIN             reduce using rule 47 (condition -> expr GT expr .)
    DEG             reduce using rule 47 (condition -> expr GT expr .)
    PHI             reduce using rule 47 (condition -> expr GT expr .)
    GAMMA           reduce using rule 47 (condition -> expr GT expr .)
    N_E             reduce using rule 47 (condition -> expr GT expr .)
    PI              reduce using rule 47 (condition -> expr GT expr .)
    )               reduce using rule 47 (condition -> expr GT expr .)
    SM_EXP          shift and go to state 33
    /               shift and go to state 34
    *               shift and go to state 35
    -               shift and go to state 36
    +               shift and go to state 37


state 102

    (9) statment -> whileCode conditionLogical statment end .
    BRANCH          reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    }               reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    {               reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    PRINTEX         reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    IF              reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    WHILE           reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    (               reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    -               reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    NAME            reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    NUMBER_F        reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    NUMBER          reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    ABS             reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    SQRT            reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    LOG10           reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    LOG             reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    EXP             reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    ATAN            reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    COS             reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    SIN             reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    DEG             reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    PHI             reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    GAMMA           reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    N_E             reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    PI              reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    ENDWHILE        reduce using rule 9 (statment -> whileCode conditionLogical statment end .)
    ENDIF           reduce using rule 9 (statment -> whileCode conditionLogical statment end .)


state 103

    (29) expr -> ABS ( expr ) .
    BRANCH          reduce using rule 29 (expr -> ABS ( expr ) .)
    SM_EXP          reduce using rule 29 (expr -> ABS ( expr ) .)
    /               reduce using rule 29 (expr -> ABS ( expr ) .)
    *               reduce using rule 29 (expr -> ABS ( expr ) .)
    -               reduce using rule 29 (expr -> ABS ( expr ) .)
    +               reduce using rule 29 (expr -> ABS ( expr ) .)
    NE              reduce using rule 29 (expr -> ABS ( expr ) .)
    EQ              reduce using rule 29 (expr -> ABS ( expr ) .)
    LE              reduce using rule 29 (expr -> ABS ( expr ) .)
    LT              reduce using rule 29 (expr -> ABS ( expr ) .)
    GE              reduce using rule 29 (expr -> ABS ( expr ) .)
    GT              reduce using rule 29 (expr -> ABS ( expr ) .)
    }               reduce using rule 29 (expr -> ABS ( expr ) .)
    {               reduce using rule 29 (expr -> ABS ( expr ) .)
    PRINTEX         reduce using rule 29 (expr -> ABS ( expr ) .)
    IF              reduce using rule 29 (expr -> ABS ( expr ) .)
    WHILE           reduce using rule 29 (expr -> ABS ( expr ) .)
    (               reduce using rule 29 (expr -> ABS ( expr ) .)
    NAME            reduce using rule 29 (expr -> ABS ( expr ) .)
    NUMBER_F        reduce using rule 29 (expr -> ABS ( expr ) .)
    NUMBER          reduce using rule 29 (expr -> ABS ( expr ) .)
    ABS             reduce using rule 29 (expr -> ABS ( expr ) .)
    SQRT            reduce using rule 29 (expr -> ABS ( expr ) .)
    LOG10           reduce using rule 29 (expr -> ABS ( expr ) .)
    LOG             reduce using rule 29 (expr -> ABS ( expr ) .)
    EXP             reduce using rule 29 (expr -> ABS ( expr ) .)
    ATAN            reduce using rule 29 (expr -> ABS ( expr ) .)
    COS             reduce using rule 29 (expr -> ABS ( expr ) .)
    SIN             reduce using rule 29 (expr -> ABS ( expr ) .)
    DEG             reduce using rule 29 (expr -> ABS ( expr ) .)
    PHI             reduce using rule 29 (expr -> ABS ( expr ) .)
    GAMMA           reduce using rule 29 (expr -> ABS ( expr ) .)
    N_E             reduce using rule 29 (expr -> ABS ( expr ) .)
    PI              reduce using rule 29 (expr -> ABS ( expr ) .)
    ENDWHILE        reduce using rule 29 (expr -> ABS ( expr ) .)
    ENDIF           reduce using rule 29 (expr -> ABS ( expr ) .)
    )               reduce using rule 29 (expr -> ABS ( expr ) .)
    OR              reduce using rule 29 (expr -> ABS ( expr ) .)
    AND             reduce using rule 29 (expr -> ABS ( expr ) .)


state 104

    (30) expr -> SQRT ( expr ) .
    BRANCH          reduce using rule 30 (expr -> SQRT ( expr ) .)
    SM_EXP          reduce using rule 30 (expr -> SQRT ( expr ) .)
    /               reduce using rule 30 (expr -> SQRT ( expr ) .)
    *               reduce using rule 30 (expr -> SQRT ( expr ) .)
    -               reduce using rule 30 (expr -> SQRT ( expr ) .)
    +               reduce using rule 30 (expr -> SQRT ( expr ) .)
    NE              reduce using rule 30 (expr -> SQRT ( expr ) .)
    EQ              reduce using rule 30 (expr -> SQRT ( expr ) .)
    LE              reduce using rule 30 (expr -> SQRT ( expr ) .)
    LT              reduce using rule 30 (expr -> SQRT ( expr ) .)
    GE              reduce using rule 30 (expr -> SQRT ( expr ) .)
    GT              reduce using rule 30 (expr -> SQRT ( expr ) .)
    }               reduce using rule 30 (expr -> SQRT ( expr ) .)
    {               reduce using rule 30 (expr -> SQRT ( expr ) .)
    PRINTEX         reduce using rule 30 (expr -> SQRT ( expr ) .)
    IF              reduce using rule 30 (expr -> SQRT ( expr ) .)
    WHILE           reduce using rule 30 (expr -> SQRT ( expr ) .)
    (               reduce using rule 30 (expr -> SQRT ( expr ) .)
    NAME            reduce using rule 30 (expr -> SQRT ( expr ) .)
    NUMBER_F        reduce using rule 30 (expr -> SQRT ( expr ) .)
    NUMBER          reduce using rule 30 (expr -> SQRT ( expr ) .)
    ABS             reduce using rule 30 (expr -> SQRT ( expr ) .)
    SQRT            reduce using rule 30 (expr -> SQRT ( expr ) .)
    LOG10           reduce using rule 30 (expr -> SQRT ( expr ) .)
    LOG             reduce using rule 30 (expr -> SQRT ( expr ) .)
    EXP             reduce using rule 30 (expr -> SQRT ( expr ) .)
    ATAN            reduce using rule 30 (expr -> SQRT ( expr ) .)
    COS             reduce using rule 30 (expr -> SQRT ( expr ) .)
    SIN             reduce using rule 30 (expr -> SQRT ( expr ) .)
    DEG             reduce using rule 30 (expr -> SQRT ( expr ) .)
    PHI             reduce using rule 30 (expr -> SQRT ( expr ) .)
    GAMMA           reduce using rule 30 (expr -> SQRT ( expr ) .)
    N_E             reduce using rule 30 (expr -> SQRT ( expr ) .)
    PI              reduce using rule 30 (expr -> SQRT ( expr ) .)
    ENDWHILE        reduce using rule 30 (expr -> SQRT ( expr ) .)
    ENDIF           reduce using rule 30 (expr -> SQRT ( expr ) .)
    )               reduce using rule 30 (expr -> SQRT ( expr ) .)
    OR              reduce using rule 30 (expr -> SQRT ( expr ) .)
    AND             reduce using rule 30 (expr -> SQRT ( expr ) .)


state 105

    (31) expr -> LOG10 ( expr ) .
    BRANCH          reduce using rule 31 (expr -> LOG10 ( expr ) .)
    SM_EXP          reduce using rule 31 (expr -> LOG10 ( expr ) .)
    /               reduce using rule 31 (expr -> LOG10 ( expr ) .)
    *               reduce using rule 31 (expr -> LOG10 ( expr ) .)
    -               reduce using rule 31 (expr -> LOG10 ( expr ) .)
    +               reduce using rule 31 (expr -> LOG10 ( expr ) .)
    NE              reduce using rule 31 (expr -> LOG10 ( expr ) .)
    EQ              reduce using rule 31 (expr -> LOG10 ( expr ) .)
    LE              reduce using rule 31 (expr -> LOG10 ( expr ) .)
    LT              reduce using rule 31 (expr -> LOG10 ( expr ) .)
    GE              reduce using rule 31 (expr -> LOG10 ( expr ) .)
    GT              reduce using rule 31 (expr -> LOG10 ( expr ) .)
    }               reduce using rule 31 (expr -> LOG10 ( expr ) .)
    {               reduce using rule 31 (expr -> LOG10 ( expr ) .)
    PRINTEX         reduce using rule 31 (expr -> LOG10 ( expr ) .)
    IF              reduce using rule 31 (expr -> LOG10 ( expr ) .)
    WHILE           reduce using rule 31 (expr -> LOG10 ( expr ) .)
    (               reduce using rule 31 (expr -> LOG10 ( expr ) .)
    NAME            reduce using rule 31 (expr -> LOG10 ( expr ) .)
    NUMBER_F        reduce using rule 31 (expr -> LOG10 ( expr ) .)
    NUMBER          reduce using rule 31 (expr -> LOG10 ( expr ) .)
    ABS             reduce using rule 31 (expr -> LOG10 ( expr ) .)
    SQRT            reduce using rule 31 (expr -> LOG10 ( expr ) .)
    LOG10           reduce using rule 31 (expr -> LOG10 ( expr ) .)
    LOG             reduce using rule 31 (expr -> LOG10 ( expr ) .)
    EXP             reduce using rule 31 (expr -> LOG10 ( expr ) .)
    ATAN            reduce using rule 31 (expr -> LOG10 ( expr ) .)
    COS             reduce using rule 31 (expr -> LOG10 ( expr ) .)
    SIN             reduce using rule 31 (expr -> LOG10 ( expr ) .)
    DEG             reduce using rule 31 (expr -> LOG10 ( expr ) .)
    PHI             reduce using rule 31 (expr -> LOG10 ( expr ) .)
    GAMMA           reduce using rule 31 (expr -> LOG10 ( expr ) .)
    N_E             reduce using rule 31 (expr -> LOG10 ( expr ) .)
    PI              reduce using rule 31 (expr -> LOG10 ( expr ) .)
    ENDWHILE        reduce using rule 31 (expr -> LOG10 ( expr ) .)
    ENDIF           reduce using rule 31 (expr -> LOG10 ( expr ) .)
    )               reduce using rule 31 (expr -> LOG10 ( expr ) .)
    OR              reduce using rule 31 (expr -> LOG10 ( expr ) .)
    AND             reduce using rule 31 (expr -> LOG10 ( expr ) .)


state 106

    (32) expr -> LOG ( expr ) .
    BRANCH          reduce using rule 32 (expr -> LOG ( expr ) .)
    SM_EXP          reduce using rule 32 (expr -> LOG ( expr ) .)
    /               reduce using rule 32 (expr -> LOG ( expr ) .)
    *               reduce using rule 32 (expr -> LOG ( expr ) .)
    -               reduce using rule 32 (expr -> LOG ( expr ) .)
    +               reduce using rule 32 (expr -> LOG ( expr ) .)
    NE              reduce using rule 32 (expr -> LOG ( expr ) .)
    EQ              reduce using rule 32 (expr -> LOG ( expr ) .)
    LE              reduce using rule 32 (expr -> LOG ( expr ) .)
    LT              reduce using rule 32 (expr -> LOG ( expr ) .)
    GE              reduce using rule 32 (expr -> LOG ( expr ) .)
    GT              reduce using rule 32 (expr -> LOG ( expr ) .)
    }               reduce using rule 32 (expr -> LOG ( expr ) .)
    {               reduce using rule 32 (expr -> LOG ( expr ) .)
    PRINTEX         reduce using rule 32 (expr -> LOG ( expr ) .)
    IF              reduce using rule 32 (expr -> LOG ( expr ) .)
    WHILE           reduce using rule 32 (expr -> LOG ( expr ) .)
    (               reduce using rule 32 (expr -> LOG ( expr ) .)
    NAME            reduce using rule 32 (expr -> LOG ( expr ) .)
    NUMBER_F        reduce using rule 32 (expr -> LOG ( expr ) .)
    NUMBER          reduce using rule 32 (expr -> LOG ( expr ) .)
    ABS             reduce using rule 32 (expr -> LOG ( expr ) .)
    SQRT            reduce using rule 32 (expr -> LOG ( expr ) .)
    LOG10           reduce using rule 32 (expr -> LOG ( expr ) .)
    LOG             reduce using rule 32 (expr -> LOG ( expr ) .)
    EXP             reduce using rule 32 (expr -> LOG ( expr ) .)
    ATAN            reduce using rule 32 (expr -> LOG ( expr ) .)
    COS             reduce using rule 32 (expr -> LOG ( expr ) .)
    SIN             reduce using rule 32 (expr -> LOG ( expr ) .)
    DEG             reduce using rule 32 (expr -> LOG ( expr ) .)
    PHI             reduce using rule 32 (expr -> LOG ( expr ) .)
    GAMMA           reduce using rule 32 (expr -> LOG ( expr ) .)
    N_E             reduce using rule 32 (expr -> LOG ( expr ) .)
    PI              reduce using rule 32 (expr -> LOG ( expr ) .)
    ENDWHILE        reduce using rule 32 (expr -> LOG ( expr ) .)
    ENDIF           reduce using rule 32 (expr -> LOG ( expr ) .)
    )               reduce using rule 32 (expr -> LOG ( expr ) .)
    OR              reduce using rule 32 (expr -> LOG ( expr ) .)
    AND             reduce using rule 32 (expr -> LOG ( expr ) .)


state 107

    (33) expr -> EXP ( expr ) .
    BRANCH          reduce using rule 33 (expr -> EXP ( expr ) .)
    SM_EXP          reduce using rule 33 (expr -> EXP ( expr ) .)
    /               reduce using rule 33 (expr -> EXP ( expr ) .)
    *               reduce using rule 33 (expr -> EXP ( expr ) .)
    -               reduce using rule 33 (expr -> EXP ( expr ) .)
    +               reduce using rule 33 (expr -> EXP ( expr ) .)
    NE              reduce using rule 33 (expr -> EXP ( expr ) .)
    EQ              reduce using rule 33 (expr -> EXP ( expr ) .)
    LE              reduce using rule 33 (expr -> EXP ( expr ) .)
    LT              reduce using rule 33 (expr -> EXP ( expr ) .)
    GE              reduce using rule 33 (expr -> EXP ( expr ) .)
    GT              reduce using rule 33 (expr -> EXP ( expr ) .)
    }               reduce using rule 33 (expr -> EXP ( expr ) .)
    {               reduce using rule 33 (expr -> EXP ( expr ) .)
    PRINTEX         reduce using rule 33 (expr -> EXP ( expr ) .)
    IF              reduce using rule 33 (expr -> EXP ( expr ) .)
    WHILE           reduce using rule 33 (expr -> EXP ( expr ) .)
    (               reduce using rule 33 (expr -> EXP ( expr ) .)
    NAME            reduce using rule 33 (expr -> EXP ( expr ) .)
    NUMBER_F        reduce using rule 33 (expr -> EXP ( expr ) .)
    NUMBER          reduce using rule 33 (expr -> EXP ( expr ) .)
    ABS             reduce using rule 33 (expr -> EXP ( expr ) .)
    SQRT            reduce using rule 33 (expr -> EXP ( expr ) .)
    LOG10           reduce using rule 33 (expr -> EXP ( expr ) .)
    LOG             reduce using rule 33 (expr -> EXP ( expr ) .)
    EXP             reduce using rule 33 (expr -> EXP ( expr ) .)
    ATAN            reduce using rule 33 (expr -> EXP ( expr ) .)
    COS             reduce using rule 33 (expr -> EXP ( expr ) .)
    SIN             reduce using rule 33 (expr -> EXP ( expr ) .)
    DEG             reduce using rule 33 (expr -> EXP ( expr ) .)
    PHI             reduce using rule 33 (expr -> EXP ( expr ) .)
    GAMMA           reduce using rule 33 (expr -> EXP ( expr ) .)
    N_E             reduce using rule 33 (expr -> EXP ( expr ) .)
    PI              reduce using rule 33 (expr -> EXP ( expr ) .)
    ENDWHILE        reduce using rule 33 (expr -> EXP ( expr ) .)
    ENDIF           reduce using rule 33 (expr -> EXP ( expr ) .)
    )               reduce using rule 33 (expr -> EXP ( expr ) .)
    OR              reduce using rule 33 (expr -> EXP ( expr ) .)
    AND             reduce using rule 33 (expr -> EXP ( expr ) .)


state 108

    (34) expr -> ATAN ( expr ) .
    BRANCH          reduce using rule 34 (expr -> ATAN ( expr ) .)
    SM_EXP          reduce using rule 34 (expr -> ATAN ( expr ) .)
    /               reduce using rule 34 (expr -> ATAN ( expr ) .)
    *               reduce using rule 34 (expr -> ATAN ( expr ) .)
    -               reduce using rule 34 (expr -> ATAN ( expr ) .)
    +               reduce using rule 34 (expr -> ATAN ( expr ) .)
    NE              reduce using rule 34 (expr -> ATAN ( expr ) .)
    EQ              reduce using rule 34 (expr -> ATAN ( expr ) .)
    LE              reduce using rule 34 (expr -> ATAN ( expr ) .)
    LT              reduce using rule 34 (expr -> ATAN ( expr ) .)
    GE              reduce using rule 34 (expr -> ATAN ( expr ) .)
    GT              reduce using rule 34 (expr -> ATAN ( expr ) .)
    }               reduce using rule 34 (expr -> ATAN ( expr ) .)
    {               reduce using rule 34 (expr -> ATAN ( expr ) .)
    PRINTEX         reduce using rule 34 (expr -> ATAN ( expr ) .)
    IF              reduce using rule 34 (expr -> ATAN ( expr ) .)
    WHILE           reduce using rule 34 (expr -> ATAN ( expr ) .)
    (               reduce using rule 34 (expr -> ATAN ( expr ) .)
    NAME            reduce using rule 34 (expr -> ATAN ( expr ) .)
    NUMBER_F        reduce using rule 34 (expr -> ATAN ( expr ) .)
    NUMBER          reduce using rule 34 (expr -> ATAN ( expr ) .)
    ABS             reduce using rule 34 (expr -> ATAN ( expr ) .)
    SQRT            reduce using rule 34 (expr -> ATAN ( expr ) .)
    LOG10           reduce using rule 34 (expr -> ATAN ( expr ) .)
    LOG             reduce using rule 34 (expr -> ATAN ( expr ) .)
    EXP             reduce using rule 34 (expr -> ATAN ( expr ) .)
    ATAN            reduce using rule 34 (expr -> ATAN ( expr ) .)
    COS             reduce using rule 34 (expr -> ATAN ( expr ) .)
    SIN             reduce using rule 34 (expr -> ATAN ( expr ) .)
    DEG             reduce using rule 34 (expr -> ATAN ( expr ) .)
    PHI             reduce using rule 34 (expr -> ATAN ( expr ) .)
    GAMMA           reduce using rule 34 (expr -> ATAN ( expr ) .)
    N_E             reduce using rule 34 (expr -> ATAN ( expr ) .)
    PI              reduce using rule 34 (expr -> ATAN ( expr ) .)
    ENDWHILE        reduce using rule 34 (expr -> ATAN ( expr ) .)
    ENDIF           reduce using rule 34 (expr -> ATAN ( expr ) .)
    )               reduce using rule 34 (expr -> ATAN ( expr ) .)
    OR              reduce using rule 34 (expr -> ATAN ( expr ) .)
    AND             reduce using rule 34 (expr -> ATAN ( expr ) .)


state 109

    (35) expr -> COS ( expr ) .
    BRANCH          reduce using rule 35 (expr -> COS ( expr ) .)
    SM_EXP          reduce using rule 35 (expr -> COS ( expr ) .)
    /               reduce using rule 35 (expr -> COS ( expr ) .)
    *               reduce using rule 35 (expr -> COS ( expr ) .)
    -               reduce using rule 35 (expr -> COS ( expr ) .)
    +               reduce using rule 35 (expr -> COS ( expr ) .)
    NE              reduce using rule 35 (expr -> COS ( expr ) .)
    EQ              reduce using rule 35 (expr -> COS ( expr ) .)
    LE              reduce using rule 35 (expr -> COS ( expr ) .)
    LT              reduce using rule 35 (expr -> COS ( expr ) .)
    GE              reduce using rule 35 (expr -> COS ( expr ) .)
    GT              reduce using rule 35 (expr -> COS ( expr ) .)
    }               reduce using rule 35 (expr -> COS ( expr ) .)
    {               reduce using rule 35 (expr -> COS ( expr ) .)
    PRINTEX         reduce using rule 35 (expr -> COS ( expr ) .)
    IF              reduce using rule 35 (expr -> COS ( expr ) .)
    WHILE           reduce using rule 35 (expr -> COS ( expr ) .)
    (               reduce using rule 35 (expr -> COS ( expr ) .)
    NAME            reduce using rule 35 (expr -> COS ( expr ) .)
    NUMBER_F        reduce using rule 35 (expr -> COS ( expr ) .)
    NUMBER          reduce using rule 35 (expr -> COS ( expr ) .)
    ABS             reduce using rule 35 (expr -> COS ( expr ) .)
    SQRT            reduce using rule 35 (expr -> COS ( expr ) .)
    LOG10           reduce using rule 35 (expr -> COS ( expr ) .)
    LOG             reduce using rule 35 (expr -> COS ( expr ) .)
    EXP             reduce using rule 35 (expr -> COS ( expr ) .)
    ATAN            reduce using rule 35 (expr -> COS ( expr ) .)
    COS             reduce using rule 35 (expr -> COS ( expr ) .)
    SIN             reduce using rule 35 (expr -> COS ( expr ) .)
    DEG             reduce using rule 35 (expr -> COS ( expr ) .)
    PHI             reduce using rule 35 (expr -> COS ( expr ) .)
    GAMMA           reduce using rule 35 (expr -> COS ( expr ) .)
    N_E             reduce using rule 35 (expr -> COS ( expr ) .)
    PI              reduce using rule 35 (expr -> COS ( expr ) .)
    ENDWHILE        reduce using rule 35 (expr -> COS ( expr ) .)
    ENDIF           reduce using rule 35 (expr -> COS ( expr ) .)
    )               reduce using rule 35 (expr -> COS ( expr ) .)
    OR              reduce using rule 35 (expr -> COS ( expr ) .)
    AND             reduce using rule 35 (expr -> COS ( expr ) .)


state 110

    (36) expr -> SIN ( expr ) .
    BRANCH          reduce using rule 36 (expr -> SIN ( expr ) .)
    SM_EXP          reduce using rule 36 (expr -> SIN ( expr ) .)
    /               reduce using rule 36 (expr -> SIN ( expr ) .)
    *               reduce using rule 36 (expr -> SIN ( expr ) .)
    -               reduce using rule 36 (expr -> SIN ( expr ) .)
    +               reduce using rule 36 (expr -> SIN ( expr ) .)
    NE              reduce using rule 36 (expr -> SIN ( expr ) .)
    EQ              reduce using rule 36 (expr -> SIN ( expr ) .)
    LE              reduce using rule 36 (expr -> SIN ( expr ) .)
    LT              reduce using rule 36 (expr -> SIN ( expr ) .)
    GE              reduce using rule 36 (expr -> SIN ( expr ) .)
    GT              reduce using rule 36 (expr -> SIN ( expr ) .)
    }               reduce using rule 36 (expr -> SIN ( expr ) .)
    {               reduce using rule 36 (expr -> SIN ( expr ) .)
    PRINTEX         reduce using rule 36 (expr -> SIN ( expr ) .)
    IF              reduce using rule 36 (expr -> SIN ( expr ) .)
    WHILE           reduce using rule 36 (expr -> SIN ( expr ) .)
    (               reduce using rule 36 (expr -> SIN ( expr ) .)
    NAME            reduce using rule 36 (expr -> SIN ( expr ) .)
    NUMBER_F        reduce using rule 36 (expr -> SIN ( expr ) .)
    NUMBER          reduce using rule 36 (expr -> SIN ( expr ) .)
    ABS             reduce using rule 36 (expr -> SIN ( expr ) .)
    SQRT            reduce using rule 36 (expr -> SIN ( expr ) .)
    LOG10           reduce using rule 36 (expr -> SIN ( expr ) .)
    LOG             reduce using rule 36 (expr -> SIN ( expr ) .)
    EXP             reduce using rule 36 (expr -> SIN ( expr ) .)
    ATAN            reduce using rule 36 (expr -> SIN ( expr ) .)
    COS             reduce using rule 36 (expr -> SIN ( expr ) .)
    SIN             reduce using rule 36 (expr -> SIN ( expr ) .)
    DEG             reduce using rule 36 (expr -> SIN ( expr ) .)
    PHI             reduce using rule 36 (expr -> SIN ( expr ) .)
    GAMMA           reduce using rule 36 (expr -> SIN ( expr ) .)
    N_E             reduce using rule 36 (expr -> SIN ( expr ) .)
    PI              reduce using rule 36 (expr -> SIN ( expr ) .)
    ENDWHILE        reduce using rule 36 (expr -> SIN ( expr ) .)
    ENDIF           reduce using rule 36 (expr -> SIN ( expr ) .)
    )               reduce using rule 36 (expr -> SIN ( expr ) .)
    OR              reduce using rule 36 (expr -> SIN ( expr ) .)
    AND             reduce using rule 36 (expr -> SIN ( expr ) .)


Conflicts:

shift/reduce conflict for BRANCH in state 5 resolved as shift
shift/reduce conflict for - in state 47 resolved as shift
shift/reduce conflict for - in state 67 resolved as shift
shift/reduce conflict for - in state 96 resolved as shift
shift/reduce conflict for - in state 97 resolved as shift
shift/reduce conflict for - in state 98 resolved as shift
shift/reduce conflict for - in state 99 resolved as shift
shift/reduce conflict for - in state 100 resolved as shift
shift/reduce conflict for - in state 101 resolved as shift