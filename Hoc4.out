Grammar:

Rule 0     S' -> listStmt
Rule 1     listStmt -> listStmt assign BRANCH
Rule 2     listStmt -> listStmt statment BRANCH
Rule 3     listStmt -> listStmt expr BRANCH
Rule 4     listStmt -> listStmt BRANCH
Rule 5     listStmt -> <empty>
Rule 6     assign -> NAME = expr
Rule 7     statment -> switchCode ( NAME ) superSwitchList
Rule 8     statment -> ifCode superCondition statment ELSE statment end
Rule 9     statment -> ifCode superCondition statment end
Rule 10    statment -> whileCode superCondition statment end
Rule 11    statment -> { statmentList }
Rule 12    statment -> PRINTEX STRING
Rule 13    statment -> PRINTEX expr
Rule 14    statment -> assign
Rule 15    statment -> expr
Rule 16    superSwitchList -> { BRANCH switchList }
Rule 17    switchList -> <empty>
Rule 18    switchList -> switchList caseSwitch
Rule 19    caseSwitch -> DEFAULT : BRANCH statmentList ENDCASE BRANCH
Rule 20    caseSwitch -> CASE expr : BRANCH statmentList ENDCASE BRANCH
Rule 21    whileCode -> WHILE
Rule 22    ifCode -> IF
Rule 23    switchCode -> SWITCH
Rule 24    end -> <empty>
Rule 25    statmentList -> statmentList statment
Rule 26    statmentList -> statmentList BRANCH
Rule 27    statmentList -> <empty>
Rule 28    expr -> ( expr )
Rule 29    expr -> expr SM_EXP expr  [precedence=right, level=4]
Rule 30    expr -> expr / expr  [precedence=left, level=2]
Rule 31    expr -> expr * expr  [precedence=left, level=2]
Rule 32    expr -> expr - expr  [precedence=left, level=1]
Rule 33    expr -> expr + expr  [precedence=left, level=1]
Rule 34    expr -> - expr  [precedence=right, level=3]
Rule 35    expr -> NAME
Rule 36    expr -> NUMBER_F
Rule 37    expr -> NUMBER
Rule 38    expr -> ABS ( expr )
Rule 39    expr -> SQRT ( expr )
Rule 40    expr -> LOG10 ( expr )
Rule 41    expr -> LOG ( expr )
Rule 42    expr -> EXP ( expr )
Rule 43    expr -> ATAN ( expr )
Rule 44    expr -> COS ( expr )
Rule 45    expr -> SIN ( expr )
Rule 46    expr -> DEG
Rule 47    expr -> PHI
Rule 48    expr -> GAMMA
Rule 49    expr -> N_E
Rule 50    expr -> PI
Rule 51    condition -> expr NE expr
Rule 52    condition -> expr EQ expr
Rule 53    condition -> expr LE expr
Rule 54    condition -> expr LT expr
Rule 55    condition -> expr GE expr
Rule 56    condition -> expr GT expr
Rule 57    superCondition -> ( conditionLogical )
Rule 58    conditionLogical -> condition
Rule 59    conditionLogical -> NOT condition
Rule 60    conditionLogical -> condition OR condition
Rule 61    conditionLogical -> condition AND condition

Terminals, with rules where they appear:

(                    : 7 28 38 39 40 41 42 43 44 45 57
)                    : 7 28 38 39 40 41 42 43 44 45 57
*                    : 31
+                    : 33
-                    : 32 34
/                    : 30
:                    : 19 20
=                    : 6
ABS                  : 38
AND                  : 61
ATAN                 : 43
BRANCH               : 1 2 3 4 16 19 19 20 20 26
CASE                 : 20
COS                  : 44
DEFAULT              : 19
DEG                  : 46
ELSE                 : 8
ENDCASE              : 19 20
EQ                   : 52
EXP                  : 42
GAMMA                : 48
GE                   : 55
GT                   : 56
IF                   : 22
LE                   : 53
LOG                  : 41
LOG10                : 40
LT                   : 54
NAME                 : 6 7 35
NE                   : 51
NOT                  : 59
NUMBER               : 37
NUMBER_F             : 36
N_E                  : 49
OR                   : 60
PHI                  : 47
PI                   : 50
PRINTEX              : 12 13
SIN                  : 45
SM_EXP               : 29
SQRT                 : 39
STRING               : 12
SWITCH               : 23
WHILE                : 21
error                : 
{                    : 11 16
}                    : 11 16

Nonterminals, with rules where they appear:

assign               : 1 14
caseSwitch           : 18
condition            : 58 59 60 60 61 61
conditionLogical     : 57
end                  : 8 9 10
expr                 : 3 6 13 15 20 28 29 29 30 30 31 31 32 32 33 33 34 38 39 40 41 42 43 44 45 51 51 52 52 53 53 54 54 55 55 56 56
ifCode               : 8 9
listStmt             : 1 2 3 4 0
statment             : 2 8 8 9 10 25
statmentList         : 11 19 20 25 26
superCondition       : 8 9 10
superSwitchList      : 7
switchCode           : 7
switchList           : 16 18
whileCode            : 10


state 0

    (0) S' -> . listStmt
    (1) listStmt -> . listStmt assign BRANCH
    (2) listStmt -> . listStmt statment BRANCH
    (3) listStmt -> . listStmt expr BRANCH
    (4) listStmt -> . listStmt BRANCH
    (5) listStmt -> .
    BRANCH          reduce using rule 5 (listStmt -> .)
    NAME            reduce using rule 5 (listStmt -> .)
    {               reduce using rule 5 (listStmt -> .)
    PRINTEX         reduce using rule 5 (listStmt -> .)
    (               reduce using rule 5 (listStmt -> .)
    -               reduce using rule 5 (listStmt -> .)
    NUMBER_F        reduce using rule 5 (listStmt -> .)
    NUMBER          reduce using rule 5 (listStmt -> .)
    ABS             reduce using rule 5 (listStmt -> .)
    SQRT            reduce using rule 5 (listStmt -> .)
    LOG10           reduce using rule 5 (listStmt -> .)
    LOG             reduce using rule 5 (listStmt -> .)
    EXP             reduce using rule 5 (listStmt -> .)
    ATAN            reduce using rule 5 (listStmt -> .)
    COS             reduce using rule 5 (listStmt -> .)
    SIN             reduce using rule 5 (listStmt -> .)
    DEG             reduce using rule 5 (listStmt -> .)
    PHI             reduce using rule 5 (listStmt -> .)
    GAMMA           reduce using rule 5 (listStmt -> .)
    N_E             reduce using rule 5 (listStmt -> .)
    PI              reduce using rule 5 (listStmt -> .)
    SWITCH          reduce using rule 5 (listStmt -> .)
    IF              reduce using rule 5 (listStmt -> .)
    WHILE           reduce using rule 5 (listStmt -> .)
    $end            reduce using rule 5 (listStmt -> .)

    listStmt                       shift and go to state 1

state 1

    (0) S' -> listStmt .
    (1) listStmt -> listStmt . assign BRANCH
    (2) listStmt -> listStmt . statment BRANCH
    (3) listStmt -> listStmt . expr BRANCH
    (4) listStmt -> listStmt . BRANCH
    (6) assign -> . NAME = expr
    (7) statment -> . switchCode ( NAME ) superSwitchList
    (8) statment -> . ifCode superCondition statment ELSE statment end
    (9) statment -> . ifCode superCondition statment end
    (10) statment -> . whileCode superCondition statment end
    (11) statment -> . { statmentList }
    (12) statment -> . PRINTEX STRING
    (13) statment -> . PRINTEX expr
    (14) statment -> . assign
    (15) statment -> . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (23) switchCode -> . SWITCH
    (22) ifCode -> . IF
    (21) whileCode -> . WHILE
    BRANCH          shift and go to state 3
    NAME            shift and go to state 6
    {               shift and go to state 11
    PRINTEX         shift and go to state 12
    (               shift and go to state 8
    -               shift and go to state 13
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31

    assign                         shift and go to state 2
    statment                       shift and go to state 4
    expr                           shift and go to state 5
    switchCode                     shift and go to state 7
    ifCode                         shift and go to state 9
    whileCode                      shift and go to state 10

state 2

    (1) listStmt -> listStmt assign . BRANCH
    (14) statment -> assign .
  ! shift/reduce conflict for BRANCH resolved as shift
    BRANCH          shift and go to state 32


state 3

    (4) listStmt -> listStmt BRANCH .
    BRANCH          reduce using rule 4 (listStmt -> listStmt BRANCH .)
    NAME            reduce using rule 4 (listStmt -> listStmt BRANCH .)
    {               reduce using rule 4 (listStmt -> listStmt BRANCH .)
    PRINTEX         reduce using rule 4 (listStmt -> listStmt BRANCH .)
    (               reduce using rule 4 (listStmt -> listStmt BRANCH .)
    -               reduce using rule 4 (listStmt -> listStmt BRANCH .)
    NUMBER_F        reduce using rule 4 (listStmt -> listStmt BRANCH .)
    NUMBER          reduce using rule 4 (listStmt -> listStmt BRANCH .)
    ABS             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    SQRT            reduce using rule 4 (listStmt -> listStmt BRANCH .)
    LOG10           reduce using rule 4 (listStmt -> listStmt BRANCH .)
    LOG             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    EXP             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    ATAN            reduce using rule 4 (listStmt -> listStmt BRANCH .)
    COS             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    SIN             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    DEG             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    PHI             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    GAMMA           reduce using rule 4 (listStmt -> listStmt BRANCH .)
    N_E             reduce using rule 4 (listStmt -> listStmt BRANCH .)
    PI              reduce using rule 4 (listStmt -> listStmt BRANCH .)
    SWITCH          reduce using rule 4 (listStmt -> listStmt BRANCH .)
    IF              reduce using rule 4 (listStmt -> listStmt BRANCH .)
    WHILE           reduce using rule 4 (listStmt -> listStmt BRANCH .)
    $end            reduce using rule 4 (listStmt -> listStmt BRANCH .)


state 4

    (2) listStmt -> listStmt statment . BRANCH
    BRANCH          shift and go to state 33


state 5

    (3) listStmt -> listStmt expr . BRANCH
    (15) statment -> expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
  ! shift/reduce conflict for BRANCH resolved as shift
    BRANCH          shift and go to state 34
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 6

    (6) assign -> NAME . = expr
    (35) expr -> NAME .
    =               shift and go to state 40
    BRANCH          reduce using rule 35 (expr -> NAME .)
    SM_EXP          reduce using rule 35 (expr -> NAME .)
    /               reduce using rule 35 (expr -> NAME .)
    *               reduce using rule 35 (expr -> NAME .)
    -               reduce using rule 35 (expr -> NAME .)
    +               reduce using rule 35 (expr -> NAME .)
    ELSE            reduce using rule 35 (expr -> NAME .)
    }               reduce using rule 35 (expr -> NAME .)
    {               reduce using rule 35 (expr -> NAME .)
    PRINTEX         reduce using rule 35 (expr -> NAME .)
    SWITCH          reduce using rule 35 (expr -> NAME .)
    IF              reduce using rule 35 (expr -> NAME .)
    WHILE           reduce using rule 35 (expr -> NAME .)
    NAME            reduce using rule 35 (expr -> NAME .)
    (               reduce using rule 35 (expr -> NAME .)
    NUMBER_F        reduce using rule 35 (expr -> NAME .)
    NUMBER          reduce using rule 35 (expr -> NAME .)
    ABS             reduce using rule 35 (expr -> NAME .)
    SQRT            reduce using rule 35 (expr -> NAME .)
    LOG10           reduce using rule 35 (expr -> NAME .)
    LOG             reduce using rule 35 (expr -> NAME .)
    EXP             reduce using rule 35 (expr -> NAME .)
    ATAN            reduce using rule 35 (expr -> NAME .)
    COS             reduce using rule 35 (expr -> NAME .)
    SIN             reduce using rule 35 (expr -> NAME .)
    DEG             reduce using rule 35 (expr -> NAME .)
    PHI             reduce using rule 35 (expr -> NAME .)
    GAMMA           reduce using rule 35 (expr -> NAME .)
    N_E             reduce using rule 35 (expr -> NAME .)
    PI              reduce using rule 35 (expr -> NAME .)
    ENDCASE         reduce using rule 35 (expr -> NAME .)


state 7

    (7) statment -> switchCode . ( NAME ) superSwitchList
    (               shift and go to state 41


state 8

    (28) expr -> ( . expr )
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 42

state 9

    (8) statment -> ifCode . superCondition statment ELSE statment end
    (9) statment -> ifCode . superCondition statment end
    (57) superCondition -> . ( conditionLogical )
    (               shift and go to state 45

    superCondition                 shift and go to state 44

state 10

    (10) statment -> whileCode . superCondition statment end
    (57) superCondition -> . ( conditionLogical )
    (               shift and go to state 45

    superCondition                 shift and go to state 46

state 11

    (11) statment -> { . statmentList }
    (25) statmentList -> . statmentList statment
    (26) statmentList -> . statmentList BRANCH
    (27) statmentList -> .
    }               reduce using rule 27 (statmentList -> .)
    BRANCH          reduce using rule 27 (statmentList -> .)
    {               reduce using rule 27 (statmentList -> .)
    PRINTEX         reduce using rule 27 (statmentList -> .)
    SWITCH          reduce using rule 27 (statmentList -> .)
    IF              reduce using rule 27 (statmentList -> .)
    WHILE           reduce using rule 27 (statmentList -> .)
    NAME            reduce using rule 27 (statmentList -> .)
    (               reduce using rule 27 (statmentList -> .)
    -               reduce using rule 27 (statmentList -> .)
    NUMBER_F        reduce using rule 27 (statmentList -> .)
    NUMBER          reduce using rule 27 (statmentList -> .)
    ABS             reduce using rule 27 (statmentList -> .)
    SQRT            reduce using rule 27 (statmentList -> .)
    LOG10           reduce using rule 27 (statmentList -> .)
    LOG             reduce using rule 27 (statmentList -> .)
    EXP             reduce using rule 27 (statmentList -> .)
    ATAN            reduce using rule 27 (statmentList -> .)
    COS             reduce using rule 27 (statmentList -> .)
    SIN             reduce using rule 27 (statmentList -> .)
    DEG             reduce using rule 27 (statmentList -> .)
    PHI             reduce using rule 27 (statmentList -> .)
    GAMMA           reduce using rule 27 (statmentList -> .)
    N_E             reduce using rule 27 (statmentList -> .)
    PI              reduce using rule 27 (statmentList -> .)

    statmentList                   shift and go to state 47

state 12

    (12) statment -> PRINTEX . STRING
    (13) statment -> PRINTEX . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    STRING          shift and go to state 48
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 49

state 13

    (34) expr -> - . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 50

state 14

    (36) expr -> NUMBER_F .
    BRANCH          reduce using rule 36 (expr -> NUMBER_F .)
    SM_EXP          reduce using rule 36 (expr -> NUMBER_F .)
    /               reduce using rule 36 (expr -> NUMBER_F .)
    *               reduce using rule 36 (expr -> NUMBER_F .)
    -               reduce using rule 36 (expr -> NUMBER_F .)
    +               reduce using rule 36 (expr -> NUMBER_F .)
    )               reduce using rule 36 (expr -> NUMBER_F .)
    ELSE            reduce using rule 36 (expr -> NUMBER_F .)
    }               reduce using rule 36 (expr -> NUMBER_F .)
    {               reduce using rule 36 (expr -> NUMBER_F .)
    PRINTEX         reduce using rule 36 (expr -> NUMBER_F .)
    SWITCH          reduce using rule 36 (expr -> NUMBER_F .)
    IF              reduce using rule 36 (expr -> NUMBER_F .)
    WHILE           reduce using rule 36 (expr -> NUMBER_F .)
    NAME            reduce using rule 36 (expr -> NUMBER_F .)
    (               reduce using rule 36 (expr -> NUMBER_F .)
    NUMBER_F        reduce using rule 36 (expr -> NUMBER_F .)
    NUMBER          reduce using rule 36 (expr -> NUMBER_F .)
    ABS             reduce using rule 36 (expr -> NUMBER_F .)
    SQRT            reduce using rule 36 (expr -> NUMBER_F .)
    LOG10           reduce using rule 36 (expr -> NUMBER_F .)
    LOG             reduce using rule 36 (expr -> NUMBER_F .)
    EXP             reduce using rule 36 (expr -> NUMBER_F .)
    ATAN            reduce using rule 36 (expr -> NUMBER_F .)
    COS             reduce using rule 36 (expr -> NUMBER_F .)
    SIN             reduce using rule 36 (expr -> NUMBER_F .)
    DEG             reduce using rule 36 (expr -> NUMBER_F .)
    PHI             reduce using rule 36 (expr -> NUMBER_F .)
    GAMMA           reduce using rule 36 (expr -> NUMBER_F .)
    N_E             reduce using rule 36 (expr -> NUMBER_F .)
    PI              reduce using rule 36 (expr -> NUMBER_F .)
    ENDCASE         reduce using rule 36 (expr -> NUMBER_F .)
    NE              reduce using rule 36 (expr -> NUMBER_F .)
    EQ              reduce using rule 36 (expr -> NUMBER_F .)
    LE              reduce using rule 36 (expr -> NUMBER_F .)
    LT              reduce using rule 36 (expr -> NUMBER_F .)
    GE              reduce using rule 36 (expr -> NUMBER_F .)
    GT              reduce using rule 36 (expr -> NUMBER_F .)
    OR              reduce using rule 36 (expr -> NUMBER_F .)
    AND             reduce using rule 36 (expr -> NUMBER_F .)
    :               reduce using rule 36 (expr -> NUMBER_F .)


state 15

    (37) expr -> NUMBER .
    BRANCH          reduce using rule 37 (expr -> NUMBER .)
    SM_EXP          reduce using rule 37 (expr -> NUMBER .)
    /               reduce using rule 37 (expr -> NUMBER .)
    *               reduce using rule 37 (expr -> NUMBER .)
    -               reduce using rule 37 (expr -> NUMBER .)
    +               reduce using rule 37 (expr -> NUMBER .)
    )               reduce using rule 37 (expr -> NUMBER .)
    ELSE            reduce using rule 37 (expr -> NUMBER .)
    }               reduce using rule 37 (expr -> NUMBER .)
    {               reduce using rule 37 (expr -> NUMBER .)
    PRINTEX         reduce using rule 37 (expr -> NUMBER .)
    SWITCH          reduce using rule 37 (expr -> NUMBER .)
    IF              reduce using rule 37 (expr -> NUMBER .)
    WHILE           reduce using rule 37 (expr -> NUMBER .)
    NAME            reduce using rule 37 (expr -> NUMBER .)
    (               reduce using rule 37 (expr -> NUMBER .)
    NUMBER_F        reduce using rule 37 (expr -> NUMBER .)
    NUMBER          reduce using rule 37 (expr -> NUMBER .)
    ABS             reduce using rule 37 (expr -> NUMBER .)
    SQRT            reduce using rule 37 (expr -> NUMBER .)
    LOG10           reduce using rule 37 (expr -> NUMBER .)
    LOG             reduce using rule 37 (expr -> NUMBER .)
    EXP             reduce using rule 37 (expr -> NUMBER .)
    ATAN            reduce using rule 37 (expr -> NUMBER .)
    COS             reduce using rule 37 (expr -> NUMBER .)
    SIN             reduce using rule 37 (expr -> NUMBER .)
    DEG             reduce using rule 37 (expr -> NUMBER .)
    PHI             reduce using rule 37 (expr -> NUMBER .)
    GAMMA           reduce using rule 37 (expr -> NUMBER .)
    N_E             reduce using rule 37 (expr -> NUMBER .)
    PI              reduce using rule 37 (expr -> NUMBER .)
    ENDCASE         reduce using rule 37 (expr -> NUMBER .)
    NE              reduce using rule 37 (expr -> NUMBER .)
    EQ              reduce using rule 37 (expr -> NUMBER .)
    LE              reduce using rule 37 (expr -> NUMBER .)
    LT              reduce using rule 37 (expr -> NUMBER .)
    GE              reduce using rule 37 (expr -> NUMBER .)
    GT              reduce using rule 37 (expr -> NUMBER .)
    OR              reduce using rule 37 (expr -> NUMBER .)
    AND             reduce using rule 37 (expr -> NUMBER .)
    :               reduce using rule 37 (expr -> NUMBER .)


state 16

    (38) expr -> ABS . ( expr )
    (               shift and go to state 51


state 17

    (39) expr -> SQRT . ( expr )
    (               shift and go to state 52


state 18

    (40) expr -> LOG10 . ( expr )
    (               shift and go to state 53


state 19

    (41) expr -> LOG . ( expr )
    (               shift and go to state 54


state 20

    (42) expr -> EXP . ( expr )
    (               shift and go to state 55


state 21

    (43) expr -> ATAN . ( expr )
    (               shift and go to state 56


state 22

    (44) expr -> COS . ( expr )
    (               shift and go to state 57


state 23

    (45) expr -> SIN . ( expr )
    (               shift and go to state 58


state 24

    (46) expr -> DEG .
    BRANCH          reduce using rule 46 (expr -> DEG .)
    SM_EXP          reduce using rule 46 (expr -> DEG .)
    /               reduce using rule 46 (expr -> DEG .)
    *               reduce using rule 46 (expr -> DEG .)
    -               reduce using rule 46 (expr -> DEG .)
    +               reduce using rule 46 (expr -> DEG .)
    )               reduce using rule 46 (expr -> DEG .)
    ELSE            reduce using rule 46 (expr -> DEG .)
    }               reduce using rule 46 (expr -> DEG .)
    {               reduce using rule 46 (expr -> DEG .)
    PRINTEX         reduce using rule 46 (expr -> DEG .)
    SWITCH          reduce using rule 46 (expr -> DEG .)
    IF              reduce using rule 46 (expr -> DEG .)
    WHILE           reduce using rule 46 (expr -> DEG .)
    NAME            reduce using rule 46 (expr -> DEG .)
    (               reduce using rule 46 (expr -> DEG .)
    NUMBER_F        reduce using rule 46 (expr -> DEG .)
    NUMBER          reduce using rule 46 (expr -> DEG .)
    ABS             reduce using rule 46 (expr -> DEG .)
    SQRT            reduce using rule 46 (expr -> DEG .)
    LOG10           reduce using rule 46 (expr -> DEG .)
    LOG             reduce using rule 46 (expr -> DEG .)
    EXP             reduce using rule 46 (expr -> DEG .)
    ATAN            reduce using rule 46 (expr -> DEG .)
    COS             reduce using rule 46 (expr -> DEG .)
    SIN             reduce using rule 46 (expr -> DEG .)
    DEG             reduce using rule 46 (expr -> DEG .)
    PHI             reduce using rule 46 (expr -> DEG .)
    GAMMA           reduce using rule 46 (expr -> DEG .)
    N_E             reduce using rule 46 (expr -> DEG .)
    PI              reduce using rule 46 (expr -> DEG .)
    ENDCASE         reduce using rule 46 (expr -> DEG .)
    NE              reduce using rule 46 (expr -> DEG .)
    EQ              reduce using rule 46 (expr -> DEG .)
    LE              reduce using rule 46 (expr -> DEG .)
    LT              reduce using rule 46 (expr -> DEG .)
    GE              reduce using rule 46 (expr -> DEG .)
    GT              reduce using rule 46 (expr -> DEG .)
    OR              reduce using rule 46 (expr -> DEG .)
    AND             reduce using rule 46 (expr -> DEG .)
    :               reduce using rule 46 (expr -> DEG .)


state 25

    (47) expr -> PHI .
    BRANCH          reduce using rule 47 (expr -> PHI .)
    SM_EXP          reduce using rule 47 (expr -> PHI .)
    /               reduce using rule 47 (expr -> PHI .)
    *               reduce using rule 47 (expr -> PHI .)
    -               reduce using rule 47 (expr -> PHI .)
    +               reduce using rule 47 (expr -> PHI .)
    )               reduce using rule 47 (expr -> PHI .)
    ELSE            reduce using rule 47 (expr -> PHI .)
    }               reduce using rule 47 (expr -> PHI .)
    {               reduce using rule 47 (expr -> PHI .)
    PRINTEX         reduce using rule 47 (expr -> PHI .)
    SWITCH          reduce using rule 47 (expr -> PHI .)
    IF              reduce using rule 47 (expr -> PHI .)
    WHILE           reduce using rule 47 (expr -> PHI .)
    NAME            reduce using rule 47 (expr -> PHI .)
    (               reduce using rule 47 (expr -> PHI .)
    NUMBER_F        reduce using rule 47 (expr -> PHI .)
    NUMBER          reduce using rule 47 (expr -> PHI .)
    ABS             reduce using rule 47 (expr -> PHI .)
    SQRT            reduce using rule 47 (expr -> PHI .)
    LOG10           reduce using rule 47 (expr -> PHI .)
    LOG             reduce using rule 47 (expr -> PHI .)
    EXP             reduce using rule 47 (expr -> PHI .)
    ATAN            reduce using rule 47 (expr -> PHI .)
    COS             reduce using rule 47 (expr -> PHI .)
    SIN             reduce using rule 47 (expr -> PHI .)
    DEG             reduce using rule 47 (expr -> PHI .)
    PHI             reduce using rule 47 (expr -> PHI .)
    GAMMA           reduce using rule 47 (expr -> PHI .)
    N_E             reduce using rule 47 (expr -> PHI .)
    PI              reduce using rule 47 (expr -> PHI .)
    ENDCASE         reduce using rule 47 (expr -> PHI .)
    NE              reduce using rule 47 (expr -> PHI .)
    EQ              reduce using rule 47 (expr -> PHI .)
    LE              reduce using rule 47 (expr -> PHI .)
    LT              reduce using rule 47 (expr -> PHI .)
    GE              reduce using rule 47 (expr -> PHI .)
    GT              reduce using rule 47 (expr -> PHI .)
    OR              reduce using rule 47 (expr -> PHI .)
    AND             reduce using rule 47 (expr -> PHI .)
    :               reduce using rule 47 (expr -> PHI .)


state 26

    (48) expr -> GAMMA .
    BRANCH          reduce using rule 48 (expr -> GAMMA .)
    SM_EXP          reduce using rule 48 (expr -> GAMMA .)
    /               reduce using rule 48 (expr -> GAMMA .)
    *               reduce using rule 48 (expr -> GAMMA .)
    -               reduce using rule 48 (expr -> GAMMA .)
    +               reduce using rule 48 (expr -> GAMMA .)
    )               reduce using rule 48 (expr -> GAMMA .)
    ELSE            reduce using rule 48 (expr -> GAMMA .)
    }               reduce using rule 48 (expr -> GAMMA .)
    {               reduce using rule 48 (expr -> GAMMA .)
    PRINTEX         reduce using rule 48 (expr -> GAMMA .)
    SWITCH          reduce using rule 48 (expr -> GAMMA .)
    IF              reduce using rule 48 (expr -> GAMMA .)
    WHILE           reduce using rule 48 (expr -> GAMMA .)
    NAME            reduce using rule 48 (expr -> GAMMA .)
    (               reduce using rule 48 (expr -> GAMMA .)
    NUMBER_F        reduce using rule 48 (expr -> GAMMA .)
    NUMBER          reduce using rule 48 (expr -> GAMMA .)
    ABS             reduce using rule 48 (expr -> GAMMA .)
    SQRT            reduce using rule 48 (expr -> GAMMA .)
    LOG10           reduce using rule 48 (expr -> GAMMA .)
    LOG             reduce using rule 48 (expr -> GAMMA .)
    EXP             reduce using rule 48 (expr -> GAMMA .)
    ATAN            reduce using rule 48 (expr -> GAMMA .)
    COS             reduce using rule 48 (expr -> GAMMA .)
    SIN             reduce using rule 48 (expr -> GAMMA .)
    DEG             reduce using rule 48 (expr -> GAMMA .)
    PHI             reduce using rule 48 (expr -> GAMMA .)
    GAMMA           reduce using rule 48 (expr -> GAMMA .)
    N_E             reduce using rule 48 (expr -> GAMMA .)
    PI              reduce using rule 48 (expr -> GAMMA .)
    ENDCASE         reduce using rule 48 (expr -> GAMMA .)
    NE              reduce using rule 48 (expr -> GAMMA .)
    EQ              reduce using rule 48 (expr -> GAMMA .)
    LE              reduce using rule 48 (expr -> GAMMA .)
    LT              reduce using rule 48 (expr -> GAMMA .)
    GE              reduce using rule 48 (expr -> GAMMA .)
    GT              reduce using rule 48 (expr -> GAMMA .)
    OR              reduce using rule 48 (expr -> GAMMA .)
    AND             reduce using rule 48 (expr -> GAMMA .)
    :               reduce using rule 48 (expr -> GAMMA .)


state 27

    (49) expr -> N_E .
    BRANCH          reduce using rule 49 (expr -> N_E .)
    SM_EXP          reduce using rule 49 (expr -> N_E .)
    /               reduce using rule 49 (expr -> N_E .)
    *               reduce using rule 49 (expr -> N_E .)
    -               reduce using rule 49 (expr -> N_E .)
    +               reduce using rule 49 (expr -> N_E .)
    )               reduce using rule 49 (expr -> N_E .)
    ELSE            reduce using rule 49 (expr -> N_E .)
    }               reduce using rule 49 (expr -> N_E .)
    {               reduce using rule 49 (expr -> N_E .)
    PRINTEX         reduce using rule 49 (expr -> N_E .)
    SWITCH          reduce using rule 49 (expr -> N_E .)
    IF              reduce using rule 49 (expr -> N_E .)
    WHILE           reduce using rule 49 (expr -> N_E .)
    NAME            reduce using rule 49 (expr -> N_E .)
    (               reduce using rule 49 (expr -> N_E .)
    NUMBER_F        reduce using rule 49 (expr -> N_E .)
    NUMBER          reduce using rule 49 (expr -> N_E .)
    ABS             reduce using rule 49 (expr -> N_E .)
    SQRT            reduce using rule 49 (expr -> N_E .)
    LOG10           reduce using rule 49 (expr -> N_E .)
    LOG             reduce using rule 49 (expr -> N_E .)
    EXP             reduce using rule 49 (expr -> N_E .)
    ATAN            reduce using rule 49 (expr -> N_E .)
    COS             reduce using rule 49 (expr -> N_E .)
    SIN             reduce using rule 49 (expr -> N_E .)
    DEG             reduce using rule 49 (expr -> N_E .)
    PHI             reduce using rule 49 (expr -> N_E .)
    GAMMA           reduce using rule 49 (expr -> N_E .)
    N_E             reduce using rule 49 (expr -> N_E .)
    PI              reduce using rule 49 (expr -> N_E .)
    ENDCASE         reduce using rule 49 (expr -> N_E .)
    NE              reduce using rule 49 (expr -> N_E .)
    EQ              reduce using rule 49 (expr -> N_E .)
    LE              reduce using rule 49 (expr -> N_E .)
    LT              reduce using rule 49 (expr -> N_E .)
    GE              reduce using rule 49 (expr -> N_E .)
    GT              reduce using rule 49 (expr -> N_E .)
    OR              reduce using rule 49 (expr -> N_E .)
    AND             reduce using rule 49 (expr -> N_E .)
    :               reduce using rule 49 (expr -> N_E .)


state 28

    (50) expr -> PI .
    BRANCH          reduce using rule 50 (expr -> PI .)
    SM_EXP          reduce using rule 50 (expr -> PI .)
    /               reduce using rule 50 (expr -> PI .)
    *               reduce using rule 50 (expr -> PI .)
    -               reduce using rule 50 (expr -> PI .)
    +               reduce using rule 50 (expr -> PI .)
    )               reduce using rule 50 (expr -> PI .)
    ELSE            reduce using rule 50 (expr -> PI .)
    }               reduce using rule 50 (expr -> PI .)
    {               reduce using rule 50 (expr -> PI .)
    PRINTEX         reduce using rule 50 (expr -> PI .)
    SWITCH          reduce using rule 50 (expr -> PI .)
    IF              reduce using rule 50 (expr -> PI .)
    WHILE           reduce using rule 50 (expr -> PI .)
    NAME            reduce using rule 50 (expr -> PI .)
    (               reduce using rule 50 (expr -> PI .)
    NUMBER_F        reduce using rule 50 (expr -> PI .)
    NUMBER          reduce using rule 50 (expr -> PI .)
    ABS             reduce using rule 50 (expr -> PI .)
    SQRT            reduce using rule 50 (expr -> PI .)
    LOG10           reduce using rule 50 (expr -> PI .)
    LOG             reduce using rule 50 (expr -> PI .)
    EXP             reduce using rule 50 (expr -> PI .)
    ATAN            reduce using rule 50 (expr -> PI .)
    COS             reduce using rule 50 (expr -> PI .)
    SIN             reduce using rule 50 (expr -> PI .)
    DEG             reduce using rule 50 (expr -> PI .)
    PHI             reduce using rule 50 (expr -> PI .)
    GAMMA           reduce using rule 50 (expr -> PI .)
    N_E             reduce using rule 50 (expr -> PI .)
    PI              reduce using rule 50 (expr -> PI .)
    ENDCASE         reduce using rule 50 (expr -> PI .)
    NE              reduce using rule 50 (expr -> PI .)
    EQ              reduce using rule 50 (expr -> PI .)
    LE              reduce using rule 50 (expr -> PI .)
    LT              reduce using rule 50 (expr -> PI .)
    GE              reduce using rule 50 (expr -> PI .)
    GT              reduce using rule 50 (expr -> PI .)
    OR              reduce using rule 50 (expr -> PI .)
    AND             reduce using rule 50 (expr -> PI .)
    :               reduce using rule 50 (expr -> PI .)


state 29

    (23) switchCode -> SWITCH .
    (               reduce using rule 23 (switchCode -> SWITCH .)


state 30

    (22) ifCode -> IF .
    (               reduce using rule 22 (ifCode -> IF .)


state 31

    (21) whileCode -> WHILE .
    (               reduce using rule 21 (whileCode -> WHILE .)


state 32

    (1) listStmt -> listStmt assign BRANCH .
    BRANCH          reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    NAME            reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    {               reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    PRINTEX         reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    (               reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    -               reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    NUMBER_F        reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    NUMBER          reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    ABS             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    SQRT            reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    LOG10           reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    LOG             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    EXP             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    ATAN            reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    COS             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    SIN             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    DEG             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    PHI             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    GAMMA           reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    N_E             reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    PI              reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    SWITCH          reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    IF              reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    WHILE           reduce using rule 1 (listStmt -> listStmt assign BRANCH .)
    $end            reduce using rule 1 (listStmt -> listStmt assign BRANCH .)


state 33

    (2) listStmt -> listStmt statment BRANCH .
    BRANCH          reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    NAME            reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    {               reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    PRINTEX         reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    (               reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    -               reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    NUMBER_F        reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    NUMBER          reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    ABS             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    SQRT            reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    LOG10           reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    LOG             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    EXP             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    ATAN            reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    COS             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    SIN             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    DEG             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    PHI             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    GAMMA           reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    N_E             reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    PI              reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    SWITCH          reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    IF              reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    WHILE           reduce using rule 2 (listStmt -> listStmt statment BRANCH .)
    $end            reduce using rule 2 (listStmt -> listStmt statment BRANCH .)


state 34

    (3) listStmt -> listStmt expr BRANCH .
    BRANCH          reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    NAME            reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    {               reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    PRINTEX         reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    (               reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    -               reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    NUMBER_F        reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    NUMBER          reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    ABS             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    SQRT            reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    LOG10           reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    LOG             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    EXP             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    ATAN            reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    COS             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    SIN             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    DEG             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    PHI             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    GAMMA           reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    N_E             reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    PI              reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    SWITCH          reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    IF              reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    WHILE           reduce using rule 3 (listStmt -> listStmt expr BRANCH .)
    $end            reduce using rule 3 (listStmt -> listStmt expr BRANCH .)


state 35

    (29) expr -> expr SM_EXP . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 59

state 36

    (30) expr -> expr / . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 60

state 37

    (31) expr -> expr * . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 61

state 38

    (32) expr -> expr - . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 62

state 39

    (33) expr -> expr + . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 63

state 40

    (6) assign -> NAME = . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 64

state 41

    (7) statment -> switchCode ( . NAME ) superSwitchList
    NAME            shift and go to state 65


state 42

    (28) expr -> ( expr . )
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 66
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 43

    (35) expr -> NAME .
    )               reduce using rule 35 (expr -> NAME .)
    SM_EXP          reduce using rule 35 (expr -> NAME .)
    /               reduce using rule 35 (expr -> NAME .)
    *               reduce using rule 35 (expr -> NAME .)
    -               reduce using rule 35 (expr -> NAME .)
    +               reduce using rule 35 (expr -> NAME .)
    BRANCH          reduce using rule 35 (expr -> NAME .)
    ELSE            reduce using rule 35 (expr -> NAME .)
    }               reduce using rule 35 (expr -> NAME .)
    {               reduce using rule 35 (expr -> NAME .)
    PRINTEX         reduce using rule 35 (expr -> NAME .)
    SWITCH          reduce using rule 35 (expr -> NAME .)
    IF              reduce using rule 35 (expr -> NAME .)
    WHILE           reduce using rule 35 (expr -> NAME .)
    NAME            reduce using rule 35 (expr -> NAME .)
    (               reduce using rule 35 (expr -> NAME .)
    NUMBER_F        reduce using rule 35 (expr -> NAME .)
    NUMBER          reduce using rule 35 (expr -> NAME .)
    ABS             reduce using rule 35 (expr -> NAME .)
    SQRT            reduce using rule 35 (expr -> NAME .)
    LOG10           reduce using rule 35 (expr -> NAME .)
    LOG             reduce using rule 35 (expr -> NAME .)
    EXP             reduce using rule 35 (expr -> NAME .)
    ATAN            reduce using rule 35 (expr -> NAME .)
    COS             reduce using rule 35 (expr -> NAME .)
    SIN             reduce using rule 35 (expr -> NAME .)
    DEG             reduce using rule 35 (expr -> NAME .)
    PHI             reduce using rule 35 (expr -> NAME .)
    GAMMA           reduce using rule 35 (expr -> NAME .)
    N_E             reduce using rule 35 (expr -> NAME .)
    PI              reduce using rule 35 (expr -> NAME .)
    ENDCASE         reduce using rule 35 (expr -> NAME .)
    NE              reduce using rule 35 (expr -> NAME .)
    EQ              reduce using rule 35 (expr -> NAME .)
    LE              reduce using rule 35 (expr -> NAME .)
    LT              reduce using rule 35 (expr -> NAME .)
    GE              reduce using rule 35 (expr -> NAME .)
    GT              reduce using rule 35 (expr -> NAME .)
    OR              reduce using rule 35 (expr -> NAME .)
    AND             reduce using rule 35 (expr -> NAME .)
    :               reduce using rule 35 (expr -> NAME .)


state 44

    (8) statment -> ifCode superCondition . statment ELSE statment end
    (9) statment -> ifCode superCondition . statment end
    (7) statment -> . switchCode ( NAME ) superSwitchList
    (8) statment -> . ifCode superCondition statment ELSE statment end
    (9) statment -> . ifCode superCondition statment end
    (10) statment -> . whileCode superCondition statment end
    (11) statment -> . { statmentList }
    (12) statment -> . PRINTEX STRING
    (13) statment -> . PRINTEX expr
    (14) statment -> . assign
    (15) statment -> . expr
    (23) switchCode -> . SWITCH
    (22) ifCode -> . IF
    (21) whileCode -> . WHILE
    (6) assign -> . NAME = expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    {               shift and go to state 11
    PRINTEX         shift and go to state 12
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    NAME            shift and go to state 6
    (               shift and go to state 8
    -               shift and go to state 13
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    ifCode                         shift and go to state 9
    statment                       shift and go to state 67
    switchCode                     shift and go to state 7
    whileCode                      shift and go to state 10
    expr                           shift and go to state 68
    assign                         shift and go to state 69

state 45

    (57) superCondition -> ( . conditionLogical )
    (58) conditionLogical -> . condition
    (59) conditionLogical -> . NOT condition
    (60) conditionLogical -> . condition OR condition
    (61) conditionLogical -> . condition AND condition
    (51) condition -> . expr NE expr
    (52) condition -> . expr EQ expr
    (53) condition -> . expr LE expr
    (54) condition -> . expr LT expr
    (55) condition -> . expr GE expr
    (56) condition -> . expr GT expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    NOT             shift and go to state 72
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    conditionLogical               shift and go to state 70
    condition                      shift and go to state 71
    expr                           shift and go to state 73

state 46

    (10) statment -> whileCode superCondition . statment end
    (7) statment -> . switchCode ( NAME ) superSwitchList
    (8) statment -> . ifCode superCondition statment ELSE statment end
    (9) statment -> . ifCode superCondition statment end
    (10) statment -> . whileCode superCondition statment end
    (11) statment -> . { statmentList }
    (12) statment -> . PRINTEX STRING
    (13) statment -> . PRINTEX expr
    (14) statment -> . assign
    (15) statment -> . expr
    (23) switchCode -> . SWITCH
    (22) ifCode -> . IF
    (21) whileCode -> . WHILE
    (6) assign -> . NAME = expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    {               shift and go to state 11
    PRINTEX         shift and go to state 12
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    NAME            shift and go to state 6
    (               shift and go to state 8
    -               shift and go to state 13
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    whileCode                      shift and go to state 10
    statment                       shift and go to state 74
    switchCode                     shift and go to state 7
    ifCode                         shift and go to state 9
    expr                           shift and go to state 68
    assign                         shift and go to state 69

state 47

    (11) statment -> { statmentList . }
    (25) statmentList -> statmentList . statment
    (26) statmentList -> statmentList . BRANCH
    (7) statment -> . switchCode ( NAME ) superSwitchList
    (8) statment -> . ifCode superCondition statment ELSE statment end
    (9) statment -> . ifCode superCondition statment end
    (10) statment -> . whileCode superCondition statment end
    (11) statment -> . { statmentList }
    (12) statment -> . PRINTEX STRING
    (13) statment -> . PRINTEX expr
    (14) statment -> . assign
    (15) statment -> . expr
    (23) switchCode -> . SWITCH
    (22) ifCode -> . IF
    (21) whileCode -> . WHILE
    (6) assign -> . NAME = expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    }               shift and go to state 75
    BRANCH          shift and go to state 77
    {               shift and go to state 11
    PRINTEX         shift and go to state 12
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    NAME            shift and go to state 6
    (               shift and go to state 8
    -               shift and go to state 13
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    statment                       shift and go to state 76
    switchCode                     shift and go to state 7
    ifCode                         shift and go to state 9
    whileCode                      shift and go to state 10
    expr                           shift and go to state 68
    assign                         shift and go to state 69

state 48

    (12) statment -> PRINTEX STRING .
    BRANCH          reduce using rule 12 (statment -> PRINTEX STRING .)
    ELSE            reduce using rule 12 (statment -> PRINTEX STRING .)
    }               reduce using rule 12 (statment -> PRINTEX STRING .)
    {               reduce using rule 12 (statment -> PRINTEX STRING .)
    PRINTEX         reduce using rule 12 (statment -> PRINTEX STRING .)
    SWITCH          reduce using rule 12 (statment -> PRINTEX STRING .)
    IF              reduce using rule 12 (statment -> PRINTEX STRING .)
    WHILE           reduce using rule 12 (statment -> PRINTEX STRING .)
    NAME            reduce using rule 12 (statment -> PRINTEX STRING .)
    (               reduce using rule 12 (statment -> PRINTEX STRING .)
    -               reduce using rule 12 (statment -> PRINTEX STRING .)
    NUMBER_F        reduce using rule 12 (statment -> PRINTEX STRING .)
    NUMBER          reduce using rule 12 (statment -> PRINTEX STRING .)
    ABS             reduce using rule 12 (statment -> PRINTEX STRING .)
    SQRT            reduce using rule 12 (statment -> PRINTEX STRING .)
    LOG10           reduce using rule 12 (statment -> PRINTEX STRING .)
    LOG             reduce using rule 12 (statment -> PRINTEX STRING .)
    EXP             reduce using rule 12 (statment -> PRINTEX STRING .)
    ATAN            reduce using rule 12 (statment -> PRINTEX STRING .)
    COS             reduce using rule 12 (statment -> PRINTEX STRING .)
    SIN             reduce using rule 12 (statment -> PRINTEX STRING .)
    DEG             reduce using rule 12 (statment -> PRINTEX STRING .)
    PHI             reduce using rule 12 (statment -> PRINTEX STRING .)
    GAMMA           reduce using rule 12 (statment -> PRINTEX STRING .)
    N_E             reduce using rule 12 (statment -> PRINTEX STRING .)
    PI              reduce using rule 12 (statment -> PRINTEX STRING .)
    ENDCASE         reduce using rule 12 (statment -> PRINTEX STRING .)


state 49

    (13) statment -> PRINTEX expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    BRANCH          reduce using rule 13 (statment -> PRINTEX expr .)
    ELSE            reduce using rule 13 (statment -> PRINTEX expr .)
    }               reduce using rule 13 (statment -> PRINTEX expr .)
    {               reduce using rule 13 (statment -> PRINTEX expr .)
    PRINTEX         reduce using rule 13 (statment -> PRINTEX expr .)
    SWITCH          reduce using rule 13 (statment -> PRINTEX expr .)
    IF              reduce using rule 13 (statment -> PRINTEX expr .)
    WHILE           reduce using rule 13 (statment -> PRINTEX expr .)
    NAME            reduce using rule 13 (statment -> PRINTEX expr .)
    (               reduce using rule 13 (statment -> PRINTEX expr .)
    NUMBER_F        reduce using rule 13 (statment -> PRINTEX expr .)
    NUMBER          reduce using rule 13 (statment -> PRINTEX expr .)
    ABS             reduce using rule 13 (statment -> PRINTEX expr .)
    SQRT            reduce using rule 13 (statment -> PRINTEX expr .)
    LOG10           reduce using rule 13 (statment -> PRINTEX expr .)
    LOG             reduce using rule 13 (statment -> PRINTEX expr .)
    EXP             reduce using rule 13 (statment -> PRINTEX expr .)
    ATAN            reduce using rule 13 (statment -> PRINTEX expr .)
    COS             reduce using rule 13 (statment -> PRINTEX expr .)
    SIN             reduce using rule 13 (statment -> PRINTEX expr .)
    DEG             reduce using rule 13 (statment -> PRINTEX expr .)
    PHI             reduce using rule 13 (statment -> PRINTEX expr .)
    GAMMA           reduce using rule 13 (statment -> PRINTEX expr .)
    N_E             reduce using rule 13 (statment -> PRINTEX expr .)
    PI              reduce using rule 13 (statment -> PRINTEX expr .)
    ENDCASE         reduce using rule 13 (statment -> PRINTEX expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 50

    (34) expr -> - expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    BRANCH          reduce using rule 34 (expr -> - expr .)
    /               reduce using rule 34 (expr -> - expr .)
    *               reduce using rule 34 (expr -> - expr .)
    -               reduce using rule 34 (expr -> - expr .)
    +               reduce using rule 34 (expr -> - expr .)
    )               reduce using rule 34 (expr -> - expr .)
    ELSE            reduce using rule 34 (expr -> - expr .)
    }               reduce using rule 34 (expr -> - expr .)
    {               reduce using rule 34 (expr -> - expr .)
    PRINTEX         reduce using rule 34 (expr -> - expr .)
    SWITCH          reduce using rule 34 (expr -> - expr .)
    IF              reduce using rule 34 (expr -> - expr .)
    WHILE           reduce using rule 34 (expr -> - expr .)
    NAME            reduce using rule 34 (expr -> - expr .)
    (               reduce using rule 34 (expr -> - expr .)
    NUMBER_F        reduce using rule 34 (expr -> - expr .)
    NUMBER          reduce using rule 34 (expr -> - expr .)
    ABS             reduce using rule 34 (expr -> - expr .)
    SQRT            reduce using rule 34 (expr -> - expr .)
    LOG10           reduce using rule 34 (expr -> - expr .)
    LOG             reduce using rule 34 (expr -> - expr .)
    EXP             reduce using rule 34 (expr -> - expr .)
    ATAN            reduce using rule 34 (expr -> - expr .)
    COS             reduce using rule 34 (expr -> - expr .)
    SIN             reduce using rule 34 (expr -> - expr .)
    DEG             reduce using rule 34 (expr -> - expr .)
    PHI             reduce using rule 34 (expr -> - expr .)
    GAMMA           reduce using rule 34 (expr -> - expr .)
    N_E             reduce using rule 34 (expr -> - expr .)
    PI              reduce using rule 34 (expr -> - expr .)
    ENDCASE         reduce using rule 34 (expr -> - expr .)
    NE              reduce using rule 34 (expr -> - expr .)
    EQ              reduce using rule 34 (expr -> - expr .)
    LE              reduce using rule 34 (expr -> - expr .)
    LT              reduce using rule 34 (expr -> - expr .)
    GE              reduce using rule 34 (expr -> - expr .)
    GT              reduce using rule 34 (expr -> - expr .)
    OR              reduce using rule 34 (expr -> - expr .)
    AND             reduce using rule 34 (expr -> - expr .)
    :               reduce using rule 34 (expr -> - expr .)
    SM_EXP          shift and go to state 35


state 51

    (38) expr -> ABS ( . expr )
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 78

state 52

    (39) expr -> SQRT ( . expr )
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 79

state 53

    (40) expr -> LOG10 ( . expr )
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 80

state 54

    (41) expr -> LOG ( . expr )
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 81

state 55

    (42) expr -> EXP ( . expr )
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 82

state 56

    (43) expr -> ATAN ( . expr )
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 83

state 57

    (44) expr -> COS ( . expr )
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 84

state 58

    (45) expr -> SIN ( . expr )
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 85

state 59

    (29) expr -> expr SM_EXP expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    BRANCH          reduce using rule 29 (expr -> expr SM_EXP expr .)
    /               reduce using rule 29 (expr -> expr SM_EXP expr .)
    *               reduce using rule 29 (expr -> expr SM_EXP expr .)
    -               reduce using rule 29 (expr -> expr SM_EXP expr .)
    +               reduce using rule 29 (expr -> expr SM_EXP expr .)
    )               reduce using rule 29 (expr -> expr SM_EXP expr .)
    ELSE            reduce using rule 29 (expr -> expr SM_EXP expr .)
    }               reduce using rule 29 (expr -> expr SM_EXP expr .)
    {               reduce using rule 29 (expr -> expr SM_EXP expr .)
    PRINTEX         reduce using rule 29 (expr -> expr SM_EXP expr .)
    SWITCH          reduce using rule 29 (expr -> expr SM_EXP expr .)
    IF              reduce using rule 29 (expr -> expr SM_EXP expr .)
    WHILE           reduce using rule 29 (expr -> expr SM_EXP expr .)
    NAME            reduce using rule 29 (expr -> expr SM_EXP expr .)
    (               reduce using rule 29 (expr -> expr SM_EXP expr .)
    NUMBER_F        reduce using rule 29 (expr -> expr SM_EXP expr .)
    NUMBER          reduce using rule 29 (expr -> expr SM_EXP expr .)
    ABS             reduce using rule 29 (expr -> expr SM_EXP expr .)
    SQRT            reduce using rule 29 (expr -> expr SM_EXP expr .)
    LOG10           reduce using rule 29 (expr -> expr SM_EXP expr .)
    LOG             reduce using rule 29 (expr -> expr SM_EXP expr .)
    EXP             reduce using rule 29 (expr -> expr SM_EXP expr .)
    ATAN            reduce using rule 29 (expr -> expr SM_EXP expr .)
    COS             reduce using rule 29 (expr -> expr SM_EXP expr .)
    SIN             reduce using rule 29 (expr -> expr SM_EXP expr .)
    DEG             reduce using rule 29 (expr -> expr SM_EXP expr .)
    PHI             reduce using rule 29 (expr -> expr SM_EXP expr .)
    GAMMA           reduce using rule 29 (expr -> expr SM_EXP expr .)
    N_E             reduce using rule 29 (expr -> expr SM_EXP expr .)
    PI              reduce using rule 29 (expr -> expr SM_EXP expr .)
    ENDCASE         reduce using rule 29 (expr -> expr SM_EXP expr .)
    NE              reduce using rule 29 (expr -> expr SM_EXP expr .)
    EQ              reduce using rule 29 (expr -> expr SM_EXP expr .)
    LE              reduce using rule 29 (expr -> expr SM_EXP expr .)
    LT              reduce using rule 29 (expr -> expr SM_EXP expr .)
    GE              reduce using rule 29 (expr -> expr SM_EXP expr .)
    GT              reduce using rule 29 (expr -> expr SM_EXP expr .)
    OR              reduce using rule 29 (expr -> expr SM_EXP expr .)
    AND             reduce using rule 29 (expr -> expr SM_EXP expr .)
    :               reduce using rule 29 (expr -> expr SM_EXP expr .)
    SM_EXP          shift and go to state 35


state 60

    (30) expr -> expr / expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    BRANCH          reduce using rule 30 (expr -> expr / expr .)
    /               reduce using rule 30 (expr -> expr / expr .)
    *               reduce using rule 30 (expr -> expr / expr .)
    -               reduce using rule 30 (expr -> expr / expr .)
    +               reduce using rule 30 (expr -> expr / expr .)
    )               reduce using rule 30 (expr -> expr / expr .)
    ELSE            reduce using rule 30 (expr -> expr / expr .)
    }               reduce using rule 30 (expr -> expr / expr .)
    {               reduce using rule 30 (expr -> expr / expr .)
    PRINTEX         reduce using rule 30 (expr -> expr / expr .)
    SWITCH          reduce using rule 30 (expr -> expr / expr .)
    IF              reduce using rule 30 (expr -> expr / expr .)
    WHILE           reduce using rule 30 (expr -> expr / expr .)
    NAME            reduce using rule 30 (expr -> expr / expr .)
    (               reduce using rule 30 (expr -> expr / expr .)
    NUMBER_F        reduce using rule 30 (expr -> expr / expr .)
    NUMBER          reduce using rule 30 (expr -> expr / expr .)
    ABS             reduce using rule 30 (expr -> expr / expr .)
    SQRT            reduce using rule 30 (expr -> expr / expr .)
    LOG10           reduce using rule 30 (expr -> expr / expr .)
    LOG             reduce using rule 30 (expr -> expr / expr .)
    EXP             reduce using rule 30 (expr -> expr / expr .)
    ATAN            reduce using rule 30 (expr -> expr / expr .)
    COS             reduce using rule 30 (expr -> expr / expr .)
    SIN             reduce using rule 30 (expr -> expr / expr .)
    DEG             reduce using rule 30 (expr -> expr / expr .)
    PHI             reduce using rule 30 (expr -> expr / expr .)
    GAMMA           reduce using rule 30 (expr -> expr / expr .)
    N_E             reduce using rule 30 (expr -> expr / expr .)
    PI              reduce using rule 30 (expr -> expr / expr .)
    ENDCASE         reduce using rule 30 (expr -> expr / expr .)
    NE              reduce using rule 30 (expr -> expr / expr .)
    EQ              reduce using rule 30 (expr -> expr / expr .)
    LE              reduce using rule 30 (expr -> expr / expr .)
    LT              reduce using rule 30 (expr -> expr / expr .)
    GE              reduce using rule 30 (expr -> expr / expr .)
    GT              reduce using rule 30 (expr -> expr / expr .)
    OR              reduce using rule 30 (expr -> expr / expr .)
    AND             reduce using rule 30 (expr -> expr / expr .)
    :               reduce using rule 30 (expr -> expr / expr .)
    SM_EXP          shift and go to state 35


state 61

    (31) expr -> expr * expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    BRANCH          reduce using rule 31 (expr -> expr * expr .)
    /               reduce using rule 31 (expr -> expr * expr .)
    *               reduce using rule 31 (expr -> expr * expr .)
    -               reduce using rule 31 (expr -> expr * expr .)
    +               reduce using rule 31 (expr -> expr * expr .)
    )               reduce using rule 31 (expr -> expr * expr .)
    ELSE            reduce using rule 31 (expr -> expr * expr .)
    }               reduce using rule 31 (expr -> expr * expr .)
    {               reduce using rule 31 (expr -> expr * expr .)
    PRINTEX         reduce using rule 31 (expr -> expr * expr .)
    SWITCH          reduce using rule 31 (expr -> expr * expr .)
    IF              reduce using rule 31 (expr -> expr * expr .)
    WHILE           reduce using rule 31 (expr -> expr * expr .)
    NAME            reduce using rule 31 (expr -> expr * expr .)
    (               reduce using rule 31 (expr -> expr * expr .)
    NUMBER_F        reduce using rule 31 (expr -> expr * expr .)
    NUMBER          reduce using rule 31 (expr -> expr * expr .)
    ABS             reduce using rule 31 (expr -> expr * expr .)
    SQRT            reduce using rule 31 (expr -> expr * expr .)
    LOG10           reduce using rule 31 (expr -> expr * expr .)
    LOG             reduce using rule 31 (expr -> expr * expr .)
    EXP             reduce using rule 31 (expr -> expr * expr .)
    ATAN            reduce using rule 31 (expr -> expr * expr .)
    COS             reduce using rule 31 (expr -> expr * expr .)
    SIN             reduce using rule 31 (expr -> expr * expr .)
    DEG             reduce using rule 31 (expr -> expr * expr .)
    PHI             reduce using rule 31 (expr -> expr * expr .)
    GAMMA           reduce using rule 31 (expr -> expr * expr .)
    N_E             reduce using rule 31 (expr -> expr * expr .)
    PI              reduce using rule 31 (expr -> expr * expr .)
    ENDCASE         reduce using rule 31 (expr -> expr * expr .)
    NE              reduce using rule 31 (expr -> expr * expr .)
    EQ              reduce using rule 31 (expr -> expr * expr .)
    LE              reduce using rule 31 (expr -> expr * expr .)
    LT              reduce using rule 31 (expr -> expr * expr .)
    GE              reduce using rule 31 (expr -> expr * expr .)
    GT              reduce using rule 31 (expr -> expr * expr .)
    OR              reduce using rule 31 (expr -> expr * expr .)
    AND             reduce using rule 31 (expr -> expr * expr .)
    :               reduce using rule 31 (expr -> expr * expr .)
    SM_EXP          shift and go to state 35


state 62

    (32) expr -> expr - expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    BRANCH          reduce using rule 32 (expr -> expr - expr .)
    -               reduce using rule 32 (expr -> expr - expr .)
    +               reduce using rule 32 (expr -> expr - expr .)
    )               reduce using rule 32 (expr -> expr - expr .)
    ELSE            reduce using rule 32 (expr -> expr - expr .)
    }               reduce using rule 32 (expr -> expr - expr .)
    {               reduce using rule 32 (expr -> expr - expr .)
    PRINTEX         reduce using rule 32 (expr -> expr - expr .)
    SWITCH          reduce using rule 32 (expr -> expr - expr .)
    IF              reduce using rule 32 (expr -> expr - expr .)
    WHILE           reduce using rule 32 (expr -> expr - expr .)
    NAME            reduce using rule 32 (expr -> expr - expr .)
    (               reduce using rule 32 (expr -> expr - expr .)
    NUMBER_F        reduce using rule 32 (expr -> expr - expr .)
    NUMBER          reduce using rule 32 (expr -> expr - expr .)
    ABS             reduce using rule 32 (expr -> expr - expr .)
    SQRT            reduce using rule 32 (expr -> expr - expr .)
    LOG10           reduce using rule 32 (expr -> expr - expr .)
    LOG             reduce using rule 32 (expr -> expr - expr .)
    EXP             reduce using rule 32 (expr -> expr - expr .)
    ATAN            reduce using rule 32 (expr -> expr - expr .)
    COS             reduce using rule 32 (expr -> expr - expr .)
    SIN             reduce using rule 32 (expr -> expr - expr .)
    DEG             reduce using rule 32 (expr -> expr - expr .)
    PHI             reduce using rule 32 (expr -> expr - expr .)
    GAMMA           reduce using rule 32 (expr -> expr - expr .)
    N_E             reduce using rule 32 (expr -> expr - expr .)
    PI              reduce using rule 32 (expr -> expr - expr .)
    ENDCASE         reduce using rule 32 (expr -> expr - expr .)
    NE              reduce using rule 32 (expr -> expr - expr .)
    EQ              reduce using rule 32 (expr -> expr - expr .)
    LE              reduce using rule 32 (expr -> expr - expr .)
    LT              reduce using rule 32 (expr -> expr - expr .)
    GE              reduce using rule 32 (expr -> expr - expr .)
    GT              reduce using rule 32 (expr -> expr - expr .)
    OR              reduce using rule 32 (expr -> expr - expr .)
    AND             reduce using rule 32 (expr -> expr - expr .)
    :               reduce using rule 32 (expr -> expr - expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37


state 63

    (33) expr -> expr + expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    BRANCH          reduce using rule 33 (expr -> expr + expr .)
    -               reduce using rule 33 (expr -> expr + expr .)
    +               reduce using rule 33 (expr -> expr + expr .)
    )               reduce using rule 33 (expr -> expr + expr .)
    ELSE            reduce using rule 33 (expr -> expr + expr .)
    }               reduce using rule 33 (expr -> expr + expr .)
    {               reduce using rule 33 (expr -> expr + expr .)
    PRINTEX         reduce using rule 33 (expr -> expr + expr .)
    SWITCH          reduce using rule 33 (expr -> expr + expr .)
    IF              reduce using rule 33 (expr -> expr + expr .)
    WHILE           reduce using rule 33 (expr -> expr + expr .)
    NAME            reduce using rule 33 (expr -> expr + expr .)
    (               reduce using rule 33 (expr -> expr + expr .)
    NUMBER_F        reduce using rule 33 (expr -> expr + expr .)
    NUMBER          reduce using rule 33 (expr -> expr + expr .)
    ABS             reduce using rule 33 (expr -> expr + expr .)
    SQRT            reduce using rule 33 (expr -> expr + expr .)
    LOG10           reduce using rule 33 (expr -> expr + expr .)
    LOG             reduce using rule 33 (expr -> expr + expr .)
    EXP             reduce using rule 33 (expr -> expr + expr .)
    ATAN            reduce using rule 33 (expr -> expr + expr .)
    COS             reduce using rule 33 (expr -> expr + expr .)
    SIN             reduce using rule 33 (expr -> expr + expr .)
    DEG             reduce using rule 33 (expr -> expr + expr .)
    PHI             reduce using rule 33 (expr -> expr + expr .)
    GAMMA           reduce using rule 33 (expr -> expr + expr .)
    N_E             reduce using rule 33 (expr -> expr + expr .)
    PI              reduce using rule 33 (expr -> expr + expr .)
    ENDCASE         reduce using rule 33 (expr -> expr + expr .)
    NE              reduce using rule 33 (expr -> expr + expr .)
    EQ              reduce using rule 33 (expr -> expr + expr .)
    LE              reduce using rule 33 (expr -> expr + expr .)
    LT              reduce using rule 33 (expr -> expr + expr .)
    GE              reduce using rule 33 (expr -> expr + expr .)
    GT              reduce using rule 33 (expr -> expr + expr .)
    OR              reduce using rule 33 (expr -> expr + expr .)
    AND             reduce using rule 33 (expr -> expr + expr .)
    :               reduce using rule 33 (expr -> expr + expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37


state 64

    (6) assign -> NAME = expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    BRANCH          reduce using rule 6 (assign -> NAME = expr .)
    ELSE            reduce using rule 6 (assign -> NAME = expr .)
    }               reduce using rule 6 (assign -> NAME = expr .)
    {               reduce using rule 6 (assign -> NAME = expr .)
    PRINTEX         reduce using rule 6 (assign -> NAME = expr .)
    SWITCH          reduce using rule 6 (assign -> NAME = expr .)
    IF              reduce using rule 6 (assign -> NAME = expr .)
    WHILE           reduce using rule 6 (assign -> NAME = expr .)
    NAME            reduce using rule 6 (assign -> NAME = expr .)
    (               reduce using rule 6 (assign -> NAME = expr .)
    NUMBER_F        reduce using rule 6 (assign -> NAME = expr .)
    NUMBER          reduce using rule 6 (assign -> NAME = expr .)
    ABS             reduce using rule 6 (assign -> NAME = expr .)
    SQRT            reduce using rule 6 (assign -> NAME = expr .)
    LOG10           reduce using rule 6 (assign -> NAME = expr .)
    LOG             reduce using rule 6 (assign -> NAME = expr .)
    EXP             reduce using rule 6 (assign -> NAME = expr .)
    ATAN            reduce using rule 6 (assign -> NAME = expr .)
    COS             reduce using rule 6 (assign -> NAME = expr .)
    SIN             reduce using rule 6 (assign -> NAME = expr .)
    DEG             reduce using rule 6 (assign -> NAME = expr .)
    PHI             reduce using rule 6 (assign -> NAME = expr .)
    GAMMA           reduce using rule 6 (assign -> NAME = expr .)
    N_E             reduce using rule 6 (assign -> NAME = expr .)
    PI              reduce using rule 6 (assign -> NAME = expr .)
    ENDCASE         reduce using rule 6 (assign -> NAME = expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 65

    (7) statment -> switchCode ( NAME . ) superSwitchList
    )               shift and go to state 86


state 66

    (28) expr -> ( expr ) .
    BRANCH          reduce using rule 28 (expr -> ( expr ) .)
    SM_EXP          reduce using rule 28 (expr -> ( expr ) .)
    /               reduce using rule 28 (expr -> ( expr ) .)
    *               reduce using rule 28 (expr -> ( expr ) .)
    -               reduce using rule 28 (expr -> ( expr ) .)
    +               reduce using rule 28 (expr -> ( expr ) .)
    )               reduce using rule 28 (expr -> ( expr ) .)
    ELSE            reduce using rule 28 (expr -> ( expr ) .)
    }               reduce using rule 28 (expr -> ( expr ) .)
    {               reduce using rule 28 (expr -> ( expr ) .)
    PRINTEX         reduce using rule 28 (expr -> ( expr ) .)
    SWITCH          reduce using rule 28 (expr -> ( expr ) .)
    IF              reduce using rule 28 (expr -> ( expr ) .)
    WHILE           reduce using rule 28 (expr -> ( expr ) .)
    NAME            reduce using rule 28 (expr -> ( expr ) .)
    (               reduce using rule 28 (expr -> ( expr ) .)
    NUMBER_F        reduce using rule 28 (expr -> ( expr ) .)
    NUMBER          reduce using rule 28 (expr -> ( expr ) .)
    ABS             reduce using rule 28 (expr -> ( expr ) .)
    SQRT            reduce using rule 28 (expr -> ( expr ) .)
    LOG10           reduce using rule 28 (expr -> ( expr ) .)
    LOG             reduce using rule 28 (expr -> ( expr ) .)
    EXP             reduce using rule 28 (expr -> ( expr ) .)
    ATAN            reduce using rule 28 (expr -> ( expr ) .)
    COS             reduce using rule 28 (expr -> ( expr ) .)
    SIN             reduce using rule 28 (expr -> ( expr ) .)
    DEG             reduce using rule 28 (expr -> ( expr ) .)
    PHI             reduce using rule 28 (expr -> ( expr ) .)
    GAMMA           reduce using rule 28 (expr -> ( expr ) .)
    N_E             reduce using rule 28 (expr -> ( expr ) .)
    PI              reduce using rule 28 (expr -> ( expr ) .)
    ENDCASE         reduce using rule 28 (expr -> ( expr ) .)
    NE              reduce using rule 28 (expr -> ( expr ) .)
    EQ              reduce using rule 28 (expr -> ( expr ) .)
    LE              reduce using rule 28 (expr -> ( expr ) .)
    LT              reduce using rule 28 (expr -> ( expr ) .)
    GE              reduce using rule 28 (expr -> ( expr ) .)
    GT              reduce using rule 28 (expr -> ( expr ) .)
    OR              reduce using rule 28 (expr -> ( expr ) .)
    AND             reduce using rule 28 (expr -> ( expr ) .)
    :               reduce using rule 28 (expr -> ( expr ) .)


state 67

    (8) statment -> ifCode superCondition statment . ELSE statment end
    (9) statment -> ifCode superCondition statment . end
    (24) end -> .
  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 87
    BRANCH          reduce using rule 24 (end -> .)
    }               reduce using rule 24 (end -> .)
    {               reduce using rule 24 (end -> .)
    PRINTEX         reduce using rule 24 (end -> .)
    SWITCH          reduce using rule 24 (end -> .)
    IF              reduce using rule 24 (end -> .)
    WHILE           reduce using rule 24 (end -> .)
    NAME            reduce using rule 24 (end -> .)
    (               reduce using rule 24 (end -> .)
    -               reduce using rule 24 (end -> .)
    NUMBER_F        reduce using rule 24 (end -> .)
    NUMBER          reduce using rule 24 (end -> .)
    ABS             reduce using rule 24 (end -> .)
    SQRT            reduce using rule 24 (end -> .)
    LOG10           reduce using rule 24 (end -> .)
    LOG             reduce using rule 24 (end -> .)
    EXP             reduce using rule 24 (end -> .)
    ATAN            reduce using rule 24 (end -> .)
    COS             reduce using rule 24 (end -> .)
    SIN             reduce using rule 24 (end -> .)
    DEG             reduce using rule 24 (end -> .)
    PHI             reduce using rule 24 (end -> .)
    GAMMA           reduce using rule 24 (end -> .)
    N_E             reduce using rule 24 (end -> .)
    PI              reduce using rule 24 (end -> .)
    ENDCASE         reduce using rule 24 (end -> .)

    end                            shift and go to state 88

state 68

    (15) statment -> expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    ELSE            reduce using rule 15 (statment -> expr .)
    BRANCH          reduce using rule 15 (statment -> expr .)
    }               reduce using rule 15 (statment -> expr .)
    {               reduce using rule 15 (statment -> expr .)
    PRINTEX         reduce using rule 15 (statment -> expr .)
    SWITCH          reduce using rule 15 (statment -> expr .)
    IF              reduce using rule 15 (statment -> expr .)
    WHILE           reduce using rule 15 (statment -> expr .)
    NAME            reduce using rule 15 (statment -> expr .)
    (               reduce using rule 15 (statment -> expr .)
    NUMBER_F        reduce using rule 15 (statment -> expr .)
    NUMBER          reduce using rule 15 (statment -> expr .)
    ABS             reduce using rule 15 (statment -> expr .)
    SQRT            reduce using rule 15 (statment -> expr .)
    LOG10           reduce using rule 15 (statment -> expr .)
    LOG             reduce using rule 15 (statment -> expr .)
    EXP             reduce using rule 15 (statment -> expr .)
    ATAN            reduce using rule 15 (statment -> expr .)
    COS             reduce using rule 15 (statment -> expr .)
    SIN             reduce using rule 15 (statment -> expr .)
    DEG             reduce using rule 15 (statment -> expr .)
    PHI             reduce using rule 15 (statment -> expr .)
    GAMMA           reduce using rule 15 (statment -> expr .)
    N_E             reduce using rule 15 (statment -> expr .)
    PI              reduce using rule 15 (statment -> expr .)
    ENDCASE         reduce using rule 15 (statment -> expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 69

    (14) statment -> assign .
    ELSE            reduce using rule 14 (statment -> assign .)
    BRANCH          reduce using rule 14 (statment -> assign .)
    }               reduce using rule 14 (statment -> assign .)
    {               reduce using rule 14 (statment -> assign .)
    PRINTEX         reduce using rule 14 (statment -> assign .)
    SWITCH          reduce using rule 14 (statment -> assign .)
    IF              reduce using rule 14 (statment -> assign .)
    WHILE           reduce using rule 14 (statment -> assign .)
    NAME            reduce using rule 14 (statment -> assign .)
    (               reduce using rule 14 (statment -> assign .)
    -               reduce using rule 14 (statment -> assign .)
    NUMBER_F        reduce using rule 14 (statment -> assign .)
    NUMBER          reduce using rule 14 (statment -> assign .)
    ABS             reduce using rule 14 (statment -> assign .)
    SQRT            reduce using rule 14 (statment -> assign .)
    LOG10           reduce using rule 14 (statment -> assign .)
    LOG             reduce using rule 14 (statment -> assign .)
    EXP             reduce using rule 14 (statment -> assign .)
    ATAN            reduce using rule 14 (statment -> assign .)
    COS             reduce using rule 14 (statment -> assign .)
    SIN             reduce using rule 14 (statment -> assign .)
    DEG             reduce using rule 14 (statment -> assign .)
    PHI             reduce using rule 14 (statment -> assign .)
    GAMMA           reduce using rule 14 (statment -> assign .)
    N_E             reduce using rule 14 (statment -> assign .)
    PI              reduce using rule 14 (statment -> assign .)
    ENDCASE         reduce using rule 14 (statment -> assign .)


state 70

    (57) superCondition -> ( conditionLogical . )
    )               shift and go to state 89


state 71

    (58) conditionLogical -> condition .
    (60) conditionLogical -> condition . OR condition
    (61) conditionLogical -> condition . AND condition
    )               reduce using rule 58 (conditionLogical -> condition .)
    OR              shift and go to state 90
    AND             shift and go to state 91


state 72

    (59) conditionLogical -> NOT . condition
    (51) condition -> . expr NE expr
    (52) condition -> . expr EQ expr
    (53) condition -> . expr LE expr
    (54) condition -> . expr LT expr
    (55) condition -> . expr GE expr
    (56) condition -> . expr GT expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    condition                      shift and go to state 92
    expr                           shift and go to state 73

state 73

    (51) condition -> expr . NE expr
    (52) condition -> expr . EQ expr
    (53) condition -> expr . LE expr
    (54) condition -> expr . LT expr
    (55) condition -> expr . GE expr
    (56) condition -> expr . GT expr
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    NE              shift and go to state 93
    EQ              shift and go to state 94
    LE              shift and go to state 95
    LT              shift and go to state 96
    GE              shift and go to state 97
    GT              shift and go to state 98
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 74

    (10) statment -> whileCode superCondition statment . end
    (24) end -> .
    BRANCH          reduce using rule 24 (end -> .)
    ELSE            reduce using rule 24 (end -> .)
    }               reduce using rule 24 (end -> .)
    {               reduce using rule 24 (end -> .)
    PRINTEX         reduce using rule 24 (end -> .)
    SWITCH          reduce using rule 24 (end -> .)
    IF              reduce using rule 24 (end -> .)
    WHILE           reduce using rule 24 (end -> .)
    NAME            reduce using rule 24 (end -> .)
    (               reduce using rule 24 (end -> .)
    -               reduce using rule 24 (end -> .)
    NUMBER_F        reduce using rule 24 (end -> .)
    NUMBER          reduce using rule 24 (end -> .)
    ABS             reduce using rule 24 (end -> .)
    SQRT            reduce using rule 24 (end -> .)
    LOG10           reduce using rule 24 (end -> .)
    LOG             reduce using rule 24 (end -> .)
    EXP             reduce using rule 24 (end -> .)
    ATAN            reduce using rule 24 (end -> .)
    COS             reduce using rule 24 (end -> .)
    SIN             reduce using rule 24 (end -> .)
    DEG             reduce using rule 24 (end -> .)
    PHI             reduce using rule 24 (end -> .)
    GAMMA           reduce using rule 24 (end -> .)
    N_E             reduce using rule 24 (end -> .)
    PI              reduce using rule 24 (end -> .)
    ENDCASE         reduce using rule 24 (end -> .)

    end                            shift and go to state 99

state 75

    (11) statment -> { statmentList } .
    BRANCH          reduce using rule 11 (statment -> { statmentList } .)
    ELSE            reduce using rule 11 (statment -> { statmentList } .)
    }               reduce using rule 11 (statment -> { statmentList } .)
    {               reduce using rule 11 (statment -> { statmentList } .)
    PRINTEX         reduce using rule 11 (statment -> { statmentList } .)
    SWITCH          reduce using rule 11 (statment -> { statmentList } .)
    IF              reduce using rule 11 (statment -> { statmentList } .)
    WHILE           reduce using rule 11 (statment -> { statmentList } .)
    NAME            reduce using rule 11 (statment -> { statmentList } .)
    (               reduce using rule 11 (statment -> { statmentList } .)
    -               reduce using rule 11 (statment -> { statmentList } .)
    NUMBER_F        reduce using rule 11 (statment -> { statmentList } .)
    NUMBER          reduce using rule 11 (statment -> { statmentList } .)
    ABS             reduce using rule 11 (statment -> { statmentList } .)
    SQRT            reduce using rule 11 (statment -> { statmentList } .)
    LOG10           reduce using rule 11 (statment -> { statmentList } .)
    LOG             reduce using rule 11 (statment -> { statmentList } .)
    EXP             reduce using rule 11 (statment -> { statmentList } .)
    ATAN            reduce using rule 11 (statment -> { statmentList } .)
    COS             reduce using rule 11 (statment -> { statmentList } .)
    SIN             reduce using rule 11 (statment -> { statmentList } .)
    DEG             reduce using rule 11 (statment -> { statmentList } .)
    PHI             reduce using rule 11 (statment -> { statmentList } .)
    GAMMA           reduce using rule 11 (statment -> { statmentList } .)
    N_E             reduce using rule 11 (statment -> { statmentList } .)
    PI              reduce using rule 11 (statment -> { statmentList } .)
    ENDCASE         reduce using rule 11 (statment -> { statmentList } .)


state 76

    (25) statmentList -> statmentList statment .
    }               reduce using rule 25 (statmentList -> statmentList statment .)
    BRANCH          reduce using rule 25 (statmentList -> statmentList statment .)
    {               reduce using rule 25 (statmentList -> statmentList statment .)
    PRINTEX         reduce using rule 25 (statmentList -> statmentList statment .)
    SWITCH          reduce using rule 25 (statmentList -> statmentList statment .)
    IF              reduce using rule 25 (statmentList -> statmentList statment .)
    WHILE           reduce using rule 25 (statmentList -> statmentList statment .)
    NAME            reduce using rule 25 (statmentList -> statmentList statment .)
    (               reduce using rule 25 (statmentList -> statmentList statment .)
    -               reduce using rule 25 (statmentList -> statmentList statment .)
    NUMBER_F        reduce using rule 25 (statmentList -> statmentList statment .)
    NUMBER          reduce using rule 25 (statmentList -> statmentList statment .)
    ABS             reduce using rule 25 (statmentList -> statmentList statment .)
    SQRT            reduce using rule 25 (statmentList -> statmentList statment .)
    LOG10           reduce using rule 25 (statmentList -> statmentList statment .)
    LOG             reduce using rule 25 (statmentList -> statmentList statment .)
    EXP             reduce using rule 25 (statmentList -> statmentList statment .)
    ATAN            reduce using rule 25 (statmentList -> statmentList statment .)
    COS             reduce using rule 25 (statmentList -> statmentList statment .)
    SIN             reduce using rule 25 (statmentList -> statmentList statment .)
    DEG             reduce using rule 25 (statmentList -> statmentList statment .)
    PHI             reduce using rule 25 (statmentList -> statmentList statment .)
    GAMMA           reduce using rule 25 (statmentList -> statmentList statment .)
    N_E             reduce using rule 25 (statmentList -> statmentList statment .)
    PI              reduce using rule 25 (statmentList -> statmentList statment .)
    ENDCASE         reduce using rule 25 (statmentList -> statmentList statment .)


state 77

    (26) statmentList -> statmentList BRANCH .
    }               reduce using rule 26 (statmentList -> statmentList BRANCH .)
    BRANCH          reduce using rule 26 (statmentList -> statmentList BRANCH .)
    {               reduce using rule 26 (statmentList -> statmentList BRANCH .)
    PRINTEX         reduce using rule 26 (statmentList -> statmentList BRANCH .)
    SWITCH          reduce using rule 26 (statmentList -> statmentList BRANCH .)
    IF              reduce using rule 26 (statmentList -> statmentList BRANCH .)
    WHILE           reduce using rule 26 (statmentList -> statmentList BRANCH .)
    NAME            reduce using rule 26 (statmentList -> statmentList BRANCH .)
    (               reduce using rule 26 (statmentList -> statmentList BRANCH .)
    -               reduce using rule 26 (statmentList -> statmentList BRANCH .)
    NUMBER_F        reduce using rule 26 (statmentList -> statmentList BRANCH .)
    NUMBER          reduce using rule 26 (statmentList -> statmentList BRANCH .)
    ABS             reduce using rule 26 (statmentList -> statmentList BRANCH .)
    SQRT            reduce using rule 26 (statmentList -> statmentList BRANCH .)
    LOG10           reduce using rule 26 (statmentList -> statmentList BRANCH .)
    LOG             reduce using rule 26 (statmentList -> statmentList BRANCH .)
    EXP             reduce using rule 26 (statmentList -> statmentList BRANCH .)
    ATAN            reduce using rule 26 (statmentList -> statmentList BRANCH .)
    COS             reduce using rule 26 (statmentList -> statmentList BRANCH .)
    SIN             reduce using rule 26 (statmentList -> statmentList BRANCH .)
    DEG             reduce using rule 26 (statmentList -> statmentList BRANCH .)
    PHI             reduce using rule 26 (statmentList -> statmentList BRANCH .)
    GAMMA           reduce using rule 26 (statmentList -> statmentList BRANCH .)
    N_E             reduce using rule 26 (statmentList -> statmentList BRANCH .)
    PI              reduce using rule 26 (statmentList -> statmentList BRANCH .)
    ENDCASE         reduce using rule 26 (statmentList -> statmentList BRANCH .)


state 78

    (38) expr -> ABS ( expr . )
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 100
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 79

    (39) expr -> SQRT ( expr . )
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 101
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 80

    (40) expr -> LOG10 ( expr . )
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 102
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 81

    (41) expr -> LOG ( expr . )
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 103
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 82

    (42) expr -> EXP ( expr . )
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 104
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 83

    (43) expr -> ATAN ( expr . )
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 105
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 84

    (44) expr -> COS ( expr . )
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 106
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 85

    (45) expr -> SIN ( expr . )
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    )               shift and go to state 107
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 86

    (7) statment -> switchCode ( NAME ) . superSwitchList
    (16) superSwitchList -> . { BRANCH switchList }
    {               shift and go to state 109

    superSwitchList                shift and go to state 108

state 87

    (8) statment -> ifCode superCondition statment ELSE . statment end
    (7) statment -> . switchCode ( NAME ) superSwitchList
    (8) statment -> . ifCode superCondition statment ELSE statment end
    (9) statment -> . ifCode superCondition statment end
    (10) statment -> . whileCode superCondition statment end
    (11) statment -> . { statmentList }
    (12) statment -> . PRINTEX STRING
    (13) statment -> . PRINTEX expr
    (14) statment -> . assign
    (15) statment -> . expr
    (23) switchCode -> . SWITCH
    (22) ifCode -> . IF
    (21) whileCode -> . WHILE
    (6) assign -> . NAME = expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    {               shift and go to state 11
    PRINTEX         shift and go to state 12
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    NAME            shift and go to state 6
    (               shift and go to state 8
    -               shift and go to state 13
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    ifCode                         shift and go to state 9
    statment                       shift and go to state 110
    switchCode                     shift and go to state 7
    whileCode                      shift and go to state 10
    expr                           shift and go to state 68
    assign                         shift and go to state 69

state 88

    (9) statment -> ifCode superCondition statment end .
    BRANCH          reduce using rule 9 (statment -> ifCode superCondition statment end .)
    ELSE            reduce using rule 9 (statment -> ifCode superCondition statment end .)
    }               reduce using rule 9 (statment -> ifCode superCondition statment end .)
    {               reduce using rule 9 (statment -> ifCode superCondition statment end .)
    PRINTEX         reduce using rule 9 (statment -> ifCode superCondition statment end .)
    SWITCH          reduce using rule 9 (statment -> ifCode superCondition statment end .)
    IF              reduce using rule 9 (statment -> ifCode superCondition statment end .)
    WHILE           reduce using rule 9 (statment -> ifCode superCondition statment end .)
    NAME            reduce using rule 9 (statment -> ifCode superCondition statment end .)
    (               reduce using rule 9 (statment -> ifCode superCondition statment end .)
    -               reduce using rule 9 (statment -> ifCode superCondition statment end .)
    NUMBER_F        reduce using rule 9 (statment -> ifCode superCondition statment end .)
    NUMBER          reduce using rule 9 (statment -> ifCode superCondition statment end .)
    ABS             reduce using rule 9 (statment -> ifCode superCondition statment end .)
    SQRT            reduce using rule 9 (statment -> ifCode superCondition statment end .)
    LOG10           reduce using rule 9 (statment -> ifCode superCondition statment end .)
    LOG             reduce using rule 9 (statment -> ifCode superCondition statment end .)
    EXP             reduce using rule 9 (statment -> ifCode superCondition statment end .)
    ATAN            reduce using rule 9 (statment -> ifCode superCondition statment end .)
    COS             reduce using rule 9 (statment -> ifCode superCondition statment end .)
    SIN             reduce using rule 9 (statment -> ifCode superCondition statment end .)
    DEG             reduce using rule 9 (statment -> ifCode superCondition statment end .)
    PHI             reduce using rule 9 (statment -> ifCode superCondition statment end .)
    GAMMA           reduce using rule 9 (statment -> ifCode superCondition statment end .)
    N_E             reduce using rule 9 (statment -> ifCode superCondition statment end .)
    PI              reduce using rule 9 (statment -> ifCode superCondition statment end .)
    ENDCASE         reduce using rule 9 (statment -> ifCode superCondition statment end .)


state 89

    (57) superCondition -> ( conditionLogical ) .
    {               reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    PRINTEX         reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    SWITCH          reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    IF              reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    WHILE           reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    NAME            reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    (               reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    -               reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    NUMBER_F        reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    NUMBER          reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    ABS             reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    SQRT            reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    LOG10           reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    LOG             reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    EXP             reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    ATAN            reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    COS             reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    SIN             reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    DEG             reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    PHI             reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    GAMMA           reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    N_E             reduce using rule 57 (superCondition -> ( conditionLogical ) .)
    PI              reduce using rule 57 (superCondition -> ( conditionLogical ) .)


state 90

    (60) conditionLogical -> condition OR . condition
    (51) condition -> . expr NE expr
    (52) condition -> . expr EQ expr
    (53) condition -> . expr LE expr
    (54) condition -> . expr LT expr
    (55) condition -> . expr GE expr
    (56) condition -> . expr GT expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    condition                      shift and go to state 111
    expr                           shift and go to state 73

state 91

    (61) conditionLogical -> condition AND . condition
    (51) condition -> . expr NE expr
    (52) condition -> . expr EQ expr
    (53) condition -> . expr LE expr
    (54) condition -> . expr LT expr
    (55) condition -> . expr GE expr
    (56) condition -> . expr GT expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    condition                      shift and go to state 112
    expr                           shift and go to state 73

state 92

    (59) conditionLogical -> NOT condition .
    )               reduce using rule 59 (conditionLogical -> NOT condition .)


state 93

    (51) condition -> expr NE . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 113

state 94

    (52) condition -> expr EQ . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 114

state 95

    (53) condition -> expr LE . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 115

state 96

    (54) condition -> expr LT . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 116

state 97

    (55) condition -> expr GE . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 117

state 98

    (56) condition -> expr GT . expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 118

state 99

    (10) statment -> whileCode superCondition statment end .
    BRANCH          reduce using rule 10 (statment -> whileCode superCondition statment end .)
    ELSE            reduce using rule 10 (statment -> whileCode superCondition statment end .)
    }               reduce using rule 10 (statment -> whileCode superCondition statment end .)
    {               reduce using rule 10 (statment -> whileCode superCondition statment end .)
    PRINTEX         reduce using rule 10 (statment -> whileCode superCondition statment end .)
    SWITCH          reduce using rule 10 (statment -> whileCode superCondition statment end .)
    IF              reduce using rule 10 (statment -> whileCode superCondition statment end .)
    WHILE           reduce using rule 10 (statment -> whileCode superCondition statment end .)
    NAME            reduce using rule 10 (statment -> whileCode superCondition statment end .)
    (               reduce using rule 10 (statment -> whileCode superCondition statment end .)
    -               reduce using rule 10 (statment -> whileCode superCondition statment end .)
    NUMBER_F        reduce using rule 10 (statment -> whileCode superCondition statment end .)
    NUMBER          reduce using rule 10 (statment -> whileCode superCondition statment end .)
    ABS             reduce using rule 10 (statment -> whileCode superCondition statment end .)
    SQRT            reduce using rule 10 (statment -> whileCode superCondition statment end .)
    LOG10           reduce using rule 10 (statment -> whileCode superCondition statment end .)
    LOG             reduce using rule 10 (statment -> whileCode superCondition statment end .)
    EXP             reduce using rule 10 (statment -> whileCode superCondition statment end .)
    ATAN            reduce using rule 10 (statment -> whileCode superCondition statment end .)
    COS             reduce using rule 10 (statment -> whileCode superCondition statment end .)
    SIN             reduce using rule 10 (statment -> whileCode superCondition statment end .)
    DEG             reduce using rule 10 (statment -> whileCode superCondition statment end .)
    PHI             reduce using rule 10 (statment -> whileCode superCondition statment end .)
    GAMMA           reduce using rule 10 (statment -> whileCode superCondition statment end .)
    N_E             reduce using rule 10 (statment -> whileCode superCondition statment end .)
    PI              reduce using rule 10 (statment -> whileCode superCondition statment end .)
    ENDCASE         reduce using rule 10 (statment -> whileCode superCondition statment end .)


state 100

    (38) expr -> ABS ( expr ) .
    BRANCH          reduce using rule 38 (expr -> ABS ( expr ) .)
    SM_EXP          reduce using rule 38 (expr -> ABS ( expr ) .)
    /               reduce using rule 38 (expr -> ABS ( expr ) .)
    *               reduce using rule 38 (expr -> ABS ( expr ) .)
    -               reduce using rule 38 (expr -> ABS ( expr ) .)
    +               reduce using rule 38 (expr -> ABS ( expr ) .)
    )               reduce using rule 38 (expr -> ABS ( expr ) .)
    ELSE            reduce using rule 38 (expr -> ABS ( expr ) .)
    }               reduce using rule 38 (expr -> ABS ( expr ) .)
    {               reduce using rule 38 (expr -> ABS ( expr ) .)
    PRINTEX         reduce using rule 38 (expr -> ABS ( expr ) .)
    SWITCH          reduce using rule 38 (expr -> ABS ( expr ) .)
    IF              reduce using rule 38 (expr -> ABS ( expr ) .)
    WHILE           reduce using rule 38 (expr -> ABS ( expr ) .)
    NAME            reduce using rule 38 (expr -> ABS ( expr ) .)
    (               reduce using rule 38 (expr -> ABS ( expr ) .)
    NUMBER_F        reduce using rule 38 (expr -> ABS ( expr ) .)
    NUMBER          reduce using rule 38 (expr -> ABS ( expr ) .)
    ABS             reduce using rule 38 (expr -> ABS ( expr ) .)
    SQRT            reduce using rule 38 (expr -> ABS ( expr ) .)
    LOG10           reduce using rule 38 (expr -> ABS ( expr ) .)
    LOG             reduce using rule 38 (expr -> ABS ( expr ) .)
    EXP             reduce using rule 38 (expr -> ABS ( expr ) .)
    ATAN            reduce using rule 38 (expr -> ABS ( expr ) .)
    COS             reduce using rule 38 (expr -> ABS ( expr ) .)
    SIN             reduce using rule 38 (expr -> ABS ( expr ) .)
    DEG             reduce using rule 38 (expr -> ABS ( expr ) .)
    PHI             reduce using rule 38 (expr -> ABS ( expr ) .)
    GAMMA           reduce using rule 38 (expr -> ABS ( expr ) .)
    N_E             reduce using rule 38 (expr -> ABS ( expr ) .)
    PI              reduce using rule 38 (expr -> ABS ( expr ) .)
    ENDCASE         reduce using rule 38 (expr -> ABS ( expr ) .)
    NE              reduce using rule 38 (expr -> ABS ( expr ) .)
    EQ              reduce using rule 38 (expr -> ABS ( expr ) .)
    LE              reduce using rule 38 (expr -> ABS ( expr ) .)
    LT              reduce using rule 38 (expr -> ABS ( expr ) .)
    GE              reduce using rule 38 (expr -> ABS ( expr ) .)
    GT              reduce using rule 38 (expr -> ABS ( expr ) .)
    OR              reduce using rule 38 (expr -> ABS ( expr ) .)
    AND             reduce using rule 38 (expr -> ABS ( expr ) .)
    :               reduce using rule 38 (expr -> ABS ( expr ) .)


state 101

    (39) expr -> SQRT ( expr ) .
    BRANCH          reduce using rule 39 (expr -> SQRT ( expr ) .)
    SM_EXP          reduce using rule 39 (expr -> SQRT ( expr ) .)
    /               reduce using rule 39 (expr -> SQRT ( expr ) .)
    *               reduce using rule 39 (expr -> SQRT ( expr ) .)
    -               reduce using rule 39 (expr -> SQRT ( expr ) .)
    +               reduce using rule 39 (expr -> SQRT ( expr ) .)
    )               reduce using rule 39 (expr -> SQRT ( expr ) .)
    ELSE            reduce using rule 39 (expr -> SQRT ( expr ) .)
    }               reduce using rule 39 (expr -> SQRT ( expr ) .)
    {               reduce using rule 39 (expr -> SQRT ( expr ) .)
    PRINTEX         reduce using rule 39 (expr -> SQRT ( expr ) .)
    SWITCH          reduce using rule 39 (expr -> SQRT ( expr ) .)
    IF              reduce using rule 39 (expr -> SQRT ( expr ) .)
    WHILE           reduce using rule 39 (expr -> SQRT ( expr ) .)
    NAME            reduce using rule 39 (expr -> SQRT ( expr ) .)
    (               reduce using rule 39 (expr -> SQRT ( expr ) .)
    NUMBER_F        reduce using rule 39 (expr -> SQRT ( expr ) .)
    NUMBER          reduce using rule 39 (expr -> SQRT ( expr ) .)
    ABS             reduce using rule 39 (expr -> SQRT ( expr ) .)
    SQRT            reduce using rule 39 (expr -> SQRT ( expr ) .)
    LOG10           reduce using rule 39 (expr -> SQRT ( expr ) .)
    LOG             reduce using rule 39 (expr -> SQRT ( expr ) .)
    EXP             reduce using rule 39 (expr -> SQRT ( expr ) .)
    ATAN            reduce using rule 39 (expr -> SQRT ( expr ) .)
    COS             reduce using rule 39 (expr -> SQRT ( expr ) .)
    SIN             reduce using rule 39 (expr -> SQRT ( expr ) .)
    DEG             reduce using rule 39 (expr -> SQRT ( expr ) .)
    PHI             reduce using rule 39 (expr -> SQRT ( expr ) .)
    GAMMA           reduce using rule 39 (expr -> SQRT ( expr ) .)
    N_E             reduce using rule 39 (expr -> SQRT ( expr ) .)
    PI              reduce using rule 39 (expr -> SQRT ( expr ) .)
    ENDCASE         reduce using rule 39 (expr -> SQRT ( expr ) .)
    NE              reduce using rule 39 (expr -> SQRT ( expr ) .)
    EQ              reduce using rule 39 (expr -> SQRT ( expr ) .)
    LE              reduce using rule 39 (expr -> SQRT ( expr ) .)
    LT              reduce using rule 39 (expr -> SQRT ( expr ) .)
    GE              reduce using rule 39 (expr -> SQRT ( expr ) .)
    GT              reduce using rule 39 (expr -> SQRT ( expr ) .)
    OR              reduce using rule 39 (expr -> SQRT ( expr ) .)
    AND             reduce using rule 39 (expr -> SQRT ( expr ) .)
    :               reduce using rule 39 (expr -> SQRT ( expr ) .)


state 102

    (40) expr -> LOG10 ( expr ) .
    BRANCH          reduce using rule 40 (expr -> LOG10 ( expr ) .)
    SM_EXP          reduce using rule 40 (expr -> LOG10 ( expr ) .)
    /               reduce using rule 40 (expr -> LOG10 ( expr ) .)
    *               reduce using rule 40 (expr -> LOG10 ( expr ) .)
    -               reduce using rule 40 (expr -> LOG10 ( expr ) .)
    +               reduce using rule 40 (expr -> LOG10 ( expr ) .)
    )               reduce using rule 40 (expr -> LOG10 ( expr ) .)
    ELSE            reduce using rule 40 (expr -> LOG10 ( expr ) .)
    }               reduce using rule 40 (expr -> LOG10 ( expr ) .)
    {               reduce using rule 40 (expr -> LOG10 ( expr ) .)
    PRINTEX         reduce using rule 40 (expr -> LOG10 ( expr ) .)
    SWITCH          reduce using rule 40 (expr -> LOG10 ( expr ) .)
    IF              reduce using rule 40 (expr -> LOG10 ( expr ) .)
    WHILE           reduce using rule 40 (expr -> LOG10 ( expr ) .)
    NAME            reduce using rule 40 (expr -> LOG10 ( expr ) .)
    (               reduce using rule 40 (expr -> LOG10 ( expr ) .)
    NUMBER_F        reduce using rule 40 (expr -> LOG10 ( expr ) .)
    NUMBER          reduce using rule 40 (expr -> LOG10 ( expr ) .)
    ABS             reduce using rule 40 (expr -> LOG10 ( expr ) .)
    SQRT            reduce using rule 40 (expr -> LOG10 ( expr ) .)
    LOG10           reduce using rule 40 (expr -> LOG10 ( expr ) .)
    LOG             reduce using rule 40 (expr -> LOG10 ( expr ) .)
    EXP             reduce using rule 40 (expr -> LOG10 ( expr ) .)
    ATAN            reduce using rule 40 (expr -> LOG10 ( expr ) .)
    COS             reduce using rule 40 (expr -> LOG10 ( expr ) .)
    SIN             reduce using rule 40 (expr -> LOG10 ( expr ) .)
    DEG             reduce using rule 40 (expr -> LOG10 ( expr ) .)
    PHI             reduce using rule 40 (expr -> LOG10 ( expr ) .)
    GAMMA           reduce using rule 40 (expr -> LOG10 ( expr ) .)
    N_E             reduce using rule 40 (expr -> LOG10 ( expr ) .)
    PI              reduce using rule 40 (expr -> LOG10 ( expr ) .)
    ENDCASE         reduce using rule 40 (expr -> LOG10 ( expr ) .)
    NE              reduce using rule 40 (expr -> LOG10 ( expr ) .)
    EQ              reduce using rule 40 (expr -> LOG10 ( expr ) .)
    LE              reduce using rule 40 (expr -> LOG10 ( expr ) .)
    LT              reduce using rule 40 (expr -> LOG10 ( expr ) .)
    GE              reduce using rule 40 (expr -> LOG10 ( expr ) .)
    GT              reduce using rule 40 (expr -> LOG10 ( expr ) .)
    OR              reduce using rule 40 (expr -> LOG10 ( expr ) .)
    AND             reduce using rule 40 (expr -> LOG10 ( expr ) .)
    :               reduce using rule 40 (expr -> LOG10 ( expr ) .)


state 103

    (41) expr -> LOG ( expr ) .
    BRANCH          reduce using rule 41 (expr -> LOG ( expr ) .)
    SM_EXP          reduce using rule 41 (expr -> LOG ( expr ) .)
    /               reduce using rule 41 (expr -> LOG ( expr ) .)
    *               reduce using rule 41 (expr -> LOG ( expr ) .)
    -               reduce using rule 41 (expr -> LOG ( expr ) .)
    +               reduce using rule 41 (expr -> LOG ( expr ) .)
    )               reduce using rule 41 (expr -> LOG ( expr ) .)
    ELSE            reduce using rule 41 (expr -> LOG ( expr ) .)
    }               reduce using rule 41 (expr -> LOG ( expr ) .)
    {               reduce using rule 41 (expr -> LOG ( expr ) .)
    PRINTEX         reduce using rule 41 (expr -> LOG ( expr ) .)
    SWITCH          reduce using rule 41 (expr -> LOG ( expr ) .)
    IF              reduce using rule 41 (expr -> LOG ( expr ) .)
    WHILE           reduce using rule 41 (expr -> LOG ( expr ) .)
    NAME            reduce using rule 41 (expr -> LOG ( expr ) .)
    (               reduce using rule 41 (expr -> LOG ( expr ) .)
    NUMBER_F        reduce using rule 41 (expr -> LOG ( expr ) .)
    NUMBER          reduce using rule 41 (expr -> LOG ( expr ) .)
    ABS             reduce using rule 41 (expr -> LOG ( expr ) .)
    SQRT            reduce using rule 41 (expr -> LOG ( expr ) .)
    LOG10           reduce using rule 41 (expr -> LOG ( expr ) .)
    LOG             reduce using rule 41 (expr -> LOG ( expr ) .)
    EXP             reduce using rule 41 (expr -> LOG ( expr ) .)
    ATAN            reduce using rule 41 (expr -> LOG ( expr ) .)
    COS             reduce using rule 41 (expr -> LOG ( expr ) .)
    SIN             reduce using rule 41 (expr -> LOG ( expr ) .)
    DEG             reduce using rule 41 (expr -> LOG ( expr ) .)
    PHI             reduce using rule 41 (expr -> LOG ( expr ) .)
    GAMMA           reduce using rule 41 (expr -> LOG ( expr ) .)
    N_E             reduce using rule 41 (expr -> LOG ( expr ) .)
    PI              reduce using rule 41 (expr -> LOG ( expr ) .)
    ENDCASE         reduce using rule 41 (expr -> LOG ( expr ) .)
    NE              reduce using rule 41 (expr -> LOG ( expr ) .)
    EQ              reduce using rule 41 (expr -> LOG ( expr ) .)
    LE              reduce using rule 41 (expr -> LOG ( expr ) .)
    LT              reduce using rule 41 (expr -> LOG ( expr ) .)
    GE              reduce using rule 41 (expr -> LOG ( expr ) .)
    GT              reduce using rule 41 (expr -> LOG ( expr ) .)
    OR              reduce using rule 41 (expr -> LOG ( expr ) .)
    AND             reduce using rule 41 (expr -> LOG ( expr ) .)
    :               reduce using rule 41 (expr -> LOG ( expr ) .)


state 104

    (42) expr -> EXP ( expr ) .
    BRANCH          reduce using rule 42 (expr -> EXP ( expr ) .)
    SM_EXP          reduce using rule 42 (expr -> EXP ( expr ) .)
    /               reduce using rule 42 (expr -> EXP ( expr ) .)
    *               reduce using rule 42 (expr -> EXP ( expr ) .)
    -               reduce using rule 42 (expr -> EXP ( expr ) .)
    +               reduce using rule 42 (expr -> EXP ( expr ) .)
    )               reduce using rule 42 (expr -> EXP ( expr ) .)
    ELSE            reduce using rule 42 (expr -> EXP ( expr ) .)
    }               reduce using rule 42 (expr -> EXP ( expr ) .)
    {               reduce using rule 42 (expr -> EXP ( expr ) .)
    PRINTEX         reduce using rule 42 (expr -> EXP ( expr ) .)
    SWITCH          reduce using rule 42 (expr -> EXP ( expr ) .)
    IF              reduce using rule 42 (expr -> EXP ( expr ) .)
    WHILE           reduce using rule 42 (expr -> EXP ( expr ) .)
    NAME            reduce using rule 42 (expr -> EXP ( expr ) .)
    (               reduce using rule 42 (expr -> EXP ( expr ) .)
    NUMBER_F        reduce using rule 42 (expr -> EXP ( expr ) .)
    NUMBER          reduce using rule 42 (expr -> EXP ( expr ) .)
    ABS             reduce using rule 42 (expr -> EXP ( expr ) .)
    SQRT            reduce using rule 42 (expr -> EXP ( expr ) .)
    LOG10           reduce using rule 42 (expr -> EXP ( expr ) .)
    LOG             reduce using rule 42 (expr -> EXP ( expr ) .)
    EXP             reduce using rule 42 (expr -> EXP ( expr ) .)
    ATAN            reduce using rule 42 (expr -> EXP ( expr ) .)
    COS             reduce using rule 42 (expr -> EXP ( expr ) .)
    SIN             reduce using rule 42 (expr -> EXP ( expr ) .)
    DEG             reduce using rule 42 (expr -> EXP ( expr ) .)
    PHI             reduce using rule 42 (expr -> EXP ( expr ) .)
    GAMMA           reduce using rule 42 (expr -> EXP ( expr ) .)
    N_E             reduce using rule 42 (expr -> EXP ( expr ) .)
    PI              reduce using rule 42 (expr -> EXP ( expr ) .)
    ENDCASE         reduce using rule 42 (expr -> EXP ( expr ) .)
    NE              reduce using rule 42 (expr -> EXP ( expr ) .)
    EQ              reduce using rule 42 (expr -> EXP ( expr ) .)
    LE              reduce using rule 42 (expr -> EXP ( expr ) .)
    LT              reduce using rule 42 (expr -> EXP ( expr ) .)
    GE              reduce using rule 42 (expr -> EXP ( expr ) .)
    GT              reduce using rule 42 (expr -> EXP ( expr ) .)
    OR              reduce using rule 42 (expr -> EXP ( expr ) .)
    AND             reduce using rule 42 (expr -> EXP ( expr ) .)
    :               reduce using rule 42 (expr -> EXP ( expr ) .)


state 105

    (43) expr -> ATAN ( expr ) .
    BRANCH          reduce using rule 43 (expr -> ATAN ( expr ) .)
    SM_EXP          reduce using rule 43 (expr -> ATAN ( expr ) .)
    /               reduce using rule 43 (expr -> ATAN ( expr ) .)
    *               reduce using rule 43 (expr -> ATAN ( expr ) .)
    -               reduce using rule 43 (expr -> ATAN ( expr ) .)
    +               reduce using rule 43 (expr -> ATAN ( expr ) .)
    )               reduce using rule 43 (expr -> ATAN ( expr ) .)
    ELSE            reduce using rule 43 (expr -> ATAN ( expr ) .)
    }               reduce using rule 43 (expr -> ATAN ( expr ) .)
    {               reduce using rule 43 (expr -> ATAN ( expr ) .)
    PRINTEX         reduce using rule 43 (expr -> ATAN ( expr ) .)
    SWITCH          reduce using rule 43 (expr -> ATAN ( expr ) .)
    IF              reduce using rule 43 (expr -> ATAN ( expr ) .)
    WHILE           reduce using rule 43 (expr -> ATAN ( expr ) .)
    NAME            reduce using rule 43 (expr -> ATAN ( expr ) .)
    (               reduce using rule 43 (expr -> ATAN ( expr ) .)
    NUMBER_F        reduce using rule 43 (expr -> ATAN ( expr ) .)
    NUMBER          reduce using rule 43 (expr -> ATAN ( expr ) .)
    ABS             reduce using rule 43 (expr -> ATAN ( expr ) .)
    SQRT            reduce using rule 43 (expr -> ATAN ( expr ) .)
    LOG10           reduce using rule 43 (expr -> ATAN ( expr ) .)
    LOG             reduce using rule 43 (expr -> ATAN ( expr ) .)
    EXP             reduce using rule 43 (expr -> ATAN ( expr ) .)
    ATAN            reduce using rule 43 (expr -> ATAN ( expr ) .)
    COS             reduce using rule 43 (expr -> ATAN ( expr ) .)
    SIN             reduce using rule 43 (expr -> ATAN ( expr ) .)
    DEG             reduce using rule 43 (expr -> ATAN ( expr ) .)
    PHI             reduce using rule 43 (expr -> ATAN ( expr ) .)
    GAMMA           reduce using rule 43 (expr -> ATAN ( expr ) .)
    N_E             reduce using rule 43 (expr -> ATAN ( expr ) .)
    PI              reduce using rule 43 (expr -> ATAN ( expr ) .)
    ENDCASE         reduce using rule 43 (expr -> ATAN ( expr ) .)
    NE              reduce using rule 43 (expr -> ATAN ( expr ) .)
    EQ              reduce using rule 43 (expr -> ATAN ( expr ) .)
    LE              reduce using rule 43 (expr -> ATAN ( expr ) .)
    LT              reduce using rule 43 (expr -> ATAN ( expr ) .)
    GE              reduce using rule 43 (expr -> ATAN ( expr ) .)
    GT              reduce using rule 43 (expr -> ATAN ( expr ) .)
    OR              reduce using rule 43 (expr -> ATAN ( expr ) .)
    AND             reduce using rule 43 (expr -> ATAN ( expr ) .)
    :               reduce using rule 43 (expr -> ATAN ( expr ) .)


state 106

    (44) expr -> COS ( expr ) .
    BRANCH          reduce using rule 44 (expr -> COS ( expr ) .)
    SM_EXP          reduce using rule 44 (expr -> COS ( expr ) .)
    /               reduce using rule 44 (expr -> COS ( expr ) .)
    *               reduce using rule 44 (expr -> COS ( expr ) .)
    -               reduce using rule 44 (expr -> COS ( expr ) .)
    +               reduce using rule 44 (expr -> COS ( expr ) .)
    )               reduce using rule 44 (expr -> COS ( expr ) .)
    ELSE            reduce using rule 44 (expr -> COS ( expr ) .)
    }               reduce using rule 44 (expr -> COS ( expr ) .)
    {               reduce using rule 44 (expr -> COS ( expr ) .)
    PRINTEX         reduce using rule 44 (expr -> COS ( expr ) .)
    SWITCH          reduce using rule 44 (expr -> COS ( expr ) .)
    IF              reduce using rule 44 (expr -> COS ( expr ) .)
    WHILE           reduce using rule 44 (expr -> COS ( expr ) .)
    NAME            reduce using rule 44 (expr -> COS ( expr ) .)
    (               reduce using rule 44 (expr -> COS ( expr ) .)
    NUMBER_F        reduce using rule 44 (expr -> COS ( expr ) .)
    NUMBER          reduce using rule 44 (expr -> COS ( expr ) .)
    ABS             reduce using rule 44 (expr -> COS ( expr ) .)
    SQRT            reduce using rule 44 (expr -> COS ( expr ) .)
    LOG10           reduce using rule 44 (expr -> COS ( expr ) .)
    LOG             reduce using rule 44 (expr -> COS ( expr ) .)
    EXP             reduce using rule 44 (expr -> COS ( expr ) .)
    ATAN            reduce using rule 44 (expr -> COS ( expr ) .)
    COS             reduce using rule 44 (expr -> COS ( expr ) .)
    SIN             reduce using rule 44 (expr -> COS ( expr ) .)
    DEG             reduce using rule 44 (expr -> COS ( expr ) .)
    PHI             reduce using rule 44 (expr -> COS ( expr ) .)
    GAMMA           reduce using rule 44 (expr -> COS ( expr ) .)
    N_E             reduce using rule 44 (expr -> COS ( expr ) .)
    PI              reduce using rule 44 (expr -> COS ( expr ) .)
    ENDCASE         reduce using rule 44 (expr -> COS ( expr ) .)
    NE              reduce using rule 44 (expr -> COS ( expr ) .)
    EQ              reduce using rule 44 (expr -> COS ( expr ) .)
    LE              reduce using rule 44 (expr -> COS ( expr ) .)
    LT              reduce using rule 44 (expr -> COS ( expr ) .)
    GE              reduce using rule 44 (expr -> COS ( expr ) .)
    GT              reduce using rule 44 (expr -> COS ( expr ) .)
    OR              reduce using rule 44 (expr -> COS ( expr ) .)
    AND             reduce using rule 44 (expr -> COS ( expr ) .)
    :               reduce using rule 44 (expr -> COS ( expr ) .)


state 107

    (45) expr -> SIN ( expr ) .
    BRANCH          reduce using rule 45 (expr -> SIN ( expr ) .)
    SM_EXP          reduce using rule 45 (expr -> SIN ( expr ) .)
    /               reduce using rule 45 (expr -> SIN ( expr ) .)
    *               reduce using rule 45 (expr -> SIN ( expr ) .)
    -               reduce using rule 45 (expr -> SIN ( expr ) .)
    +               reduce using rule 45 (expr -> SIN ( expr ) .)
    )               reduce using rule 45 (expr -> SIN ( expr ) .)
    ELSE            reduce using rule 45 (expr -> SIN ( expr ) .)
    }               reduce using rule 45 (expr -> SIN ( expr ) .)
    {               reduce using rule 45 (expr -> SIN ( expr ) .)
    PRINTEX         reduce using rule 45 (expr -> SIN ( expr ) .)
    SWITCH          reduce using rule 45 (expr -> SIN ( expr ) .)
    IF              reduce using rule 45 (expr -> SIN ( expr ) .)
    WHILE           reduce using rule 45 (expr -> SIN ( expr ) .)
    NAME            reduce using rule 45 (expr -> SIN ( expr ) .)
    (               reduce using rule 45 (expr -> SIN ( expr ) .)
    NUMBER_F        reduce using rule 45 (expr -> SIN ( expr ) .)
    NUMBER          reduce using rule 45 (expr -> SIN ( expr ) .)
    ABS             reduce using rule 45 (expr -> SIN ( expr ) .)
    SQRT            reduce using rule 45 (expr -> SIN ( expr ) .)
    LOG10           reduce using rule 45 (expr -> SIN ( expr ) .)
    LOG             reduce using rule 45 (expr -> SIN ( expr ) .)
    EXP             reduce using rule 45 (expr -> SIN ( expr ) .)
    ATAN            reduce using rule 45 (expr -> SIN ( expr ) .)
    COS             reduce using rule 45 (expr -> SIN ( expr ) .)
    SIN             reduce using rule 45 (expr -> SIN ( expr ) .)
    DEG             reduce using rule 45 (expr -> SIN ( expr ) .)
    PHI             reduce using rule 45 (expr -> SIN ( expr ) .)
    GAMMA           reduce using rule 45 (expr -> SIN ( expr ) .)
    N_E             reduce using rule 45 (expr -> SIN ( expr ) .)
    PI              reduce using rule 45 (expr -> SIN ( expr ) .)
    ENDCASE         reduce using rule 45 (expr -> SIN ( expr ) .)
    NE              reduce using rule 45 (expr -> SIN ( expr ) .)
    EQ              reduce using rule 45 (expr -> SIN ( expr ) .)
    LE              reduce using rule 45 (expr -> SIN ( expr ) .)
    LT              reduce using rule 45 (expr -> SIN ( expr ) .)
    GE              reduce using rule 45 (expr -> SIN ( expr ) .)
    GT              reduce using rule 45 (expr -> SIN ( expr ) .)
    OR              reduce using rule 45 (expr -> SIN ( expr ) .)
    AND             reduce using rule 45 (expr -> SIN ( expr ) .)
    :               reduce using rule 45 (expr -> SIN ( expr ) .)


state 108

    (7) statment -> switchCode ( NAME ) superSwitchList .
    BRANCH          reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    ELSE            reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    }               reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    {               reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    PRINTEX         reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    SWITCH          reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    IF              reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    WHILE           reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    NAME            reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    (               reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    -               reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    NUMBER_F        reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    NUMBER          reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    ABS             reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    SQRT            reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    LOG10           reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    LOG             reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    EXP             reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    ATAN            reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    COS             reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    SIN             reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    DEG             reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    PHI             reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    GAMMA           reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    N_E             reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    PI              reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)
    ENDCASE         reduce using rule 7 (statment -> switchCode ( NAME ) superSwitchList .)


state 109

    (16) superSwitchList -> { . BRANCH switchList }
    BRANCH          shift and go to state 119


state 110

    (8) statment -> ifCode superCondition statment ELSE statment . end
    (24) end -> .
    BRANCH          reduce using rule 24 (end -> .)
    ELSE            reduce using rule 24 (end -> .)
    }               reduce using rule 24 (end -> .)
    {               reduce using rule 24 (end -> .)
    PRINTEX         reduce using rule 24 (end -> .)
    SWITCH          reduce using rule 24 (end -> .)
    IF              reduce using rule 24 (end -> .)
    WHILE           reduce using rule 24 (end -> .)
    NAME            reduce using rule 24 (end -> .)
    (               reduce using rule 24 (end -> .)
    -               reduce using rule 24 (end -> .)
    NUMBER_F        reduce using rule 24 (end -> .)
    NUMBER          reduce using rule 24 (end -> .)
    ABS             reduce using rule 24 (end -> .)
    SQRT            reduce using rule 24 (end -> .)
    LOG10           reduce using rule 24 (end -> .)
    LOG             reduce using rule 24 (end -> .)
    EXP             reduce using rule 24 (end -> .)
    ATAN            reduce using rule 24 (end -> .)
    COS             reduce using rule 24 (end -> .)
    SIN             reduce using rule 24 (end -> .)
    DEG             reduce using rule 24 (end -> .)
    PHI             reduce using rule 24 (end -> .)
    GAMMA           reduce using rule 24 (end -> .)
    N_E             reduce using rule 24 (end -> .)
    PI              reduce using rule 24 (end -> .)
    ENDCASE         reduce using rule 24 (end -> .)

    end                            shift and go to state 120

state 111

    (60) conditionLogical -> condition OR condition .
    )               reduce using rule 60 (conditionLogical -> condition OR condition .)


state 112

    (61) conditionLogical -> condition AND condition .
    )               reduce using rule 61 (conditionLogical -> condition AND condition .)


state 113

    (51) condition -> expr NE expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    OR              reduce using rule 51 (condition -> expr NE expr .)
    AND             reduce using rule 51 (condition -> expr NE expr .)
    )               reduce using rule 51 (condition -> expr NE expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 114

    (52) condition -> expr EQ expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    OR              reduce using rule 52 (condition -> expr EQ expr .)
    AND             reduce using rule 52 (condition -> expr EQ expr .)
    )               reduce using rule 52 (condition -> expr EQ expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 115

    (53) condition -> expr LE expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    OR              reduce using rule 53 (condition -> expr LE expr .)
    AND             reduce using rule 53 (condition -> expr LE expr .)
    )               reduce using rule 53 (condition -> expr LE expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 116

    (54) condition -> expr LT expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    OR              reduce using rule 54 (condition -> expr LT expr .)
    AND             reduce using rule 54 (condition -> expr LT expr .)
    )               reduce using rule 54 (condition -> expr LT expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 117

    (55) condition -> expr GE expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    OR              reduce using rule 55 (condition -> expr GE expr .)
    AND             reduce using rule 55 (condition -> expr GE expr .)
    )               reduce using rule 55 (condition -> expr GE expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 118

    (56) condition -> expr GT expr .
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    OR              reduce using rule 56 (condition -> expr GT expr .)
    AND             reduce using rule 56 (condition -> expr GT expr .)
    )               reduce using rule 56 (condition -> expr GT expr .)
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 119

    (16) superSwitchList -> { BRANCH . switchList }
    (17) switchList -> .
    (18) switchList -> . switchList caseSwitch
    }               reduce using rule 17 (switchList -> .)
    DEFAULT         reduce using rule 17 (switchList -> .)
    CASE            reduce using rule 17 (switchList -> .)

    switchList                     shift and go to state 121

state 120

    (8) statment -> ifCode superCondition statment ELSE statment end .
    BRANCH          reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    ELSE            reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    }               reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    {               reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    PRINTEX         reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    SWITCH          reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    IF              reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    WHILE           reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    NAME            reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    (               reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    -               reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    NUMBER_F        reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    NUMBER          reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    ABS             reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    SQRT            reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    LOG10           reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    LOG             reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    EXP             reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    ATAN            reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    COS             reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    SIN             reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    DEG             reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    PHI             reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    GAMMA           reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    N_E             reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    PI              reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)
    ENDCASE         reduce using rule 8 (statment -> ifCode superCondition statment ELSE statment end .)


state 121

    (16) superSwitchList -> { BRANCH switchList . }
    (18) switchList -> switchList . caseSwitch
    (19) caseSwitch -> . DEFAULT : BRANCH statmentList ENDCASE BRANCH
    (20) caseSwitch -> . CASE expr : BRANCH statmentList ENDCASE BRANCH
    }               shift and go to state 122
    DEFAULT         shift and go to state 124
    CASE            shift and go to state 125

    caseSwitch                     shift and go to state 123

state 122

    (16) superSwitchList -> { BRANCH switchList } .
    BRANCH          reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    ELSE            reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    }               reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    {               reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    PRINTEX         reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    SWITCH          reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    IF              reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    WHILE           reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    NAME            reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    (               reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    -               reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    NUMBER_F        reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    NUMBER          reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    ABS             reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    SQRT            reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    LOG10           reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    LOG             reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    EXP             reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    ATAN            reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    COS             reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    SIN             reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    DEG             reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    PHI             reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    GAMMA           reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    N_E             reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    PI              reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)
    ENDCASE         reduce using rule 16 (superSwitchList -> { BRANCH switchList } .)


state 123

    (18) switchList -> switchList caseSwitch .
    }               reduce using rule 18 (switchList -> switchList caseSwitch .)
    DEFAULT         reduce using rule 18 (switchList -> switchList caseSwitch .)
    CASE            reduce using rule 18 (switchList -> switchList caseSwitch .)


state 124

    (19) caseSwitch -> DEFAULT . : BRANCH statmentList ENDCASE BRANCH
    :               shift and go to state 126


state 125

    (20) caseSwitch -> CASE . expr : BRANCH statmentList ENDCASE BRANCH
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    (               shift and go to state 8
    -               shift and go to state 13
    NAME            shift and go to state 43
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 127

state 126

    (19) caseSwitch -> DEFAULT : . BRANCH statmentList ENDCASE BRANCH
    BRANCH          shift and go to state 128


state 127

    (20) caseSwitch -> CASE expr . : BRANCH statmentList ENDCASE BRANCH
    (29) expr -> expr . SM_EXP expr
    (30) expr -> expr . / expr
    (31) expr -> expr . * expr
    (32) expr -> expr . - expr
    (33) expr -> expr . + expr
    :               shift and go to state 129
    SM_EXP          shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39


state 128

    (19) caseSwitch -> DEFAULT : BRANCH . statmentList ENDCASE BRANCH
    (25) statmentList -> . statmentList statment
    (26) statmentList -> . statmentList BRANCH
    (27) statmentList -> .
    ENDCASE         reduce using rule 27 (statmentList -> .)
    BRANCH          reduce using rule 27 (statmentList -> .)
    {               reduce using rule 27 (statmentList -> .)
    PRINTEX         reduce using rule 27 (statmentList -> .)
    SWITCH          reduce using rule 27 (statmentList -> .)
    IF              reduce using rule 27 (statmentList -> .)
    WHILE           reduce using rule 27 (statmentList -> .)
    NAME            reduce using rule 27 (statmentList -> .)
    (               reduce using rule 27 (statmentList -> .)
    -               reduce using rule 27 (statmentList -> .)
    NUMBER_F        reduce using rule 27 (statmentList -> .)
    NUMBER          reduce using rule 27 (statmentList -> .)
    ABS             reduce using rule 27 (statmentList -> .)
    SQRT            reduce using rule 27 (statmentList -> .)
    LOG10           reduce using rule 27 (statmentList -> .)
    LOG             reduce using rule 27 (statmentList -> .)
    EXP             reduce using rule 27 (statmentList -> .)
    ATAN            reduce using rule 27 (statmentList -> .)
    COS             reduce using rule 27 (statmentList -> .)
    SIN             reduce using rule 27 (statmentList -> .)
    DEG             reduce using rule 27 (statmentList -> .)
    PHI             reduce using rule 27 (statmentList -> .)
    GAMMA           reduce using rule 27 (statmentList -> .)
    N_E             reduce using rule 27 (statmentList -> .)
    PI              reduce using rule 27 (statmentList -> .)

    statmentList                   shift and go to state 130

state 129

    (20) caseSwitch -> CASE expr : . BRANCH statmentList ENDCASE BRANCH
    BRANCH          shift and go to state 131


state 130

    (19) caseSwitch -> DEFAULT : BRANCH statmentList . ENDCASE BRANCH
    (25) statmentList -> statmentList . statment
    (26) statmentList -> statmentList . BRANCH
    (7) statment -> . switchCode ( NAME ) superSwitchList
    (8) statment -> . ifCode superCondition statment ELSE statment end
    (9) statment -> . ifCode superCondition statment end
    (10) statment -> . whileCode superCondition statment end
    (11) statment -> . { statmentList }
    (12) statment -> . PRINTEX STRING
    (13) statment -> . PRINTEX expr
    (14) statment -> . assign
    (15) statment -> . expr
    (23) switchCode -> . SWITCH
    (22) ifCode -> . IF
    (21) whileCode -> . WHILE
    (6) assign -> . NAME = expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    ENDCASE         shift and go to state 132
    BRANCH          shift and go to state 77
    {               shift and go to state 11
    PRINTEX         shift and go to state 12
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    NAME            shift and go to state 6
    (               shift and go to state 8
    -               shift and go to state 13
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    statment                       shift and go to state 76
    switchCode                     shift and go to state 7
    ifCode                         shift and go to state 9
    whileCode                      shift and go to state 10
    expr                           shift and go to state 68
    assign                         shift and go to state 69

state 131

    (20) caseSwitch -> CASE expr : BRANCH . statmentList ENDCASE BRANCH
    (25) statmentList -> . statmentList statment
    (26) statmentList -> . statmentList BRANCH
    (27) statmentList -> .
    ENDCASE         reduce using rule 27 (statmentList -> .)
    BRANCH          reduce using rule 27 (statmentList -> .)
    {               reduce using rule 27 (statmentList -> .)
    PRINTEX         reduce using rule 27 (statmentList -> .)
    SWITCH          reduce using rule 27 (statmentList -> .)
    IF              reduce using rule 27 (statmentList -> .)
    WHILE           reduce using rule 27 (statmentList -> .)
    NAME            reduce using rule 27 (statmentList -> .)
    (               reduce using rule 27 (statmentList -> .)
    -               reduce using rule 27 (statmentList -> .)
    NUMBER_F        reduce using rule 27 (statmentList -> .)
    NUMBER          reduce using rule 27 (statmentList -> .)
    ABS             reduce using rule 27 (statmentList -> .)
    SQRT            reduce using rule 27 (statmentList -> .)
    LOG10           reduce using rule 27 (statmentList -> .)
    LOG             reduce using rule 27 (statmentList -> .)
    EXP             reduce using rule 27 (statmentList -> .)
    ATAN            reduce using rule 27 (statmentList -> .)
    COS             reduce using rule 27 (statmentList -> .)
    SIN             reduce using rule 27 (statmentList -> .)
    DEG             reduce using rule 27 (statmentList -> .)
    PHI             reduce using rule 27 (statmentList -> .)
    GAMMA           reduce using rule 27 (statmentList -> .)
    N_E             reduce using rule 27 (statmentList -> .)
    PI              reduce using rule 27 (statmentList -> .)

    statmentList                   shift and go to state 133

state 132

    (19) caseSwitch -> DEFAULT : BRANCH statmentList ENDCASE . BRANCH
    BRANCH          shift and go to state 134


state 133

    (20) caseSwitch -> CASE expr : BRANCH statmentList . ENDCASE BRANCH
    (25) statmentList -> statmentList . statment
    (26) statmentList -> statmentList . BRANCH
    (7) statment -> . switchCode ( NAME ) superSwitchList
    (8) statment -> . ifCode superCondition statment ELSE statment end
    (9) statment -> . ifCode superCondition statment end
    (10) statment -> . whileCode superCondition statment end
    (11) statment -> . { statmentList }
    (12) statment -> . PRINTEX STRING
    (13) statment -> . PRINTEX expr
    (14) statment -> . assign
    (15) statment -> . expr
    (23) switchCode -> . SWITCH
    (22) ifCode -> . IF
    (21) whileCode -> . WHILE
    (6) assign -> . NAME = expr
    (28) expr -> . ( expr )
    (29) expr -> . expr SM_EXP expr
    (30) expr -> . expr / expr
    (31) expr -> . expr * expr
    (32) expr -> . expr - expr
    (33) expr -> . expr + expr
    (34) expr -> . - expr
    (35) expr -> . NAME
    (36) expr -> . NUMBER_F
    (37) expr -> . NUMBER
    (38) expr -> . ABS ( expr )
    (39) expr -> . SQRT ( expr )
    (40) expr -> . LOG10 ( expr )
    (41) expr -> . LOG ( expr )
    (42) expr -> . EXP ( expr )
    (43) expr -> . ATAN ( expr )
    (44) expr -> . COS ( expr )
    (45) expr -> . SIN ( expr )
    (46) expr -> . DEG
    (47) expr -> . PHI
    (48) expr -> . GAMMA
    (49) expr -> . N_E
    (50) expr -> . PI
    ENDCASE         shift and go to state 135
    BRANCH          shift and go to state 77
    {               shift and go to state 11
    PRINTEX         shift and go to state 12
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    NAME            shift and go to state 6
    (               shift and go to state 8
    -               shift and go to state 13
    NUMBER_F        shift and go to state 14
    NUMBER          shift and go to state 15
    ABS             shift and go to state 16
    SQRT            shift and go to state 17
    LOG10           shift and go to state 18
    LOG             shift and go to state 19
    EXP             shift and go to state 20
    ATAN            shift and go to state 21
    COS             shift and go to state 22
    SIN             shift and go to state 23
    DEG             shift and go to state 24
    PHI             shift and go to state 25
    GAMMA           shift and go to state 26
    N_E             shift and go to state 27
    PI              shift and go to state 28

    expr                           shift and go to state 68
    statment                       shift and go to state 76
    switchCode                     shift and go to state 7
    ifCode                         shift and go to state 9
    whileCode                      shift and go to state 10
    assign                         shift and go to state 69

state 134

    (19) caseSwitch -> DEFAULT : BRANCH statmentList ENDCASE BRANCH .
    }               reduce using rule 19 (caseSwitch -> DEFAULT : BRANCH statmentList ENDCASE BRANCH .)
    DEFAULT         reduce using rule 19 (caseSwitch -> DEFAULT : BRANCH statmentList ENDCASE BRANCH .)
    CASE            reduce using rule 19 (caseSwitch -> DEFAULT : BRANCH statmentList ENDCASE BRANCH .)


state 135

    (20) caseSwitch -> CASE expr : BRANCH statmentList ENDCASE . BRANCH
    BRANCH          shift and go to state 136


state 136

    (20) caseSwitch -> CASE expr : BRANCH statmentList ENDCASE BRANCH .
    }               reduce using rule 20 (caseSwitch -> CASE expr : BRANCH statmentList ENDCASE BRANCH .)
    DEFAULT         reduce using rule 20 (caseSwitch -> CASE expr : BRANCH statmentList ENDCASE BRANCH .)
    CASE            reduce using rule 20 (caseSwitch -> CASE expr : BRANCH statmentList ENDCASE BRANCH .)


Conflicts:

shift/reduce conflict for BRANCH in state 2 resolved as shift
shift/reduce conflict for BRANCH in state 5 resolved as shift
shift/reduce conflict for - in state 49 resolved as shift
shift/reduce conflict for - in state 64 resolved as shift
shift/reduce conflict for ELSE in state 67 resolved as shift
shift/reduce conflict for - in state 68 resolved as shift